<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nanfeng-IOT</title>
  
  <subtitle>嵌入式领域小码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nanfeng-iot.cn/"/>
  <updated>2020-05-09T13:50:01.339Z</updated>
  <id>https://nanfeng-iot.cn/</id>
  
  <author>
    <name>nan feng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STM32笔记--使用ST-Link下载hex文件</title>
    <link href="https://nanfeng-iot.cn/2020/05/09/STM32%E7%AC%94%E8%AE%B0-%E4%BD%BF%E7%94%A8ST-Link%E4%B8%8B%E8%BD%BDhex%E6%96%87%E4%BB%B6/"/>
    <id>https://nanfeng-iot.cn/2020/05/09/STM32%E7%AC%94%E8%AE%B0-%E4%BD%BF%E7%94%A8ST-Link%E4%B8%8B%E8%BD%BDhex%E6%96%87%E4%BB%B6/</id>
    <published>2020-05-09T13:47:31.000Z</published>
    <updated>2020-05-09T13:50:01.339Z</updated>
    
    <content type="html"><![CDATA[<p><strong>嵌入式产品开发过程中，日常使用ST-Link下载程序时都是在MDK编译器中下载源代码，但ST-Link其实也可以直接下载hex文件，STM32官方就有提供一个ST-Link下载程序的工具STM32 ST-LINK Utility，只需三步，就能将hex文件下载到单片机中，相比使用串口下载hex文件繁琐的步骤操作，真香</strong></p><a id="more"></a><h2 id="1-ST-LINK-Utility下载安装"><a href="#1-ST-LINK-Utility下载安装" class="headerlink" title="1 ST-LINK Utility下载安装"></a>1 ST-LINK Utility下载安装</h2><h3 id="1-1-下载ST-LINK-Utility"><a href="#1-1-下载ST-LINK-Utility" class="headerlink" title="1.1 下载ST-LINK Utility"></a>1.1 下载ST-LINK Utility</h3><ul><li>ST-LINK Utility是意法半导体提供的开源工具，直接在意法半导体官网即可下载 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载链接：https:<span class="comment">//www.st.com/en/development-tools/stsw-link004.html</span></span><br></pre></td></tr></table></figure></li><li>下载界面如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509174219.png" alt=""></li><li>账号密码登录，点击Get Software即可下载ST-LINK Utility安装包</li></ul><h3 id="1-2-ST-LINK-Utility安装"><a href="#1-2-ST-LINK-Utility安装" class="headerlink" title="1.2 ST-LINK Utility安装"></a>1.2 ST-LINK Utility安装</h3><ul><li><p>解压安装包，双击STM32 ST-LINK Utility v4.5.0，打开界面如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509175622.png" alt=""></p></li><li><p>注意软件安装位置，一直next即可</p></li><li><p>安装完成界面<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509175713.png" alt=""></p></li><li><p>安装完成后，桌面会出现 STM32 ST-LINK Utility 的软件图标<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509175736.png" alt=""></p></li></ul><h2 id="2-ST-LINK-Utility的使用"><a href="#2-ST-LINK-Utility的使用" class="headerlink" title="2 ST-LINK Utility的使用"></a>2 ST-LINK Utility的使用</h2><h3 id="2-1-Connect-to-the-target"><a href="#2-1-Connect-to-the-target" class="headerlink" title="2.1 Connect to the target"></a>2.1 Connect to the target</h3><ul><li><p>打开ST-LINK Utility，界面如下所示：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509180727.png" alt=""></p></li><li><p>将ST-Link连接单片机，并将USB口接到电脑的串口，点击Connect to the target按钮图标（注意：电脑需安装有ST-Link驱动，若电脑没安装驱动可阅读下文 3.2 ST-LINK驱动安装进行驱动安装）<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509213023.png" alt=""></p></li><li><p>如果ST-Link连接正确并通电的情况下，就会读出器件的ID号，以及其它一些信息，如下图所示<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509181924.png" alt=""></p></li></ul><h3 id="2-2-Open-file"><a href="#2-2-Open-file" class="headerlink" title="2.2 Open file"></a>2.2 Open file</h3><ul><li><p>点击Open file按钮图标，选择所要下载的hex文件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509212957.png" alt=""></p></li><li><p>正确的选择hex文件后，会出现以下界面<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509192541.png" alt=""></p></li></ul><h3 id="2-3-Program-Verify"><a href="#2-3-Program-Verify" class="headerlink" title="2.3 Program Verify"></a>2.3 Program Verify</h3><ul><li><p>点击Program Verify按钮图标<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509193429.png" alt=""></p></li><li><p>会弹出一个窗口，这个窗口的配置都不用修改，默认的即可，点击Start即可开始下载程序<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509193634.png" alt=""></p></li><li><p>当日志区域出现 Verification…OK 时即代表hex文件已下载到单片机<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509194135.png" alt=""></p></li></ul><h2 id="3-ST-LINK-Utility资料及ST-LINK驱动"><a href="#3-ST-LINK-Utility资料及ST-LINK驱动" class="headerlink" title="3 ST-LINK Utility资料及ST-LINK驱动"></a>3 ST-LINK Utility资料及ST-LINK驱动</h2><h3 id="3-1-ST-LINK-Utility资料"><a href="#3-1-ST-LINK-Utility资料" class="headerlink" title="3.1 ST-LINK Utility资料"></a>3.1 ST-LINK Utility资料</h3><ul><li><p>在ST-LINK Utility安装路径文件夹底下的Docs文件夹即存放着ST-LINK Utility的用户手册等相关资料<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509195200.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509195352.png" alt=""></p></li><li><p>也可以在ST-LINK Utility界面点击Help按钮，选择相应的文件名，即能直接打开Docs文件夹底下存放的ST-LINK Utility用户手册等相关资料<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509195547.png" alt=""></p></li></ul><h3 id="3-2-ST-LINK驱动安装"><a href="#3-2-ST-LINK驱动安装" class="headerlink" title="3.2 ST-LINK驱动安装"></a>3.2 ST-LINK驱动安装</h3><ul><li><p>在ST-LINK Utility安装路径文件夹底下的ST-LINK_USB_V2_1_Driver文件夹存放ST-LINK驱动<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509195903.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509200019.png" alt=""></p></li><li><p>若电脑没有安装ST-LINK驱动，选择相应的驱动.exe文件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509200221.png" alt=""></p></li><li><p>一直点击下一步即可<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509200246.png" alt=""></p></li><li><p>驱动安装完成<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509200312.png" alt=""></p></li></ul><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，关注微信公众号：南风过境蜻蜓飞，后台回复 ST-LINK 获取ST-LINK Utility安装包</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109220511.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之旅"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;嵌入式产品开发过程中，日常使用ST-Link下载程序时都是在MDK编译器中下载源代码，但ST-Link其实也可以直接下载hex文件，STM32官方就有提供一个ST-Link下载程序的工具STM32 ST-LINK Utility，只需三步，就能将hex文件下载到单片机中，相比使用串口下载hex文件繁琐的步骤操作，真香&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>物联网--MQTT协议第八讲：构建UNSUBSCRIBE、UNSUBACK报文</title>
    <link href="https://nanfeng-iot.cn/2020/05/09/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E5%85%AB%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAUNSUBSCRIBE%E3%80%81UNSUBACK%E6%8A%A5%E6%96%87/"/>
    <id>https://nanfeng-iot.cn/2020/05/09/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E5%85%AB%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAUNSUBSCRIBE%E3%80%81UNSUBACK%E6%8A%A5%E6%96%87/</id>
    <published>2020-05-09T09:22:10.000Z</published>
    <updated>2020-05-09T09:24:30.866Z</updated>
    
    <content type="html"><![CDATA[<p>MQTT协议共14个报文，前面给大家讲解了怎么构建CONNECT、CONNACK、DISCONNECT、PINGREQ、PINGRESP、SUBSCRIBE、SUBACK报文，今天继续给大家讲解构建 UNSUBSCRIBE（取消订阅）及 UNSUBACK（取消订阅确认）报文</p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-阿里云创建设备"><a href="#1-阿里云创建设备" class="headerlink" title="1.阿里云创建设备"></a>1.阿里云创建设备</h3><p>已在阿里云上创建了一个设备，设备三元组为：<br>  {<br>     “ProductKey”: “a1GOQO9ZBek”,<br>     “DeviceName”: “191106”,<br>     “DeviceSecret”: “wWo0xItypjQzrJQFlLpiITBjOGJhSLWE”<br>  }</p><h3 id="2-网络调试助手的使用"><a href="#2-网络调试助手的使用" class="headerlink" title="2.网络调试助手的使用"></a>2.网络调试助手的使用</h3><p>MQTT协议的所有报文均是16进制表示，故需要进制转换，进制转换工具可以直接使用网络调试助手，即可转换为16进制，并得到转换数据的大小，操作如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221708.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221925.png" alt=""></p><ul><li><p>输入需要转换的数据时，结束的地方不能多有空格，否则转换过后的数据也会包含空格，导致出错</p></li><li><p>发送完成一次数据之后记得复位计数（右下角），且把按十六进制发送的√取消掉再进行下一次数据转换，否则会数据累加，导致出错</p></li></ul><h2 id="二、UNSUBSCRIBE（取消订阅）报文"><a href="#二、UNSUBSCRIBE（取消订阅）报文" class="headerlink" title="二、UNSUBSCRIBE（取消订阅）报文"></a>二、UNSUBSCRIBE（取消订阅）报文</h2><p>UNSUBSCRIBE（取消订阅）报文如其名字所示，就是取消已订阅的Topic，客户端发送 UNSUBSCRIBE 报文给服务端， 取消订阅主题。UNSUBSCRIBE 报文由固定报头、可变报头、有限负载组成</p><h3 id="1-固定报头"><a href="#1-固定报头" class="headerlink" title="1.固定报头"></a>1.固定报头</h3><p>MQTT协议的 UNSUBSCRIBE 报文的固定报头数据如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121193716.png" alt=""></p><p>由于UNSUBSCRIBE 报文固定报头的第 3,2,1,0 位是保留位， 必须分别设置为 0,0,1,0。 服务端必须将其它的任<br>何值都当做是不合法的并关闭网络连接，剩余长度的值暂定为：XX</p><p>故可看出<strong>MQTT协议的UNSUBSCRIBE 报文固定报头为：A2 XX</strong></p><h3 id="2-可变报头"><a href="#2-可变报头" class="headerlink" title="2.可变报头"></a>2.可变报头</h3><p>MQTT协议的 UNSUBSCRIBE 报文的可变报头数据如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121194019.png" alt=""></p><p>UNSUBSCRIBE 报文的可变报头即为我们要取消的订阅主题的客户端标识符，在上一节中我们设定的SUBSCRIBE报文标识符为11，故此处UNSUBSCRIBE 的可变报头也为11，即<strong>MQTT协议的UNSUBSCRIBE 报文固定报头为：00 0B</strong></p><h3 id="3-有效负载"><a href="#3-有效负载" class="headerlink" title="3.有效负载"></a>3.有效负载</h3><p>MQTT协议的 UNSUBSCRIBE 报文的有效负载数据如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121195050.png" alt=""></p><p>byte 1、byte 2为有限负载长度，可先假定为：XX XX</p><p>后面的byte 则为我们要取消订阅的Topic, 我们需要取消订阅的Topic为：/sys/a1GOQO9ZBek/191106/thing/service/property/set ，转换成16进制，为：2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 ，故可得出有限负载长度为：50，转换为16进制: 32</p><p>故，*<em>MQTT协议的 UNSUBSCRIBE 报文有效负载为：00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 *</em></p><h3 id="4-UNSUBSCRIBE-报文"><a href="#4-UNSUBSCRIBE-报文" class="headerlink" title="4.UNSUBSCRIBE 报文"></a>4.UNSUBSCRIBE 报文</h3><p>得到可变报头和有效负载即可计算出剩余长度（ 等于可变报头长度 + 有效负载长度 ）的值，为54，转为16进制为：36，则综上所述，可得到构造的*<em>MQTT协议的SUBSCRIBE报文，为：A2 36 00 0B 00 32 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 *</em></p><h2 id="三、UNSUBACK（取消订阅确认）报文"><a href="#三、UNSUBACK（取消订阅确认）报文" class="headerlink" title="三、UNSUBACK（取消订阅确认）报文"></a>三、UNSUBACK（取消订阅确认）报文</h2><p>服务端发送 UNSUBACK 报文给客户端，用于确认收到 UNSUBSCRIBE 报文，UNSUBACK 报文由固定报头、可变报头组成</p><h3 id="1-固定报头-1"><a href="#1-固定报头-1" class="headerlink" title="1.固定报头"></a>1.固定报头</h3><p>MQTT协议的 UNSUBACK 报文的固定报头格式如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121201113.png" alt=""></p><p>故可看出<strong>MQTT协议的UNSUBACK 报文固定报头为：E0 02</strong> </p><h3 id="2-可变报头-1"><a href="#2-可变报头-1" class="headerlink" title="2.可变报头"></a>2.可变报头</h3><p>MQTT协议的 UNSUBACK 报文的可变报头格式如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191114205435.png" alt=""></p><p>UNSUBACK 报文的可变报头即是等待确认取消的 UNSUBACK 报文的报文标识符，也就是我们在 UNSUBSCRIBE 报文可变报头篇章的报文标识符（ 等于 11 的客户端标识符 ），即<strong>MQTT协议的SUBACK 报文可变报头为：00 0B</strong></p><h3 id="4-UNSUBACK-报文"><a href="#4-UNSUBACK-报文" class="headerlink" title="4.UNSUBACK 报文"></a>4.UNSUBACK 报文</h3><p>得到可变报头和有效负载即可计算出剩余长度（ 等于可变报头长度 + 有效负载长度 ）的值等于3，转为16进制为：3，则综上所述，可得到构造的<strong>MQTT协议的UNSUBACK 报文为：B0 02 00 0B</strong></p><h2 id="四、测试报文"><a href="#四、测试报文" class="headerlink" title="四、测试报文"></a>四、测试报文</h2><ul><li><p>网络调试助手中发送 物联网–MQTT协议(四)：构建CONNECT报文构建 中构建好的CONECT报文，可以看到返回：20 02 00 00，说明CONNECT连接被服务端接受，连接上云端设备<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191115124712.png" alt=""></p></li><li><p>网络调试助手中发送 物联网–MQTT协议(七)：构建SUBSCRIBE、SUBACK报文 我们构造的SUBSCRIBE报文，返回的订阅确认报文为 90 03 00 0B 01，订阅Topic成功<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191115133854.png" alt=""></p></li><li><p>网络调试助手中发送我们构造的 UNSUBSCRIBE 报文，成功收到取消订阅确认 UNSUBACK 报文，故可验证报文构造是正确的<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121204740.png" alt=""></p></li><li><p>其实，UNSUBSCRIBE（取消订阅）报文和SUBSCRIBE（订阅主题）报文基本一致，只有固定报头有区别，且SUBSCRIBE 报文有服务等级区分，而 UNSUBSCRIBE 报文，构造报文的时候可以联系起来记忆，把 SUBSCRIBE 报文的固定报头换为UNSUBSCRIBE 报文的固定报头，去掉末尾的 00 ，相对应的可变负载长度减 1，即可得到 UNSUBSCRIBE 报文</p></li></ul><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MQTT协议共14个报文，前面给大家讲解了怎么构建CONNECT、CONNACK、DISCONNECT、PINGREQ、PINGRESP、SUBSCRIBE、SUBACK报文，今天继续给大家讲解构建 UNSUBSCRIBE（取消订阅）及 UNSUBACK（取消订阅确认）报文&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hex文件解析</title>
    <link href="https://nanfeng-iot.cn/2020/05/09/hex%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>https://nanfeng-iot.cn/2020/05/09/hex%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</id>
    <published>2020-05-09T08:57:43.000Z</published>
    <updated>2020-05-09T09:17:38.242Z</updated>
    
    <content type="html"><![CDATA[<p>hex(hexadecimal),十六进制的英文缩写，*.hex为后缀的文件为称之为hex文件，主要用于保存单片机固件，可直接下载到单片机中，故又称为可执行文件</p><a id="more"></a><h2 id="1、-hex文件内容"><a href="#1、-hex文件内容" class="headerlink" title="1、    hex文件内容"></a>1、    hex文件内容</h2><ul><li><p>打开任意一个hex文件，内容如下（为了内容展示方便，已删除中奖部分内容）：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200328154124.png" alt=""></p></li><li><p>整个文件以行为单位，每行以冒号开头，内容全部为16进制码（以ASCII码形式显示）， 2个ASCII码字符表示1个Hex字节。</p></li></ul><h2 id="2、-hex文件解析"><a href="#2、-hex文件解析" class="headerlink" title="2、    hex文件解析"></a>2、    hex文件解析</h2><p> hex文件的内容都是有规律的编码，我们可以对它进行解析，以第一行 :020000040800F2 为例：</p><p>1） 每一行都以 ：（0x3A）开头</p><p>2） 第1个字节0x02 ，表示数据区的字节个数，用ASCII表示就是4个ASCII字符</p><p>3） 第2、3字节0x00, 0x00 ，表示偏移地址或无用填0</p><p>4） 第4个字节0x04， 表示本行记录的数据类型</p><ul><li>‘00’ Data Record                  ：用来记录数据， HEX文件的大部分记录都是数据记录</li><li>‘01’ End of File Record               ：用来标识文件结束，放在文件的最后，标识HEX文件的结尾</li><li>‘02’ Extended Segment Address Record  ：用来标识扩展段地址的记录</li><li>‘03’ Start Segment Address Record     ：段地址 STM32不用</li><li>‘04’ Extended Linear Address Record  ：用来标识扩展线性地址</li><li>‘05’ Start Linear Address Record     ：程序启动运行的地址</li></ul><p>5） 第5、6个字节0x08， 0x00即是数据</p><p>6） 第7个字节0xF2是校验字节，校验和的算法为：计算从0x3A 以后（不包括0x3A）的所有各字节的和模256的余。即各字节二进制算术和，不计超过256的溢出值，然后用0x100减去这个算数累加和，得出得值就是此行得校验和。</p><p>7） 每条数据最后还有&lt;0x0d&gt; （回车键）、 &lt;0x0a&gt;（换行键）</p><p>总结：hex文件的数据行可按如下方式解析：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200328152223.png" alt=""></p><ul><li>注意：由于每行标识数据地址的只有2Byte，所以最大只能到64K，为了可以保存高地址的数据，就有了Extended Linear Address Record。如果这行的数据类型是0x04，那么，这行的数据就是随后数据的基地址。例如：</li></ul><pre><code class="c">:<span class="number">020000040004F</span>6:<span class="number">1000000018F</span>09FE518F09FE518F09FE518F09FE5C0:<span class="number">1000100018F</span>09FE5805F20B9F0FF1FE518F09FE51D</code></pre><ul><li>第一行，是Extended Linear Address Record，里面的数据，也就是基地址是0x0004，</li><li>第二行是Data Record，里面的地址值是0x0000。那么数据18F09FE518F09FE518F09FE518F09FE5要写入FLASH中的地址为 (0x0004 &lt;&lt; 16) | 0x0000，也就是写入FLASH的0x40000这个地址。</li><li>第三行的数据的写入地址为0x40010。当一个HEX文件的数据超过7k的时候，文件中就会出现多个Extended Linear Address Record。</li></ul><h2 id="3、-分析示例："><a href="#3、-分析示例：" class="headerlink" title="3、 分析示例："></a>3、 分析示例：</h2><ul><li><p>:020000040800F2    —–首行给出烧录的目标地址的高16位 : 0x0800</p></li><li><p>:100000003807002029020008B90300086F03000820   —-烧写到0x0800 0000 处的数据</p></li><li><p>:10001000B5030008D10200084706000800000000F0   —-烧写到0x0800 0010 处的数据</p></li><li><p>:040000050800018965    —-05类型的行对于烧写程序无用</p></li><li><p>:00000001FF            —-HEX文件结束行</p></li></ul><blockquote><p>本文参考安富莱STM32开发板软件参考手册，笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hex(hexadecimal),十六进制的英文缩写，*.hex为后缀的文件为称之为hex文件，主要用于保存单片机固件，可直接下载到单片机中，故又称为可执行文件&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>无限扩展定时器MultiTimer移植</title>
    <link href="https://nanfeng-iot.cn/2020/05/05/%E6%97%A0%E9%99%90%E6%89%A9%E5%B1%95%E5%AE%9A%E6%97%B6%E5%99%A8MultiTimer%E7%A7%BB%E6%A4%8D/"/>
    <id>https://nanfeng-iot.cn/2020/05/05/%E6%97%A0%E9%99%90%E6%89%A9%E5%B1%95%E5%AE%9A%E6%97%B6%E5%99%A8MultiTimer%E7%A7%BB%E6%A4%8D/</id>
    <published>2020-05-05T13:43:59.000Z</published>
    <updated>2020-05-09T09:12:55.556Z</updated>
    
    <content type="html"><![CDATA[<p>之前看过几个大佬做的MultiTimer定时器移植到STM32上，可无限扩展定时器任务，简单实用。站在巨人的肩膀上，今天将MultiTimer的移植操作一遍，在此记录记录</p><p>项目移植目的：采用正点原子STM32精英开发板，使用STM32 TIM4定时器扩展出两个定时器，配置两个定时器timer1、timer2，timer1循环1s定时，timer2定时一次2s</p><a id="more"></a><h2 id="1-MultiTimer-简介"><a href="#1-MultiTimer-简介" class="headerlink" title="1 MultiTimer 简介"></a>1 MultiTimer 简介</h2><p>MultiTimer 是一个软件定时器扩展模块，可无限扩展你所需的定时器任务，取代传统的标志位判断方式， 更优雅更便捷地管理程序的时间触发时序。</p><p>MultiTimer是Github一位大佬0xabin的杰作，附上其项目连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/0x1abin/MultiTimer</span></span><br></pre></td></tr></table></figure><h2 id="2-MultiTimer-移植"><a href="#2-MultiTimer-移植" class="headerlink" title="2 MultiTimer 移植"></a>2 MultiTimer 移植</h2><h3 id="2-1-新建工程，并配置TIM3定时器"><a href="#2-1-新建工程，并配置TIM3定时器" class="headerlink" title="2.1 新建工程，并配置TIM3定时器"></a>2.1 新建工程，并配置TIM3定时器</h3><ul><li>用正点原子 STM32精英开发板的第8个例程–定时器中断实验 工程做移植，更改TIM3初始化函数参数，自动重装值arr设置为9，时钟预分频数psc设置为7199，即可得到TM3定时器1ms中断</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM3_Int_Init(<span class="number">9</span>,<span class="number">7199</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2-添加MultiTimer源代码"><a href="#2-2-添加MultiTimer源代码" class="headerlink" title="2.2 添加MultiTimer源代码"></a>2.2 添加MultiTimer源代码</h3><ul><li><p>将下载好的multi_timer文件放入工程的HARDWARE文件夹底下</p></li><li><p>添加multi_timer源文件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504230928.png" alt=""></p></li><li><p>添加multi_timer头文件路径<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504231116.png" alt=""></p></li><li><p>注意：如果在添加MultiTimer源代码后编译，会有如下错误：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504231443.png" alt=""></p><p>这是因为MultiTimer的源文件中没有NULL的宏定义，故会报错，添加头文件 #include &lt;stddef.h&gt;即可消除错误，stddef .h 头文件定义了各种变量类型和宏，其中包含有NULL的宏定义<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504232314.png" alt=""></p></li></ul><h3 id="2-3-配置MultiTimer定时器"><a href="#2-3-配置MultiTimer定时器" class="headerlink" title="2.3 配置MultiTimer定时器"></a>2.3 配置MultiTimer定时器</h3><ul><li>先申请一个定时器管理handle</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Timer</span> <span class="title">timer1</span>;</span></span><br></pre></td></tr></table></figure><ul><li><p>初始化定时器对象，注册定时器回调处理函数，设置定时时间（ms），循环定时触发时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer_init(struct Timer* handle, <span class="keyword">void</span>(*timeout_cb)(), <span class="keyword">uint32_t</span> timeout, <span class="keyword">uint32_t</span> repeat);</span><br></pre></td></tr></table></figure><p>参数说明：</p><p> Timer* handle：确定是操作哪一个定时器</p><p> void(*timeout_cb)()：该定时器的定时回调处理函数</p><p> timeout：定时时间</p><p> repeat：循环定时时间</p></li></ul><ul><li>启动定时器</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer_start(&amp;timer1);</span><br></pre></td></tr></table></figure><ul><li>设置1ms的硬件定时器循环调用 timer_ticks() 以提供时间基准，在定时器3中断服务程序void TIM3_IRQHandler(void)中添加timer_ticks()</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定时器3中断服务程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                                 <span class="comment">//TIM3中断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)    <span class="comment">//检查TIM3更新中断发生与否</span></span><br><span class="line">&#123;</span><br><span class="line">   TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  <span class="comment">//清除TIMx更新中断标志 </span></span><br><span class="line">   timer_ticks();     </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在主循环调用定时器后台处理函数，将主函数中没用到的程序删除，只保留串口和MultiTimer定时器相关，配置两个定时器timer1、timer2，timer1循环1s定时，timer2定时一次2s,修改主函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">115200</span>);                            <span class="comment">//串口初始化为115200</span></span><br><span class="line">TIM3_Int_Init(<span class="number">9</span>,<span class="number">7199</span>);                          <span class="comment">//定时为1ms  </span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"multi timer test...\r\n"</span>);</span><br><span class="line">  </span><br><span class="line">    timer_init(&amp;timer1, timer1_callback, <span class="number">1000</span>, <span class="number">1000</span>); <span class="comment">//1s loop</span></span><br><span class="line">    timer_start(&amp;timer1); </span><br><span class="line"> </span><br><span class="line">    timer_init(&amp;timer2, timer2_callback, <span class="number">2000</span>, <span class="number">0</span>);   <span class="comment">//2s  delay</span></span><br><span class="line">    timer_start(&amp;timer2);</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">timer_loop();   </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置完成MultiTimer定时器</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504235531.png" alt=""></p><h2 id="3-验证MultiTimer定时器"><a href="#3-验证MultiTimer定时器" class="headerlink" title="3 验证MultiTimer定时器"></a>3 验证MultiTimer定时器</h2><ul><li>将配置完成的代码烧写进开发板，在串口调试助手查看串口打印信息</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504235801.png" alt=""></p><p>  由串口打印信息可知，代码运行结果与咱们项目移植的目标一致，timer1循环1s定时，timer2定时一次2s</p><blockquote><p>笔者水平有限，若有错误地方欢迎批评指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力；关注微信公众号，后台回复 MultiTimer 获取MultiTimer源码及移植工程</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109220511.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之旅"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前看过几个大佬做的MultiTimer定时器移植到STM32上，可无限扩展定时器任务，简单实用。站在巨人的肩膀上，今天将MultiTimer的移植操作一遍，在此记录记录&lt;/p&gt;
&lt;p&gt;项目移植目的：采用正点原子STM32精英开发板，使用STM32 TIM4定时器扩展出两个定时器，配置两个定时器timer1、timer2，timer1循环1s定时，timer2定时一次2s&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>搭建博客第一天</title>
    <link href="https://nanfeng-iot.cn/2020/04/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://nanfeng-iot.cn/2020/04/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2020-04-25T04:57:02.000Z</published>
    <updated>2020-05-03T05:20:28.542Z</updated>
    
    <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; color: black; padding: 0 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; margin-top: -10px;"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><strong style="font-weight: bold; color: black;">STM32不仅有产品唯一身份标识寄存器可以读取身份证信息，还可以读取闪存容量寄存器获得芯片的存储容量</strong></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">STM32芯片容量分类</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><a id="more"></a><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">以F103系列为列，共区分为小容量、中容量、大容量三类产品</section></li></ul><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200423214842.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">小容量产品是指闪存存储器容量在16K至32K字节之间的STM32F101xx、 STM32F102xx和STM32F103xx微控制器。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">中容量产品是指闪存存储器容量在64K至128K字节之间的STM32F101xx、 STM32F102xx和STM32F103xx微控制器。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">大容量产品是指闪存存储器容量在256K至512K字节之间的STM32F101xx和STM32F103xx微控制器。</section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">根据名字识别Flash大小</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">在芯片选型的时候，依据STM32官方的芯片命名来确定其Flash容量，已STM32F103C8T6为例，8 即代表芯片的Flash容量为64K,STM32官方的芯片命名通常以第11位做为Flash容量的标识符</section></li></ul><section class="code-snippet__fix code-snippet__js" data-tool="mdnice编辑器" style="font-size: 14px; margin: 10px 0; display: block; color: #333; position: relative; background-color: rgba(0,0,0,0.03); border: 1px solid #f0f0f0; border-radius: 2px; display: flex; line-height: 20px; word-wrap: break-word !important;"><ul class="code-snippet__line-index code-snippet__js" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; counter-reset: line; flex-shrink: 0; height: 100%; padding: 1em; list-style-type: none; padding: 16px; margin: 0;"><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li></ul><pre class="code-snippet__js" data-lang="c" style="margin-bottom: 10px; margin-top: 0px; overflow-x: auto; padding: 16px; padding-left: 0; white-space: normal; flex: 1; -webkit-overflow-scrolling: touch;"><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">4-----------表示flash为16K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">6-----------表示flash为32K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">8-----------表示flash为64K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">B-----------表示flash为128K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">C-----------表示flash为256K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">D-----------表示flash为384K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">E-----------表示flash为512K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">F-----------表示flash为768K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">G-----------表示flash为1M</span></code></pre></section><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">读取闪存容量寄存器</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">在STM32参考手册可查到芯片闪存容量寄存器基地址，通过读取该寄存器，即能得到芯片的Flash容量<img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200421220805.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></section></li></ul><section class="code-snippet__fix code-snippet__js" data-tool="mdnice编辑器" style="font-size: 14px; margin: 10px 0; display: block; color: #333; position: relative; background-color: rgba(0,0,0,0.03); border: 1px solid #f0f0f0; border-radius: 2px; display: flex; line-height: 20px; word-wrap: break-word !important;"><ul class="code-snippet__line-index code-snippet__js" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; counter-reset: line; flex-shrink: 0; height: 100%; padding: 1em; list-style-type: none; padding: 16px; margin: 0;"><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li></ul><pre class="code-snippet__js" data-lang="c" style="margin-bottom: 10px; margin-top: 0px; overflow-x: auto; padding: 16px; padding-left: 0; white-space: normal; flex: 1; -webkit-overflow-scrolling: touch;"><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">//STM32各个系列芯片Flash容量的基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F0_FlashAddr   0x1FFFF7CC   //STM32F0 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F1_FlashAddr   0x1FFFF7E0   //STM32F1 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F2_FlashAddr   0x1FFF7A22   //STM32F2 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F3_FlashAddr   0x1FFFF7CC   //STM32F3 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F4_FlashAddr   0x1FFF7A22   //STM32F4 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F7_FlashAddr   0x1FF0F442   //STM32F7 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32L0_FlashAddr   0x1FF8007C   //STM32L0 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32L1_FlashAddr   0x1FF8004C   //STM32L1 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32L4_FlashAddr   0x1FFF75E0   //STM32L4 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32H7_FlashAddr   0x1FF0F442   //STM32H7 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">  </span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> //获取MCU的Flash容量</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> void GetSTM32_FlashSize(uint32_t STM32XX_FlashAddr)</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> {</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">   uint16_t STM32_FlashSize;</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">   </span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">   STM32_FlashSize=*(uint16_t*)(STM32XX_FlashAddr);    //读取对应芯片闪存容量寄存器，得到Flash大小</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">   printf("芯片的Flash容量为：%d\r\n",STM32_FlashSize);</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> }</span></code></pre></section><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">验证</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">以原子的STM32开发板精英板做实验，精英板STM32芯片为 STM32F103ZET6，第11位为E，Flash大小则应为512K，我们通过读取芯片闪存容量寄存器做验证</section></li></ul><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200423224758.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">读取芯片闪存容量寄存器得到的值为0x0200，转换为10进制即为512，即该芯片的Flash容量为512K</section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">好文分享：</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">物联网--MQTT协议(八)：构建UNSUBSCRIBE、UNSUBACK报文</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">C语言程序设计--实现管理版本信息</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">C语言程序设计--hex文件解析</p><pre style="margin-top: 10px; margin-bottom: 10px;"><code style="display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">                           --完--</code></pre></section></li></ul><blockquote data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">本文参考STM32中文参考手册，若有错误地方欢迎批评指针，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109220511.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之旅" style="display: block; margin: 0 auto; max-width: 100%;"><figcaption style="margin-top: 5px; text-align: center; color: #888; font-size: 14px;">关注南风过境蜻蜓飞，开启物联网、嵌入式学习之旅</figcaption></figure></section>]]></content>
    
    <summary type="html">
    
      &lt;section id=&quot;nice&quot; data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; style=&quot;font-size: 16px; color: black; padding: 0 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &#39;PingFang SC&#39;, Cambria, Cochin, Georgia, Times, &#39;Times New Roman&#39;, serif; margin-top: -10px;&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; style=&quot;font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;&quot;&gt;&lt;strong style=&quot;font-weight: bold; color: black;&quot;&gt;STM32不仅有产品唯一身份标识寄存器可以读取身份证信息，还可以读取闪存容量寄存器获得芯片的存储容量&lt;/strong&gt;&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot; style=&quot;margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;&quot;&gt;&lt;span class=&quot;prefix&quot; style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;content&quot; style=&quot;display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;&quot;&gt;STM32芯片容量分类&lt;/span&gt;&lt;span class=&quot;suffix&quot;&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;&quot;&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot; style=&quot;margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;&quot;&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://nanfeng-iot.cn/2020/04/25/hello-world/"/>
    <id>https://nanfeng-iot.cn/2020/04/25/hello-world/</id>
    <published>2020-04-25T04:26:52.158Z</published>
    <updated>2020-05-03T05:20:28.540Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
