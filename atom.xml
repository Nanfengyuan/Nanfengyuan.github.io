<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nanfeng-IOT</title>
  
  <subtitle>嵌入式领域小码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nanfeng-iot.cn/"/>
  <updated>2020-07-30T14:14:08.554Z</updated>
  <id>https://nanfeng-iot.cn/</id>
  
  <author>
    <name>nan feng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>物联网基础：物联网卡介绍及卡号解码</title>
    <link href="https://nanfeng-iot.cn/2020/07/30/%E7%89%A9%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%89%A9%E8%81%94%E7%BD%91%E5%8D%A1%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%8D%A1%E5%8F%B7%E8%A7%A3%E7%A0%81/"/>
    <id>https://nanfeng-iot.cn/2020/07/30/%E7%89%A9%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%89%A9%E8%81%94%E7%BD%91%E5%8D%A1%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%8D%A1%E5%8F%B7%E8%A7%A3%E7%A0%81/</id>
    <published>2020-07-30T14:14:24.892Z</published>
    <updated>2020-07-30T14:14:08.554Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网卡是由移动通信（移动、电信、联通）运营商提供的针对物联网、特别是M2M领域的SIM卡，满足智能硬件和物联网行业对设备联网的需求</strong></p><a id="more"></a><h2 id="物联网卡介绍"><a href="#物联网卡介绍" class="headerlink" title="物联网卡介绍"></a>物联网卡介绍</h2><h3 id="1-种类"><a href="#1-种类" class="headerlink" title="1. 种类"></a>1. 种类</h3><p>按物理形态分类可分为插拔式MP卡和贴片式MS卡</p><p>MP卡(M2M Plug-In卡)包括普通级MP1卡和工业级MP2卡，根据不同等级采用普通芯片和普通卡基材料，或是采用能够适应特殊环境要求的特殊芯片、特殊卡基材料。外观和管脚定义与普通SIM卡相同。</p><p>MS卡(M2M SMD卡)则直接焊接在M2M模组上，以实现紧密牢固的物理连接和可靠的接口通信，物理特性、电气特性和传输协议方面与普通SIM卡相同，该种卡片在某些物理性能如附着力、抗振等方面更有优越表现。也分为普通级MS0卡和工业级MS1卡。</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720200729220012.jpg" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/0851DC62C1D79E3643E4693980B5C39B.png" alt=""></p><h3 id="2-与普通SIM区别"><a href="#2-与普通SIM区别" class="headerlink" title="2. 与普通SIM区别"></a>2. 与普通SIM区别</h3><ul><li><p>功能区别：常用的插拔式MP物联网卡与普通SIM卡外形完全一样，但他们在功能上有一定的区别，手机SIM卡相比物联网卡多了短信、语音的功能，据说前期物联网卡也能支持短信、语音，且价格便宜，被不法分子用到C端市场，故运营商后来取消了语音功能，短信功能受限</p></li><li><p>购买方式的区别：普通的手机SIM卡可以直接从三大运营商的营业厅可以购买。物联网卡运营商不直接销售，而是有代理商负责销售推广，主要面向企业用户，一般不对普通消费者开放。</p></li><li><p>申请和使用方式的区别：物联网卡一般不针对普通消费者开放，而是以实名方式批量销售给企业用户。同时，物联网卡有专用的APN（服务接入点）区别于普通手机卡。</p></li><li><p>管理方式的区别：普通手机卡充值方便，通过支付宝，微信或者营业厅都可以缴费，叠加流量包，通过客服可以咨询手机资费使用情况。物联网卡则是通过代理商提供的管理平台进行充值，叠加，查看流量使用情况。</p></li><li><p>服务和运营的区别：物联卡相比于普通手机卡的最大区别是国内三大运营商均提供了物联网卡管理平台，给企业用户分配专用帐号或开放API，提供如空中写卡、位置定位、流量管理等服务。</p></li><li><p>物联网卡计费方式灵活，相对手机SIM卡资费也比较便宜，具体资费可上三大运营商官网查看或咨询代理商</p></li><li><p>手机SIM卡可代替物联网卡使用，但物联网卡不能代替手机SIM使用</p></li></ul><h2 id="物联网卡卡号"><a href="#物联网卡卡号" class="headerlink" title="物联网卡卡号"></a>物联网卡卡号</h2><p>物联网卡卡号，即集成电路卡识别码ICID：Integrate circuit card identity ，相当于手机号码的身份证，丝印在物联网卡正面。 ICID为 IC卡的唯一识别号码，共有 20位数字组成，其编码格式为：XXXXX XXXXX XXXXX XXXXX，前六位为运营商代码：中国移动的为：898600，898602，898604，898607 ；中国联通的为：898601、898606、898609，中国电信 898603，898611。三大运营商的具体编码规则不一样，下面将逐一介绍。</p><h3 id="1-中国移动"><a href="#1-中国移动" class="headerlink" title="1. 中国移动"></a>1. 中国移动</h3><p>中国移动编码格式：898600MFSSYYGXXXXXXP</p><ul><li><p>89： 国际编号</p></li><li><p>86： 国家编号，86：中国</p></li><li><p>00： 运营商编号，00：中国移动</p></li><li><p>M： 号段，对应用户号码前3位</p><ul><li><p>0：159 1：158 2：150</p></li><li><p>3：151 4－9：134－139 A：157</p></li><li><p>B：188 C：152 D：147 E：187</p></li></ul></li><li><p>F： 用户号码第 4位</p></li><li><p>SS： 省编号</p><ul><li><p>北京：01 天津：02 河北：03 山西：04 内蒙古：05 辽宁：06 吉林：07</p></li><li><p>黑龙江：08 上海：09 江苏：10 浙江：11 安徽：12 福建：13 江西：14</p></li><li><p>山东：15 河南：16 湖北：17 湖南：18 广东：19 广西：20 海南：21</p></li><li><p>四川：22 贵州：23 云南：24 西藏：25 陕西：26 甘肃：27 青海：28</p></li><li><p>宁夏：29 新疆：30 重庆：31</p></li></ul></li><li><p>YY： 编制 ICID时年号的后两位，如‘09’代表 2009年</p></li><li><p>G： SIM卡供应商代码</p><ul><li><p>0：雅斯拓 1：GEMPLUS 2：武汉天喻 3：江西捷德 4：珠海东信和平</p></li><li><p>5：大唐微电子通 6：航天九州通 7：北京握奇 8：东方英卡</p></li><li><p>9：北京华虹 A ：上海柯斯</p></li></ul></li><li><p>X…X： 用户识别码</p></li><li><p>P： 校验位</p></li></ul><h3 id="2-中国联通"><a href="#2-中国联通" class="headerlink" title="2. 中国联通"></a>2. 中国联通</h3><p>中国联通编码格式：898601YY8SSXXXXXXXXP</p><ul><li><p>89： 国际编号</p></li><li><p>86： 国家编号，86：中国</p></li><li><p>01： 运营商编号，01：中国联通</p></li><li><p>YY： 编制 ICID时年号的后两位</p></li><li><p>8： 中国联通 ICID默认此为为 8</p></li><li><p>SS：2位省份编码</p><ul><li><p>10：内蒙古 11：北京 13：天津 17：山东 18：河北 19：山西 30：安徽 31：上海 34：江苏</p></li><li><p>36：浙江 38：福建 50：海南 51：广东 59：广西 70：青海 71：湖北 74：湖南 75：江西</p></li><li><p>76：河南 79：西藏 81：四川 83：重庆 84：陕西 85：贵州 86：云南 87：甘肃 88：宁夏</p></li><li><p>89：新疆 90：吉林 91：辽宁 97：黑龙江</p></li></ul></li><li><p>X…X： 卡商生产的顺序编码</p></li><li><p>P： 校验位</p></li></ul><h3 id="3-中国电信"><a href="#3-中国电信" class="headerlink" title="3. 中国电信"></a>3. 中国电信</h3><p>中国电信编码格式：898603YYXMHHHXXXXXXP</p><ul><li><p>89：国际编号</p></li><li><p>86：国家编号，86：中国</p></li><li><p>03：运营商编号，03：中国电信</p></li><li><p>YY：编制 ICID时的年号（取后两位），如‘09’代表 2009年</p></li><li><p>M ：保留位，固定为 0</p></li><li><p>HHH：本地网地区代码，位数不够前补零。如上海区号为 021，则 HHH为＇021’；长沙区号为 0731，则 HHH为‘731’，测试卡代码为 001</p></li><li><p>XXXXXXP：7位流水号，建议前 2位作为批次号</p></li></ul><h2 id="机卡分离问题"><a href="#机卡分离问题" class="headerlink" title="机卡分离问题"></a>机卡分离问题</h2><p>根据工业和信息化部的要求，使用物联网卡的硬件设备必需对物联网卡进行绑定处理。当物联网卡第一次接入设备时，设备与物联网卡即进行绑定操作</p><p>物联网卡被绑定之后，若更换硬件设备，则物联网卡就会处于机卡分离状态，相当于被锁定，不能正常使用</p><p>若物联网卡处于机卡分离状态，但想给其他硬件设备使用，则可联系物联网卡代理商给物联网卡重新绑定所要使用的硬件设备（一般使用硬件设备的IMEI跟物联网卡的ICID进行绑定）</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>本文系网络收集整理，笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网卡是由移动通信（移动、电信、联通）运营商提供的针对物联网、特别是M2M领域的SIM卡，满足智能硬件和物联网行业对设备联网的需求&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>物联网-MQTT协议第十讲：构建PUBACK报文</title>
    <link href="https://nanfeng-iot.cn/2020/07/23/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E5%8D%81%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAPUBACK%E6%8A%A5%E6%96%87/"/>
    <id>https://nanfeng-iot.cn/2020/07/23/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E5%8D%81%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAPUBACK%E6%8A%A5%E6%96%87/</id>
    <published>2020-07-23T14:49:15.138Z</published>
    <updated>2020-07-23T14:48:49.566Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网–MQTT协议（十）讲：构建PUBACK报文</strong></p><p>了解MQTT协议底层报文构成，手把手带你构建PUBACK报文</p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-阿里云创建设备"><a href="#1-阿里云创建设备" class="headerlink" title="1.阿里云创建设备"></a>1.阿里云创建设备</h3><p>已在阿里云上创建了一个设备，设备三元组为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"ProductKey"</span>: <span class="string">"a1GOQO9ZBek"</span>,</span><br><span class="line">   <span class="string">"DeviceName"</span>: <span class="string">"191106"</span>,</span><br><span class="line">   <span class="string">"DeviceSecret"</span>: <span class="string">"wWo0xItypjQzrJQFlLpiITBjOGJhSLWE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-网络调试助手的使用"><a href="#2-网络调试助手的使用" class="headerlink" title="2.网络调试助手的使用"></a>2.网络调试助手的使用</h3><p>MQTT协议的所有报文均是16进制表示，故需要进制转换，进制转换工具可以直接使用网络调试助手，即可转换为16进制，并得到转换数据的大小，操作如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221708.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221925.png" alt=""></p><ul><li><p>输入需要转换的数据时，结束的地方不能多有空格，否则转换过后的数据也会包含空格，导致出错</p></li><li><p>发送完成一次数据之后记得复位计数（右下角），且把按十六进制发送的√取消掉再进行下一次数据转换，否则会数据累加，导致出错</p></li></ul><h2 id="二、PUBACK-（发布收到）报文"><a href="#二、PUBACK-（发布收到）报文" class="headerlink" title="二、PUBACK （发布收到）报文"></a>二、PUBACK （发布收到）报文</h2><p>PUBACK 报文是对 QoS 1 等级的 PUBLISH 报文的响应，即只有当PUBLISH发布QoS 1 等级的消息时，服务器才会发出对应的响应报文</p><h3 id="1-固定报头"><a href="#1-固定报头" class="headerlink" title="1.固定报头"></a>1.固定报头</h3><p>根据MQTT协议手册说明，MQTT协议的 PUBACK 报文的固定报头数据如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200723212811.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200723212841.png" alt=""></p><p>故<strong>MQTT协议的 PUBACK 报文的固定报头为：40 02</strong></p><h3 id="2-可变报头"><a href="#2-可变报头" class="headerlink" title="2.可变报头"></a>2.可变报头</h3><p>根据MQTT协议手册说明，MQTT协议的 PUBACK 报文的可变报头如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200723213944.png" alt=""></p><p>MQTT协议的 PUBACK 报文的可变报头为包含等待确认的 PUBLISH 报文的报文标识符，PUBLISH 报文的报文标识符即类似我们的身份证一样，如其名字一样，起到标识的作用，我们可以自定义PUBLISH 报文的报文标识符</p><h3 id="2-有效载荷"><a href="#2-有效载荷" class="headerlink" title="2.有效载荷"></a>2.有效载荷</h3><p>根据MQTT协议手册说明，PUBACK 报文没有有效载荷</p><h2 id="四、测试报文"><a href="#四、测试报文" class="headerlink" title="四、测试报文"></a>四、测试报文</h2><h3 id="1-构建QoS-1的PUBLISH-报文"><a href="#1-构建QoS-1的PUBLISH-报文" class="headerlink" title="1.构建QoS 1的PUBLISH 报文"></a>1.构建QoS 1的PUBLISH 报文</h3><p>PUBACK 报文是对 QoS 1 等级的 PUBLISH 报文的响应，故需要构造一个QoS 1 等级的 PUBLISH 报文，有构造QoS 0的PUBLISH 报文基础，在构建好的报文基础上，做简单修改即可得到QoS 1的PUBLISH 报文</p><p>在 物联网–MQTT协议（九）：构建PUBLISH报文 中构建的QoS 0的PUBLISH 报文为：30 8F 01 00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</p><p>根据MQTT协议手册，从QoS 0的PUBLISH 报文变更为QoS 1的PUBLISH 报文只需更改三个地方</p><ul><li><p>QoS 1的PUBLISH 报文固定报头为 32，将QoS 0的PUBLISH 报文中的首字节30改为32</p></li><li><p>QoS 1的PUBLISH 报文相比QoS 0的PUBLISH 报文在主题名之后增加了报文标识符，报文标识符占2个字节，假定该条报文的报文标识符为 00 01（注意：虽然可变报头添加了2个字节的报文标识符，但可变报头的长度不用更改，即此处报文标识符不计算入可变报头的字段大小）</p></li><li><p>重新计算剩余长度，由于添加了2个字节的报文标识符，故QoS 1的PUBLISH 报文相比QoS 0的PUBLISH 报文剩余长度多了2个字节，所以剩余长度由由8F 01变为91 01</p></li></ul><p>通过上面三步，得到<strong>QoS 1的PUBLISH 报文：32 91 01 00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 00 01 7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</strong></p><h3 id="2-测试PUBACK报文"><a href="#2-测试PUBACK报文" class="headerlink" title="2.测试PUBACK报文"></a>2.测试PUBACK报文</h3><p>使用网络调试助手，发送CONNECT报文，再发送构建的QoS 1的PUBLISH 报文</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200723222420.png" alt=""></p><p>网络调试助手接收到的服务器响应报文：40 02 00 01 ，其中40 02为PUBACK 报文的固定报头，00 01为QoS 1的PUBLISH 报文的报文标识符</p><p>到本节为止，分别介绍了构造CONNECT、CONNACK、DISCONNECT、PINGREQ、PINGRESP、SUBSCRIBE、SUBACK、UNSUBSCRIBE、UNSUBACK、PUBLISH、 PUBACK共11个报文</p><p>剩下的PUBREC（发布收到，QoS 2支持）、PUBREL（发布释放，QoS 2支持）、PUBCOMP（发布完成，QoS 2支持）共3个报文由于阿里云不支持，故不再做介绍，有兴趣可以用其他支持的服务器做测试，相信看完这11个报文的构建过程，对MQTT报文构建的步骤操作也是行云流水了</p><p>本系列MQTT协议解析、报文构造到这就结束了，由于知识量有限，若有错误的地方恳请大家指正，共同进步</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网–MQTT协议（十）讲：构建PUBACK报文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解MQTT协议底层报文构成，手把手带你构建PUBACK报文&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>物联网-MQTT协议第九讲：构建PUBLISH报文</title>
    <link href="https://nanfeng-iot.cn/2020/07/23/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E4%B9%9D%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAPUBLISH%E6%8A%A5%E6%96%87/"/>
    <id>https://nanfeng-iot.cn/2020/07/23/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E4%B9%9D%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAPUBLISH%E6%8A%A5%E6%96%87/</id>
    <published>2020-07-23T13:18:50.409Z</published>
    <updated>2020-07-30T14:14:38.682Z</updated>
    
    <content type="html"><![CDATA[<p>了解MQTT协议底层报文构成，手把手带你构建PUBLISH报文</p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-阿里云创建设备"><a href="#1-阿里云创建设备" class="headerlink" title="1.阿里云创建设备"></a>1.阿里云创建设备</h3><p>已在阿里云上创建了一个设备，设备三元组为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"ProductKey"</span>: <span class="string">"a1GOQO9ZBek"</span>,</span><br><span class="line">   <span class="string">"DeviceName"</span>: <span class="string">"191106"</span>,</span><br><span class="line">   <span class="string">"DeviceSecret"</span>: <span class="string">"wWo0xItypjQzrJQFlLpiITBjOGJhSLWE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-网络调试助手的使用"><a href="#2-网络调试助手的使用" class="headerlink" title="2.网络调试助手的使用"></a>2.网络调试助手的使用</h3><p>MQTT协议的所有报文均是16进制表示，故需要进制转换，进制转换工具可以直接使用网络调试助手，即可转换为16进制，并得到转换数据的大小，操作如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221708.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221925.png" alt=""></p><ul><li><p>输入需要转换的数据时，结束的地方不能多有空格，否则转换过后的数据也会包含空格，导致出错</p></li><li><p>发送完成一次数据之后记得复位计数（右下角），且把按十六进制发送的√取消掉再进行下一次数据转换，否则会数据累加，导致出错</p><h3 id="3-阿里云产品添加功能定义"><a href="#3-阿里云产品添加功能定义" class="headerlink" title="3.阿里云产品添加功能定义"></a>3.阿里云产品添加功能定义</h3></li></ul><p>登录阿里云物联网平台，找到本项目创建的产品，进入产品详情界面</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721222702.png" alt=""></p><p>根据自己需求添加产品功能（此处若我们选择上传当前的室内人数，可自己定义）</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721223025.png" alt=""></p><p>完成之后确认，点击发布上线，即可在页面上看到我们刚添加的产品功能</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721223252.png" alt=""></p><h3 id="4-获取设备的发布主题"><a href="#4-获取设备的发布主题" class="headerlink" title="4.获取设备的发布主题"></a>4.获取设备的发布主题</h3><p>登录阿里云物联网平台，找到本项目创建的产品，进入产品详情界面</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721224018.png" alt=""></p><p>将 /sys/a1GOQO9ZBek/${deviceName}/thing/event/property/post 中的 ${deviceName} 修改为我们本次项目创建的设备，即得到设备的发布主题：/sys/a1GOQO9ZBek/191106/thing/event/property/post</p><h2 id="二、PUBLISH（发布消息）报文"><a href="#二、PUBLISH（发布消息）报文" class="headerlink" title="二、PUBLISH（发布消息）报文"></a>二、PUBLISH（发布消息）报文</h2><p>PUBLISH（发布消息）报文就是指从客户端向服务端或者服务端向客户端传输一个应用消息，PUBLISH 报文由固定报头、可变报头、有限负载组成。本节将在已连接上阿里云的基础上通过PUBLISH发送数据到阿里云。</p><h3 id="1-固定报头"><a href="#1-固定报头" class="headerlink" title="1.固定报头"></a>1.固定报头</h3><p>MQTT协议的 PUBLISH 报文的固定报头数据如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721215210.png" alt=""></p><p>MQTT协议规定，对于 QoS0 的消息， DUP 标志必须设置为 0，此处我们发送的数据为 QoS 0的服务器消息，故QoS及DUP均为0，设置RETAIN（保留标志位）为0，服务端不存储这个消息也不移除或替换任何现存的保留消息，剩余长度的值暂定为：XX</p><p>故<strong>MQTT协议的 PUBLISH 报文固定报头为：30 XX</strong></p><h3 id="2-可变报头"><a href="#2-可变报头" class="headerlink" title="2.可变报头"></a>2.可变报头</h3><p>MQTT协议的 PUBLISH 报文的可变报头按顺序包含主题名和报文标识符</p><p>MQTT协议手册给的一个案例（示例中的主题名为 “a/b”， 长度等于 3， 报文标识符为 “10”）：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721221510.png" alt=""></p><p>主题名（Topic Name） 用于识别有效载荷数据应该被发布到哪一个信息通道，即云端的设备发布主题，根据</p><p>而对于报文标识符，MQTT协议规定，只有当 QoS 等级是 1 或 2 时，报文标识符（Packet Identifier） 字段才能出现在 PUBLISH 报文中，故我们的可变报头中只包含主题名</p><p>设备的发布主题为：/sys/a1GOQO9ZBek/191106/thing/event/property/post，转换为16进制为：2F 73 79 73<br>2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74，长度为49个字节，将49转换为16进制为31</p><p>得到<strong>MQTT协议的 PUBLISH 报文可变报头为：00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74</strong></p><h2 id="3-解析云端下发数据"><a href="#3-解析云端下发数据" class="headerlink" title="3.解析云端下发数据"></a>3.解析云端下发数据</h2><p>MQTT协议的 PUBLISH 报文的有效载荷包含将被发布的应用消息，数据的内容和格式是应用特定的。由于我们不知道阿里云发送数据的具体格式，故我们可以通过参考阿里云下发的数据格式，从而得到发送数据到阿里云的有效载荷格式</p><p>使用网络调试助手，在通过CONNECT报文连接上阿里云之后，用SUBSCRIBE报文订阅服务器的主题topic,就能收到从服务器下发的数据</p><ul><li>CONNECT报文连接上阿里云</li><li>SUBSCRIBE报文订阅服务器主题</li><li>阿里云下发数据</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722222956.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722222459.png" alt=""></p><p>从网络调试助手看到，接收到的服务器下发的数据为：30 90 01 00 32 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 7B 22 6D 65 74 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 36 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</p><ul><li>根据MQTT协议，对这一长串的16进制数进行解析，计算得到长度为147，除去固定报头之后长度大于127，根据MQTT协议的 剩余长度字段大小的表示方法，知道大于长度127的字段用两个字节表示</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722231103.png" alt=""></p><ul><li><p>故该数据的固定报头为：30 90 01</p></li><li><p>00 32 为可变报头的长度，32转换为10进制为50，说明可变报头有50个字节，从00 32开始，取50个字节数据，得到该数据可变报头：2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 7B 22 6D 65 74，通过网络调试助手转换为字符：/sys/a1GOQO9ZBek/191106/thing/service/property/set，即是使用SUBSCRIBE报文订阅的主题</p></li><li><p>除去固定报头，可变报头，剩下部分即为有效载荷：7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 36 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D，通过网络调试助手转换为字符格式：{“mehod”:”thing.service.property.set”,”id”:”85157687”,”params”:{“num”:6},”version”:”1.0.0”}，该字符串即为发送数据到阿里云的有效载荷格式，我们只需要将{“num”:6}里面的标识符和值更换为我们所需要传输的数据</p></li></ul><h3 id="3-有效负载"><a href="#3-有效负载" class="headerlink" title="3.有效负载"></a>3.有效负载</h3><p>MQTT协议的 PUBLISH 报文的有效载荷包含将被发布的应用消息，根据上文，有效载荷的格式为：{“mehod”:”thing.service.property.set”,”id”:”85157687”,”params”:{“num”:6},”version”:”1.0.0”}</p><p>假设我们需要传输的数据标识符为num，值为99，则有效载荷为：{“mehod”:”thing.service.property.set”,”id”:”85157687”,”params”:{“num”:99},”version”:”1.0.0”}</p><p>将有效载荷转换为16进制，即可得到<strong>MQTT协议的 PUBLISH 报文的有效载荷：7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</strong></p><h3 id="4-计算剩余长度"><a href="#4-计算剩余长度" class="headerlink" title="4.计算剩余长度"></a>4.计算剩余长度</h3><p>根据上文，得到构造的PUBLISH 报文：30 XX 00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D （XX表示剩余长度）</p><p>计算XX后面数据的字节大小，共占143个字节，大于128个字节，根据MQTT协议的 剩余长度字段大小的表示方法，应该用两个字节表示剩余长度字段大小，143减128为15，将15转换为16进制为0F（0000 1111）,根据协议规定的剩余长度字段大小表示法，剩余长度的大小为8F 01（1000 1111 0000 0001）</p><p>故完整的<strong>PUBLISH 报文为：30 8F 01 00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</strong></p><h2 id="四、测试报文"><a href="#四、测试报文" class="headerlink" title="四、测试报文"></a>四、测试报文</h2><p>网络调试助手中发送 物联网–MQTT协议(四)：构建CONNECT报文构建 中构建好的CONECT报文，可以看到返回：20 02 00 00，说明CONNECT连接被服务端接受，连接上云端设备，再发送构建好的PUBLISH报文，若TCP Client没有断开连接，则证明构建的报文没有错误</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722233607.png" alt=""></p><p>在阿里云物联网平台设备详情界面能看到网络调试助手发送的数据<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722233924.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解MQTT协议底层报文构成，手把手带你构建PUBLISH报文&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VS-Code终端无法输入问题</title>
    <link href="https://nanfeng-iot.cn/2020/07/08/VS-Code%E7%BB%88%E7%AB%AF%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://nanfeng-iot.cn/2020/07/08/VS-Code%E7%BB%88%E7%AB%AF%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-08T13:50:18.788Z</published>
    <updated>2020-07-08T14:59:57.793Z</updated>
    
    <content type="html"><![CDATA[<p><strong>小技巧解决VS Code终端无法输入的问题</strong></p><a id="more"></a><h2 id="1-问题表述"><a href="#1-问题表述" class="headerlink" title="1 问题表述"></a>1 问题表述</h2><p>刚开始使用VS Code，敲完helloword程序，打开终端，准备输入gcc编译命令，确发现终端不能输入，也为显示路径，如下图所示：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708220914.png" alt=""></p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h2><ul><li>关闭VS Code ,右键单击VS Code 图标，选择属性-&gt;兼容性，取消勾选 已兼容模式运行这个程序</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708221240.png" alt=""></p><ul><li>选择属性-&gt;快捷方式，在目标的框 “ 后面加 –disable-gpu；注意：”与–disable-gpu应该加一个空格，否则会报错</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708221458.png" alt="报错信息"></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708221625.png" alt=""></p><ul><li>再次打开 VS Code ,终端正常，常显示路径且能正常输入</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708221840.png" alt=""></p><h2 id="3-不懂就问"><a href="#3-不懂就问" class="headerlink" title="3 不懂就问"></a>3 不懂就问</h2><p>刚开始遇到问题的时候百度了下，尝试了一些网友的办法，最终使用这个方法最有效，查询了下–disable-gpu是禁用 GPU 硬件加速（禁用 GPU 加速，可以节约显存空间）的意思</p><p>为什么在属性的目标中加入这个指令即可解决vs Code终端无法输入的问题，原理是什么呢，两者之间什么联系，这我也没弄懂，大家有知道的希望留言给我解答解答疑惑</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;小技巧解决VS Code终端无法输入的问题&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EC20连接私有云进行数据收发</title>
    <link href="https://nanfeng-iot.cn/2020/07/04/EC20%E8%BF%9E%E6%8E%A5%E7%A7%81%E6%9C%89%E4%BA%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91/"/>
    <id>https://nanfeng-iot.cn/2020/07/04/EC20%E8%BF%9E%E6%8E%A5%E7%A7%81%E6%9C%89%E4%BA%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91/</id>
    <published>2020-07-04T00:58:21.417Z</published>
    <updated>2020-07-04T02:14:42.292Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网产品框架:传统设备使用通信模组连接云服务器(即上云)做数据收发</strong></p><p>在之前的文章 物联网基础：EC20 连接阿里云进行数据收发 已经介绍过EC20模块并用AT指令测试EC20连接阿里云进行数据收发，本文将使用EC20 封装好的AT指令通过 MQTT 协议连接私有云服务器进行数据</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><p>要连接私有云服务器，需有一个私有云服务器的mqtt客户端账号，笔者就用公司服务器的MQTT测试账号做演示，后续涉及到账号密码相关部分打码，望理解</p><p>服务器地址及mqtt相关信息：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630104047.png" alt=""></p><h3 id="2-MQTT工具连接服务器"><a href="#2-MQTT工具连接服务器" class="headerlink" title="2 MQTT工具连接服务器"></a>2 MQTT工具连接服务器</h3><p>使用MQTT工具 MQTTBox模拟务器，订阅设备的发布主题，即能接收到设备发送到服务器的数据，也能模拟向设备下发数据</p><p>安装MQTTBox，填写服务器及设备MQTT的相关信息即能连接上服务器</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630105538.png" alt=""></p><p>再订阅设备的发布主题，即可接收到设备往服务器发送的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630105920.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630110234.png" alt=""></p><h2 id="3-连接测试"><a href="#3-连接测试" class="headerlink" title="3 连接测试"></a>3 连接测试</h2><p>使用串口调试助手，选择 USB AT Port端口，并对串口调试助手做简单设置</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629144357.png" alt=""></p><h3 id="3-1-AT指令连接云服务器："><a href="#3-1-AT指令连接云服务器：" class="headerlink" title="3.1 AT指令连接云服务器："></a>3.1 AT指令连接云服务器：</h3><p>AT指令连接私有云服务器过程：</p><p>1)AT指令入网、模块测试</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT</td><td align="left">测试指令，若返回OK，则模块可正常通信</td></tr><tr><td align="left">2</td><td align="left">AT+CPIN?</td><td align="left">检查SIM卡是否在位</td></tr><tr><td align="left">3</td><td align="left">AT+CSQ</td><td align="left">查询信号质量</td></tr><tr><td align="left">4</td><td align="left">AT+CREG?</td><td align="left">查询入网状态</td></tr><tr><td align="left">5</td><td align="left">AT+CGATT=1</td><td align="left">激活网络</td></tr><tr><td align="left">6</td><td align="left">AT+CGATT?</td><td align="left">查询激活状态</td></tr><tr><td align="left">7</td><td align="left">AT+CGPADDR</td><td align="left">获取PDP地址</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629165856.png" alt=""></p><p>2）AT指令连接服务器</p><p>注意：测试时需将服务器地址信息及MQTT账号信息替换成自己的账户信息</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTCFG=”recv/mode”,0,0,1</td><td align="left">配置为接收模式</td></tr><tr><td align="left">2</td><td align="left">AT+QMTOPEN=0,”IP”,Port</td><td align="left">连接服务器</td></tr><tr><td align="left">3</td><td align="left">AT+QMTCONN=0,”Clientid”,”Username”,”Password”</td><td align="left">配置MQTT连接</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630111342.png" alt=""></p><h3 id="3-2-发送数据"><a href="#3-2-发送数据" class="headerlink" title="3.2 发送数据"></a>3.2 发送数据</h3><p>AT指令发送数据的过程如下：</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTPUB=0,0,0,0,”PubTopic”</td><td align="left">发布主题消息</td></tr><tr><td align="left">2</td><td align="left">{params:{IndoorTemperature:55,mhumi:55}}</td><td align="left">发送的JSON数据</td></tr><tr><td align="left">3</td><td align="left">0x1a</td><td align="left">数据结束符</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630111646.png" alt=""></p><p>此时，可在MQTTBox数据接收区查看EC20往服务器发送的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630111825.png" alt=""></p><h3 id="3-3-接收数据"><a href="#3-3-接收数据" class="headerlink" title="3.3 接收数据"></a>3.3 接收数据</h3><p>AT指令接收服务器数据指令如下：</p><p>EC20接收服务器下发的数据只需要订阅服务器的发布主题，即设备订阅主题：gt/test/gt_1 即能接收到服务器下发的数据</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTSUB=0,1,”gt/test/gt_1”,0</td><td align="left">订阅服务器发布主题</td></tr></tbody></table><p>使用MQTTBox工具模拟服务器下发数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630112229.png" alt=""></p><p>在本地串口调试助手数据接收区就能收到对应的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630112521.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，点赞、在看也是笔者坚持的动力；扫码关注公众号，后台回复 EC20模块获取EC20全套资料</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网产品框架:传统设备使用通信模组连接云服务器(即上云)做数据收发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在之前的文章 物联网基础：EC20 连接阿里云进行数据收发 已经介绍过EC20模块并用AT指令测试EC20连接阿里云进行数据收发，本文将使用EC20 封装好的AT指令通过 MQTT 协议连接私有云服务器进行数据&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EC20固件升级</title>
    <link href="https://nanfeng-iot.cn/2020/07/04/EC20%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7/"/>
    <id>https://nanfeng-iot.cn/2020/07/04/EC20%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7/</id>
    <published>2020-07-04T00:58:21.401Z</published>
    <updated>2020-07-04T02:14:42.319Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用移远 QFlash_V4.14 工具升级移远 EC20 4G模块固件</strong></p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><h3 id="1-1-EC20-USB驱动安装"><a href="#1-1-EC20-USB驱动安装" class="headerlink" title="1.1 EC20 USB驱动安装"></a>1.1 EC20 USB驱动安装</h3><p>安装过程参考移远官方手册：《Quectel_LTE&amp;5G_Windows_USB_Driver_安装指导_V1.0.pdf》，有详细USB安装指导，该手册及驱动文件可以去移远官方下载或后续在公众号下载</p><p>驱动安装成功后，在电脑的设备管理器界面可以看到三个虚拟串口，如下所示：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200623113903.png" alt=""></p><h3 id="1-2-QFlash-V4-14工具及固件包"><a href="#1-2-QFlash-V4-14工具及固件包" class="headerlink" title="1.2 QFlash_V4.14工具及固件包"></a>1.2 QFlash_V4.14工具及固件包</h3><p>QFlash_V4.14可在移远官网下载，也可后续在公众号下载</p><p>相关版本固件包向移远FAE技术支持工程师咨询索要，这里提供A08、A15版本做测试，后续在公众号下载</p><p>注意：QFlash_V4.14和固件包的路径最好别包含中文</p><h2 id="2-固件升级"><a href="#2-固件升级" class="headerlink" title="2 固件升级"></a>2 固件升级</h2><h3 id="2-1-QFlash-V4-14介绍"><a href="#2-1-QFlash-V4-14介绍" class="headerlink" title="2.1 QFlash_V4.14介绍"></a>2.1 QFlash_V4.14介绍</h3><p>QFlash_V4.14不需要安装，解压即可使用，解压后，有两个文件，一个是QFlash_V4.14，一个是QFlash_V4.14用户手册</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630114621.png" alt=""></p><p>QFlash_V4.14图标</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630114819.png" alt=""></p><p>QFlash_V4.14界面</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630114911.png" alt=""></p><h3 id="2-2-选择固件升级串口"><a href="#2-2-选择固件升级串口" class="headerlink" title="2.2 选择固件升级串口"></a>2.2 选择固件升级串口</h3><p>在EC20 USB驱动安装成功后，会有三个串口，固件升级应选择 USB DM port 这一个串口，我的设备USB DM port为COM9</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630115403.png" alt=""></p><p>使用串口调试助手，发送AT指令：AT+ATI 查看固件版本，固件版本为A08</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630145038.png" alt=""></p><h3 id="2-3-加载固件文件"><a href="#2-3-加载固件文件" class="headerlink" title="2.3 加载固件文件"></a>2.3 加载固件文件</h3><p>以A15固件包为例，将固件包解压，需要升级的固件为固件包的 EC20CEFAGR06A15M4G\update\firehose 目录下 prog_nand_firehose_9x07.mbn 文件</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630115930.png" alt=""></p><h3 id="2-4-升级固件"><a href="#2-4-升级固件" class="headerlink" title="2.4 升级固件"></a>2.4 升级固件</h3><p>波特率选择460800，点击Start开始升级固件</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630134444.png" alt=""></p><p>固件升级过程（随机截取）</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630134540.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630134547.png" alt=""></p><p>固件升级完成</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630134728.png" alt=""></p><p>使用串口调试助手，发送AT指令：AT+ATI 查看固件版本，固件版本已更新为A15</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630135033.png" alt=""></p><h2 id="3-异常问题总结"><a href="#3-异常问题总结" class="headerlink" title="3 异常问题总结"></a>3 异常问题总结</h2><h3 id="3-1-串口选择错误"><a href="#3-1-串口选择错误" class="headerlink" title="3.1 串口选择错误"></a>3.1 串口选择错误</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为串口选择错误，重新选择 USB DM port 做固件升级 </p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630135828.png" alt=""></p><h3 id="3-2-串口被占用"><a href="#3-2-串口被占用" class="headerlink" title="3.2 串口被占用"></a>3.2 串口被占用</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为所选串口被占用，检查将占用该串口的软件关闭</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630140251.png" alt=""></p><h3 id="3-3-波特率不支持"><a href="#3-3-波特率不支持" class="headerlink" title="3.3 波特率不支持"></a>3.3 波特率不支持</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为选择的波特率不支持，重新选择波特率460800</p><p>![](<a href="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14" target="_blank" rel="noopener">https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14</a> 20200630143041.png)</p><h3 id="3-3-固件文件无效"><a href="#3-3-固件文件无效" class="headerlink" title="3.3 固件文件无效"></a>3.3 固件文件无效</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为固件文件无效，重新核对选择固件升级文件</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630141048.png" alt=""></p><h3 id="3-4-电源异常"><a href="#3-4-电源异常" class="headerlink" title="3.4 电源异常"></a>3.4 电源异常</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为电源异常，检查模块供电电源</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630141249.png" alt=""></p><h3 id="3-5-串口连接异常"><a href="#3-5-串口连接异常" class="headerlink" title="3.5 串口连接异常"></a>3.5 串口连接异常</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为串口连接异常，检查模块与电脑之间的串口连接</p><p><img src="https://static01.imgkr.com/temp/e886375f4bc745b7b862295b9073bf08.png" alt=""></p><h3 id="3-6-超时错误"><a href="#3-6-超时错误" class="headerlink" title="3.6 超时错误"></a>3.6 超时错误</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为超时，再次尝试更新固件步骤</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630143354.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，点赞、在看也是笔者坚持的动力；扫码关注公众号，后台回复 EC20固件升级获取本文固件升级资料</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;使用移远 QFlash_V4.14 工具升级移远 EC20 4G模块固件&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EC20连接阿里云进行数据收发</title>
    <link href="https://nanfeng-iot.cn/2020/06/29/EC20%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91/"/>
    <id>https://nanfeng-iot.cn/2020/06/29/EC20%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91/</id>
    <published>2020-06-29T14:45:42.269Z</published>
    <updated>2020-06-29T14:49:08.291Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网产品框架:传统设备使用通信模组连接云服务器(即上云)做数据收发。本文将使用EC20 封装好的AT指令通过 MQTT 协议连接阿里云，简单的介绍下移远4G通信模块 EC20 是如何连接服务器进行数据收发</strong></p><a id="more"></a><h2 id="1-关于EC20模块"><a href="#1-关于EC20模块" class="headerlink" title="1 关于EC20模块"></a>1 关于EC20模块</h2><h3 id="1-1-EC20概述"><a href="#1-1-EC20概述" class="headerlink" title="1.1 EC20概述"></a>1.1 EC20概述</h3><p>EC20 R2.1 是移远通信推出的 LTE Cat 4 无线通信模块，采用 LTE 3GPP Rel.11 技术，支持最大下行速率 150Mbps 和最大上行速率 50Mbps；同时在封装上兼容移远通信 UMTS/HSPA+ UC20 模块以及多网络制式 LTE EC20/EC21/EC25/EG25-G 模块，实现了3G网络与4G网络之间的无缝切换。</p><p>EC20 R2.1 内置多星座高精度定位 GNSS（GPS/GLONASS/BeiDou/Galileo/QZSS）接收机；在简化产品设计的同时，还大大提升了定位速度及精度。</p><p>EC20 R2.1 内置丰富的网络协议，集成多个工业标准接口，并支持多种驱动和软件功能（适用于 Windows 7/8/8.1/10，Linux，Android 等操作系统下的 USB 驱动、eCall* 等），极大地拓展了 EC20 R2.1 在 M2M 领域的应用范围，如 CPE、路由器、数据卡、平板电脑、车载、安防以及工业级 PDA 等。</p><h3 id="1-2-EC20优势"><a href="#1-2-EC20优势" class="headerlink" title="1.2 EC20优势"></a>1.2 EC20优势</h3><ul><li><p>专为 M2M 和 IoT 应用而设计的 LTE Cat 4 无线模块</p></li><li><p>各网络制式的全面覆盖</p></li><li><p>集成多星座 GNSS 接收机，满足不同环境下对快速、精准定位的需求</p></li><li><p>支持 DFOTA、eCall* 和 DTMF 功能</p></li><li><p>MIMO 技术满足无线通信系统对数据速率和连接可靠性的要求</p></li></ul><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h2><h3 id="2-1-EC20-USB驱动安装"><a href="#2-1-EC20-USB驱动安装" class="headerlink" title="2.1 EC20 USB驱动安装"></a>2.1 EC20 USB驱动安装</h3><p>安装过程参考移远官方手册：《Quectel_LTE&amp;5G_Windows_USB_Driver_安装指导_V1.0.pdf》，有详细USB安装指导，该手册及驱动文件可以去移远官方下载或后续在公众号下载</p><p>驱动安装成功后，在电脑的设备管理器界面可以看到三个虚拟串口，如下所示：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200623113903.png" alt=""></p><h3 id="2-2-阿里云创建设备"><a href="#2-2-阿里云创建设备" class="headerlink" title="2.2 阿里云创建设备"></a>2.2 阿里云创建设备</h3><p>登录阿里云物联网平台：<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fiot.console.aliyun.com%2Fquick_start" target="_blank" rel="noopener">https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fiot.console.aliyun.com%2Fquick_start</a></p><p>创建产品，填写产品相关信息:</p><p><img src="https://static01.imgkr.com/temp/b6757daa9e2049bf9e79fd9923929a07.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200623155724.png" alt=""></p><p>产品功能定义<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200628170023.png" alt=""></p><p>再自定义一个标识符用作数据下发，且发布上线：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629183824.png" alt=""></p><p>创建设备：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200628165251.png" alt=""></p><p>得到设备的三元组信息：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200628165607.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">三元组信息：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"ProductKey"</span>: <span class="string">"a1ciEJx0Tqx"</span>,</span><br><span class="line">  <span class="string">"DeviceName"</span>: <span class="string">"test01"</span>,</span><br><span class="line">  <span class="string">"DeviceSecret"</span>: <span class="string">"2a202572cf9ab480ee012ae103cca21d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看设备的Topic信息:<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629143703.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设备Topic：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"发布主题"</span>: <span class="string">"/sys/a1ciEJx0Tqx/test01/thing/event/property/post"</span></span><br><span class="line">  <span class="string">"订阅主题"</span>: <span class="string">"/sys/a1ciEJx0Tqx/test01/thing/service/property/set"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-连接阿里云"><a href="#2-连接阿里云" class="headerlink" title="2 连接阿里云"></a>2 连接阿里云</h2><p>使用串口调试助手，选择 USB AT Port端口，并对串口调试助手做简单设置</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629144357.png" alt=""></p><h3 id="2-1-AT指令连接阿里云："><a href="#2-1-AT指令连接阿里云：" class="headerlink" title="2.1 AT指令连接阿里云："></a>2.1 AT指令连接阿里云：</h3><p>AT指令连接阿里云过程：</p><p>1)AT指令入网、模块测试</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT</td><td align="left">测试指令，若返回OK，则模块可正常通信</td></tr><tr><td align="left">2</td><td align="left">AT+CPIN?</td><td align="left">检查SIM卡是否在位</td></tr><tr><td align="left">3</td><td align="left">AT+CSQ</td><td align="left">查询信号质量</td></tr><tr><td align="left">4</td><td align="left">AT+CREG?</td><td align="left">查询入网状态</td></tr><tr><td align="left">5</td><td align="left">AT+CGATT=1</td><td align="left">激活网络</td></tr><tr><td align="left">6</td><td align="left">AT+CGATT?</td><td align="left">查询激活状态</td></tr><tr><td align="left">7</td><td align="left">AT+CGPADDR</td><td align="left">获取PDP地址</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629165856.png" alt=""></p><p>2）AT指令连接阿里云服务器<br>| 序号   | AT指令 | 指令解析  |<br>| :—– | :– | :—— |<br>| 1 |  AT+QMTCFG=”recv/mode”,0,0,1  | 配置为接收模式 |<br>| 2 |  AT+QMTCFG=”aliauth”,0,”ProductKey”,”DeviceName”,”DeviceSecret”  | 配置阿里云上的设备信息 |<br>| 3|  AT+QMTOPEN=0,”iot-as-mqtt.cn-shanghai.aliyuncs.com”,1883  | 打开一个MQTT客户端网络 |<br>| 4|  AT+QMTCONN=0,”DeviceName”  | 连接MQTT服务器 |</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629170333.png" alt=""></p><p>此时可在阿里云物联网平台看到设备 test01 的状态已由未激活转为在线状态</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629170523.png" alt=""></p><p>注意将AT指令里面的三元组信息替换给自己设备的三元组，AT指令详细的参数解析可参考移远的AT指令手册：《Quectel_EC20_R2.1_AT_Commands_Manual_V1.0.pdf》、《Quectel_EC2x&amp;EG9x&amp;EM05_TCP(IP)_AT_Commands_Manual_V1.0.pdf》、《Quectel_EC20_R2.1_AT_Commands_Manual_V1.0.pdf》，AT指令手册可在移远官方下载，也可在公众号后台回复 EC20模块获取EC20模块全套资料</p><h3 id="2-2-发送数据"><a href="#2-2-发送数据" class="headerlink" title="2.2 发送数据"></a>2.2 发送数据</h3><p>AT指令发送数据的过程如下：</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTPUB=0,0,0,0,”/sys/ProductKey/DeviceName/thing/event/property/post”</td><td align="left">发布主题消息</td></tr><tr><td align="left">2</td><td align="left">{params:{IndoorTemperature:27.5}}</td><td align="left">发送的JSON数据</td></tr><tr><td align="left">3</td><td align="left">1a</td><td align="left">数据结束符，需采用HEX形式发送</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629171306.png" alt=""></p><p>此时，可在阿里云设备详情界面看到我们用EC20发送到阿里云的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629171709.png" alt=""></p><h3 id="2-3-接收数据"><a href="#2-3-接收数据" class="headerlink" title="2.3 接收数据"></a>2.3 接收数据</h3><p>AT指令接收服务器数据指令如下：</p><p>EC20接收服务器下发的数据只需要订阅服务器的发布主题，及设备订阅主题：/sys/a1ciEJx0Tqx/test01/thing/service/property/set 即能接收到服务器下发的数据</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTSUB=0,1,”/sys/ProductKey/DeviceName/thing/service/property/set”,0</td><td align="left">订阅服务器发布主题</td></tr></tbody></table><p>当阿里云在线调试界面下发数据时，在本地串口调试助手数据接收区就能收到服务器下发的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629184243.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629184412.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，点赞、在看也是笔者坚持的动力；扫码关注微信公众号，后台回复 EC20模块获取EC20全套资料</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网产品框架:传统设备使用通信模组连接云服务器(即上云)做数据收发。本文将使用EC20 封装好的AT指令通过 MQTT 协议连接阿里云，简单的介绍下移远4G通信模块 EC20 是如何连接服务器进行数据收发&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Window系统命令行下cd不能切换盘符问题</title>
    <link href="https://nanfeng-iot.cn/2020/06/28/Window%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Bcd%E4%B8%8D%E8%83%BD%E5%88%87%E6%8D%A2%E7%9B%98%E7%AC%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://nanfeng-iot.cn/2020/06/28/Window%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Bcd%E4%B8%8D%E8%83%BD%E5%88%87%E6%8D%A2%E7%9B%98%E7%AC%A6%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-28T14:40:16.000Z</published>
    <updated>2020-06-28T14:42:04.707Z</updated>
    
    <content type="html"><![CDATA[<p><strong>小技巧解决Window系统命令行下 cd 不能切换盘符问题</strong></p><a id="more"></a><h2 id="1-问题表述"><a href="#1-问题表述" class="headerlink" title="1 问题表述"></a>1 问题表述</h2><p>最近在搭建EMQ服务器的时候，发现个问题，就是使用 cd 无法切换盘符，比如我在目录 E:\software 文件下打开命令行窗口，想使用 cd 命令跳到 G:\RT-Thread\at_device-master 目录，输入指令 cd G:\RT-Thread\at_device-master,发现命令行无反应，光标仍旧在原来的位置</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200628211128.png" alt=""></p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h2><p>解决方法：在 cd 和盘符之间加上 /d</p><p>输入指令 cd /d G:\RT-Thread\at_device-master，问题解决</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200628211612.png" alt=""></p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3 注意事项"></a>3 注意事项</h2><p>注意：跳转到不同盘符之间时需要加参数 /d ，但跳转到在当前盘符的子目录则可以不加参数 /d 也能跳转</p><p>比如，从G:\RT-Thread\at_device-master跳转到G:\EMQTTD\emqttd-windows7-v2.3.4：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200628212521.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;小技巧解决Window系统命令行下 cd 不能切换盘符问题&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>DIY济南大学纪念名片</title>
    <link href="https://nanfeng-iot.cn/2020/06/14/DIY%E6%B5%8E%E5%8D%97%E5%A4%A7%E5%AD%A6%E7%BA%AA%E5%BF%B5%E5%90%8D%E7%89%87/"/>
    <id>https://nanfeng-iot.cn/2020/06/14/DIY%E6%B5%8E%E5%8D%97%E5%A4%A7%E5%AD%A6%E7%BA%AA%E5%BF%B5%E5%90%8D%E7%89%87/</id>
    <published>2020-06-14T12:27:46.000Z</published>
    <updated>2020-06-14T13:20:51.779Z</updated>
    
    <content type="html"><![CDATA[<p><strong>济南大学毕业即将两周年，DIY一片NFC济南大学纪念名片，可自动添加联系人、自动连接WIFI等功能，好玩不贵，一片的成本不到5块钱，O(∩_∩)O哈哈~</strong></p><a id="more"></a><h2 id="1-样品展示"><a href="#1-样品展示" class="headerlink" title="1 样品展示"></a>1 样品展示</h2><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/B612Kaji_20200614_094307_467.jpg" alt="正面"></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/B612Kaji_20200614_094338_699.jpg" alt="背面"></p><p>正面主要就是放置济南大学校徽和校训，背面放置一个微积分公式（意思为生活就是不断的学习、进取）及程序员标配的 “hello word” 代码</p><p>也没想到什么更好的素材，就先暂时放这些，有好的素材可以考虑做第二版，大家也可以给我留言提提意见</p><h2 id="2-绘制电路PCB板"><a href="#2-绘制电路PCB板" class="headerlink" title="2 绘制电路PCB板"></a>2 绘制电路PCB板</h2><p>   绘制电路板我用的是国产 立创EDA 绘图软件，立创EDA我认为最好的一点就是不需要自己画封装，省了很多麻烦，而且在立创可以绘图，打板，买元件一条龙服务</p><p>   SchDoc如下：<br>  <img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200614100533.png" alt=""></p><p>   PcbDoc如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614100612.png" alt=""></p><p> 电路板很简单，就一个电阻、一个电容、一个LED灯，再加一个NFC射频卡芯片，五个元件就组成了这块纪念名片</p><p> 绘制完电路板后生成光绘文件，然后在嘉立创投板生产即可，嘉立创打板每个月有两次5元打板且包邮的活动，非常适合个人DIY打板</p><h2 id="3-购买元件及焊接"><a href="#3-购买元件及焊接" class="headerlink" title="3 购买元件及焊接"></a>3 购买元件及焊接</h2><p>板卡上面元件很少，我们所使用的电阻、电容、LED灯均选用0603封装，购买时需留意，本次制作样品我们只需购买47R电阻、220uF电容、贴片06.3 LED灯及NT3H1101W0FHKH射频卡芯片</p><p>这是采购5套的价格，共32.01元，主要是射频卡芯片贵了点：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614101925.png" alt=""></p><p>焊接过程挺考验焊接技术的，我焊接7片，成功了四片（其中还弄坏了一片射频卡芯片，4块多钱就没了，心疼），射频卡芯片封装小，焊接时候得用风枪吹才可以，注意风枪温度和风量</p><h2 id="4-写入标签"><a href="#4-写入标签" class="headerlink" title="4 写入标签"></a>4 写入标签</h2><p>该电子名片不需要编程，只需要用NXP 的管方软件 TagWriter 往射频卡芯片里写入你需要存储的信息即可，该芯片的容量为868个字节，所以最多只能写入868个字节的内容</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200614103138.png" alt="TagWriter"></p><p>TagWriter主页：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614103537.png" alt=""></p><p>可写入射频卡芯片的信息如下所示，可只写入一条，也可写入多条，只要不超过最大容量868字节即可</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614103428.png" alt=""></p><h3 id="4-1-写入个人名片"><a href="#4-1-写入个人名片" class="headerlink" title="4.1 写入个人名片"></a>4.1 写入个人名片</h3><p>具体写入方法可关注我公众号查看推送的视频：电子名片写入信息视频演示，视频相比文字更方便，直观</p><h3 id="4-2-写入WIFI密码"><a href="#4-2-写入WIFI密码" class="headerlink" title="4.2 写入WIFI密码"></a>4.2 写入WIFI密码</h3><p>具体写入方法可关注我公众号查看推送的视频：WIFI连接神器演示，视频相比文字更方便，直观</p><ul><li>要想实现WIFI自动连接，需修改下 TagWriter 里WIFI的默认设置，修改步骤如下：</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614185248.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614185423.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614185512.png" alt=""></p><ul><li>写入WIFI信息时有两个注意点，如下所示：</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614190127.png" alt=""></p><h2 id="5-使用方法"><a href="#5-使用方法" class="headerlink" title="5 使用方法"></a>5 使用方法</h2><p>使用时，只需将带NFC的手机贴着名片，既能自动读取射频卡芯片里的信息，比如添加联系人、连接WIFI、连接Bluetooth等</p><h2 id="6-原理探索"><a href="#6-原理探索" class="headerlink" title="6 原理探索"></a>6 原理探索</h2><h3 id="6-1-NFC技术原理"><a href="#6-1-NFC技术原理" class="headerlink" title="6.1 NFC技术原理"></a>6.1 NFC技术原理</h3><p>支持NFC的设备可以在主动或被动模式下交换数据。在被动模式下，启动NFC通信的设备，也称为NFC发起设备(主设备)，在整个通信过程中提供射频场(RF-field)，。它可以选择106kbps、212kbps或424kbps其中一种传输速度，将数据发送到另一台设备。另一台设备称为NFC目标设备(从设备)，不必产生射频场，而使用负载调制(load modulation)技术，即可以相同的速度将数据传回发起设备。此通信机制与基于ISO14443A、MIFARE和FeliCa的非接触式智能卡兼容，因此，NFC发起设备在被动模式下，可以用相同的连接和初始化过程检测非接触式智能卡或NFC目标设备，并与之建立联系。</p><h3 id="6-2-NFC与蓝牙、红外对比"><a href="#6-2-NFC与蓝牙、红外对比" class="headerlink" title="6.2 NFC与蓝牙、红外对比"></a>6.2 NFC与蓝牙、红外对比</h3><p>和传统的近距通讯相比，近场通讯（NFC）就有天然的安全性，以及连接建立的快速性，具体对比如下表：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614195223.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，关注微信公众号：南风过境蜻蜓飞，后台回复 济南大学纪念名片 获取 电路PCB板源文件及TagWriter安装包</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;济南大学毕业即将两周年，DIY一片NFC济南大学纪念名片，可自动添加联系人、自动连接WIFI等功能，好玩不贵，一片的成本不到5块钱，O(∩_∩)O哈哈~&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【合宙4GCat.1入门教程】--AT指令连接阿里云收发数据&lt;下&gt;</title>
    <link href="https://nanfeng-iot.cn/2020/05/30/%E3%80%90%E5%90%88%E5%AE%994GCat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-AT%E6%8C%87%E4%BB%A4%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE-%E4%B8%8B/"/>
    <id>https://nanfeng-iot.cn/2020/05/30/%E3%80%90%E5%90%88%E5%AE%994GCat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-AT%E6%8C%87%E4%BB%A4%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE-%E4%B8%8B/</id>
    <published>2020-05-30T06:33:25.000Z</published>
    <updated>2020-07-04T02:14:42.327Z</updated>
    
    <content type="html"><![CDATA[<p><strong>通过使用AT指令，快速连接上云服务器进行数据收发，达到给设备联网的效果</strong></p><a id="more"></a><h2 id="1、连接阿里云"><a href="#1、连接阿里云" class="headerlink" title="1、连接阿里云"></a>1、连接阿里云</h2><p>  以下AT指令若有疑问可参考合宙的Luat 4G模块AT命令手册V4.1.6，这里对AT指令不做细致描述</p><ul><li>根据【合宙4G Cat.1入门教程】–Cat.1 AT指令连接阿里云收发数据&lt; 上 &gt; 得到的用户名和密码，分别发送以下AT指令，即可连接到阿里云<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProductKey：a1odIqpc7I7</span><br><span class="line">DeviceName：Air724UG</span><br><span class="line">DeviceSecret：wpnqLvOgVHOdEhqJ4koeVUUXbf6TEH59</span><br><span class="line">用户名（iotId）：ENkAiuMXiIS0nySaKnl6000100</span><br><span class="line">密码（iotToken）：^<span class="number">1</span>^<span class="number">1590679060769</span>^<span class="number">3</span>cebfceab74dfae</span><br></pre></td></tr></table></figure><ul><li>（1）AT+MCONFIG=”DeviceName”,”iotId”,”iotToken”，配置MQTT连接参数</li><li>（2）AT+SSLMIPSTART=”ProductKey.iot-as-mqtt.cn-shanghai.aliyuncs.com”,1883，建立连接</li><li>（3）AT+MCONNECT=1,300，建立会话，当发送（2）的AT指令返回CONNECT OK应立即发送指令建立会话，不然会被服务器踢下线</li><li>以上三个指令（注意：三个指令里面对应的参数需根据自己的项目设备做对应修改）发送完成后，在阿里云平台可以看到我们建立的设备的状态为在线，表示我们已成功使用AT指令将模块连接上阿里云<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530120418.png" alt=""></li><li>发送指令过程<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530121002.png" alt=""></li></ul></li></ul><h2 id="2、订阅主题"><a href="#2、订阅主题" class="headerlink" title="2、订阅主题"></a>2、订阅主题</h2><ul><li><p>在阿里云找到需要订阅的主题，只需订阅云端下发数据的主题即可<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530122801.png" alt=""></p></li><li><p>发送AT指令：AT+MSUB=”/sys/a1odIqpc7I7/Air724UG/thing/service/property/set”,0 ，订阅云端下发数据的主题，订阅成功则返回 SUBACK，注意主题需根据设备情况做修改</p></li><li><p>发送AT指令：AT+MQTTMSGSET=0，设置收到数据时的打印方式<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530123335.png" alt=""></p></li></ul><h2 id="3、收发数据"><a href="#3、收发数据" class="headerlink" title="3、收发数据"></a>3、收发数据</h2><h3 id="3-1-发送数据到阿里云"><a href="#3-1-发送数据到阿里云" class="headerlink" title="3.1 发送数据到阿里云"></a>3.1 发送数据到阿里云</h3><ul><li><p>在 【合宙4G Cat.1入门教程】–Cat.1 AT指令连接阿里云收发数据&lt; 上 &gt;  1.3 产品功能定义中定义了一个标识符为num，下面将会用到<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530123921.png" alt=""></p><ul><li>发送AT指令：AT+MPUB=”/sys/a1odIqpc7I7/Air724UG/thing/event/property/post”,0,0,”{“params”:{“num”:4}}”，注意主题需根据设备情况做修改<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530124914.png" alt=""></li><li>返回OK，即发送数据成功，可在阿里云看到发送的数据信息<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530125505.png" alt=""></li></ul><h3 id="3-2-阿里云下发数据"><a href="#3-2-阿里云下发数据" class="headerlink" title="3.2 阿里云下发数据"></a>3.2 阿里云下发数据</h3><ul><li>在阿里云进入，在线调试，往模块发送数据<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530125505.png" alt=""></li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530130516.png" alt=""></p><ul><li>在串口调试助手里可看到阿里云下发的数据<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530130251.png" alt=""></li></ul></li></ul><h2 id="应用分析"><a href="#应用分析" class="headerlink" title="应用分析"></a>应用分析</h2><ul><li><p>基于模块和云端的上下行数据，即是一个简单的物联网产品框架，给设备联网，能上报数据，能接收数据，这也就是目前火爆的物联网产品的基本定义</p></li><li><p>举个简单例子：将一个温湿度传感器连接到模块，传感器采集到的温湿度数据通过Cat.1模块发送到云端，云端再做数据推送到移动端APP，即可在手机上远程查看温湿度信息</p><blockquote><p>nan-feng知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，扫码关注微信公众号，后台回复 合宙Cat.1 获取Air724UG 4G LTE开发板相关资料包</p></blockquote></li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;通过使用AT指令，快速连接上云服务器进行数据收发，达到给设备联网的效果&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【合宙4GCat.1入门教程】--AT指令连接阿里云收发数据&lt;上&gt;</title>
    <link href="https://nanfeng-iot.cn/2020/05/30/%E3%80%90%E5%90%88%E5%AE%994GCat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-AT%E6%8C%87%E4%BB%A4%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE-%E4%B8%8A/"/>
    <id>https://nanfeng-iot.cn/2020/05/30/%E3%80%90%E5%90%88%E5%AE%994GCat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-AT%E6%8C%87%E4%BB%A4%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE-%E4%B8%8A/</id>
    <published>2020-05-30T06:32:55.000Z</published>
    <updated>2020-05-30T06:38:22.141Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用AT指令，快速连接上云服务器进行数据收发，达到给设备联网的效果</strong></p><a id="more"></a><h2 id="1、阿里云创建设备"><a href="#1、阿里云创建设备" class="headerlink" title="1、阿里云创建设备"></a>1、阿里云创建设备</h2><h3 id="1-1-阿里云创建产品"><a href="#1-1-阿里云创建产品" class="headerlink" title="1.1 阿里云创建产品"></a>1.1 阿里云创建产品</h3><ul><li><p>登录阿里云，支付宝账号或淘宝账号即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阿里云物联网平台地址：https:<span class="comment">//account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fiot.console.aliyun.com%2Fquick_start</span></span><br></pre></td></tr></table></figure></li><li><p>选择设备管理-&gt;产品-&gt;创建产品<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523201149.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523201925.png" alt=""></p></li><li><p>填写相关参数：产品名称自定义，所属品类选择自定义品类，节点类型选择直连设备，联网方式为蜂窝（2G / 3G / 4G / 5G），数据方式为ICA 标准数据格式（Alink JSON），认证方式为设备密钥<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523202609.png" alt=""></p></li><li><p>成功创建设备<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523202735.png" alt=""></p><h3 id="1-2-创建设备"><a href="#1-2-创建设备" class="headerlink" title="1.2 创建设备"></a>1.2 创建设备</h3></li><li><p>在创建好的产品地下添加设备<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523202926.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523203100.png" alt=""></p></li><li><p>DeviceName自定义，不过需要注意的是同一个产品底下不能有相同的DeviceName<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523203433.png" alt=""></p></li><li><p>创建完设备之后，阿里云会自动生成设备三元组，在后续连接阿里云时会使用到<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200524072348.png" alt=""></p></li></ul><h3 id="1-3-产品功能定义"><a href="#1-3-产品功能定义" class="headerlink" title="1.3 产品功能定义"></a>1.3 产品功能定义</h3><ul><li><p>查看创建的产品<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523204133.png" alt=""></p></li><li><p>选择功能定义-&gt;编辑草稿，选择添加标注功能或添加自定义功能皆可，这里我选择添加自定义功能<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523204313.png" alt=""></p></li><li><p>填写相关参数，假如我们想通过4G Cat.1模块往阿里云上发送人数统计的数据<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523205139.png" alt=""></p></li><li><p>发布上线即可<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523205309.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523205406.png" alt=""></p></li></ul><h2 id="2、开发板上云"><a href="#2、开发板上云" class="headerlink" title="2、开发板上云"></a>2、开发板上云</h2><h3 id="2-1-AT指令测试（自适应波特率）"><a href="#2-1-AT指令测试（自适应波特率）" class="headerlink" title="2.1 AT指令测试（自适应波特率）"></a>2.1 AT指令测试（自适应波特率）</h3><ul><li>将配套天线正常连接，且插入4G物联网卡，使用MicroUSB数据线将开发板标号UART的MicroUSB口与电脑连接，开发板开机</li><li>AT指令操作流程参考官方手册：连接阿里云AT流程说明（一机一密认证方案）</li><li>使用串口调试助手，选择开发板所的串口，波特率可为115200（模块自适应波特率），选择加回车换行，往开发板发送字符串“AT”，若返回“OK”,则可继续往下进行，否则检查错误产生原因并解决<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523210941.png" alt=""></li></ul><h3 id="2-2-查看AT固件版本"><a href="#2-2-查看AT固件版本" class="headerlink" title="2.2 查看AT固件版本"></a>2.2 查看AT固件版本</h3><ul><li>串口调试助手发送AT指令“AT+CGMR”，查询AT固件版本，根据官方手册，若版本字符串中小于409，,则该版本不支持阿里云，需要升级固件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523211534.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523211452.png" alt=""></li><li>此处开发板版本字符串为243，小于409，不支持阿里云，故需要我们升级固件</li></ul><h3 id="2-3-固件升级"><a href="#2-3-固件升级" class="headerlink" title="2.3 固件升级"></a>2.3 固件升级</h3><ul><li>使用MicroUSB数据线将开发板标号USB的MicroUSB口与电脑连接，开发板开机</li><li>打开固件下载工具，点击设备操作-&gt;720UX系列Cat1模块固件切换为AT版本</li><li>打开之后，选中USB BOOT下载，点击下载<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523233142.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523233237.png" alt=""><ul><li>按照提示进行操作，按住开发板的U_BOOT，再按下板卡上的重启按钮即开始更新固件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523233512.png" alt=""></li><li>更新固件成功，开发板上蓝色LED灯会常亮<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523233600.png" alt=""></li><li>使用AT指令测试固件是否更新成功，串口调试助手发送AT指令“AT+CGMR”，返回的参数中版本字符串为409，表示固件已成功更新，该固件版本支持阿里云<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523234403.png" alt=""></li></ul></li></ul><h3 id="2-4-激活数据网络"><a href="#2-4-激活数据网络" class="headerlink" title="2.4 激活数据网络"></a>2.4 激活数据网络</h3><ul><li>串口调试助手发送AT指令 AT+CGATT? ，查询是否附着基站网络， 返回+CGATT: 1 表示附着上了 GPRS 数据网络，可以继续往下操作</li><li>发送AT指令 AT+SAPBR=3,1,”CONTYPE”,”GPRS”，设置HTTP功能的承载类型，模块会返回”OK”</li><li>发送AT指令 AT+SAPBR=3,1,”APN”,”CMIOT”，设置pdp承载参数之APN，模块会返回”OK”</li><li>发送AT指令 AT+SAPBR=1,1，激活该承载的GPRS PDP上下文，模块会返回”OK”</li><li>发送AT指令 AT+SAPBR=2,1，查询下承载的状态，模块会返回一串字符串，包含三个参数，第一个参数1表示cid，第二个参数1表示已经连接，第三个参数表示模块获取的IP地址；SAPBR激活成功即第二个参数为1才可继续往下操作<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200527234903.png" alt=""></li></ul><h2 id="3、HTTP鉴权"><a href="#3、HTTP鉴权" class="headerlink" title="3、HTTP鉴权"></a>3、HTTP鉴权</h2><ul><li><p>Air724模块连接阿里云需要认证服务器， 获取到接入服务器的用户名和密码，认证方案采用一机一密</p></li><li><p>AT 交互过程如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528001601.png" alt=""></p></li><li><p>截图第④部的指令“AT+HTTPDATA=98,20000”中98是出现DOWNLOAD之后所发送字符得长度，下面会有讲解怎么计算</p></li><li><p>此过程需要根据自己创建设备时的三元组构建DOWNLOAD之后需要发送的字符串（<strong>注意：发送构建的字符串的时候串口调试助手别加回车换行，即把串口调试助手右下角的加回车换行前的√取消</strong>），构建过程如下：</p></li><li><p>（1）获取设备三元组信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProductKey：a1odIqpc7I7</span><br><span class="line">DeviceName：Air724UG</span><br><span class="line">DeviceSecret：wpnqLvOgVHOdEhqJ4koeVUUXbf6TEH59</span><br></pre></td></tr></table></figure><ul><li>(2)根据合宙官方给的构造字符串格式构造，<strong>建议直接将字符串复制到txt文件里用自己创建得到的设备三元组替换复制的字符串相关部分</strong>。黄色部分为设备ProductKey；绿色部分是设备经 HmacMD5 算法加密过后的哈希值，下面会讲解其如何加密得到；蓝色部分为设备的clientId，与设备DeviceName相同即可；棕色部分为设备的DeviceName<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">productKey=XXXX&amp;sign=XXXX&amp;clientId=XXXX&amp;deviceName=XXXX</span><br></pre></td></tr></table></figure><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528233416.png" alt=""></li></ul></li><li><p>（3）构建sign，即设备经 HmacMD5 算法加密过后的哈希值，HmacMD5算法是通过秘钥给明文加密，可通过加密网站进行加密，这里nan-feng用的加密网站：<a href="http://encode.chahuo.com/。明文构建：蓝色部分为设备的clientId，与设备DeviceName相同即可；棕色部分为设备的DeviceName；黄色部分为设备ProductKey；将自己设备的三元组信息替换相对应部分。秘钥即为设备的DeviceSecret，直接复制粘贴填入即可" target="_blank" rel="noopener">http://encode.chahuo.com/。明文构建：蓝色部分为设备的clientId，与设备DeviceName相同即可；棕色部分为设备的DeviceName；黄色部分为设备ProductKey；将自己设备的三元组信息替换相对应部分。秘钥即为设备的DeviceSecret，直接复制粘贴填入即可</a><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528224336.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">明文：clientIdXXXXdeviceNameXXXXproductKeyXXXX</span><br></pre></td></tr></table></figure><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528233601.png" alt=""></p></li></ul><ul><li><p>将加密得到的哈希值sign带入上面的字符串，得到完整的数据；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串数据：productKey=a1odIqpc7I7&amp;sign=<span class="number">8</span>d2519d724d914ec90c55a82b3de4e10&amp;clientId=Air724UG&amp;deviceName=Air724UG</span><br></pre></td></tr></table></figure></li><li><p>附上我在记事本上做的构建字符串数据（注意数据不要有换行）<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528233916.png" alt=""></p></li><li><p>计算上面构造的字符串数据的长度，将字符串复制到串口调试助手，发送该字符串，即可得到该字符串的长度<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528230159.png" alt=""></p></li><li><p>自此，HTTP鉴权部分完成，截图中第⑤步发送AT指令“AT+HTTPACTION=1”，请求连接，若返回的HTTP状态码为200，则表示鉴权成功，若状态码为200之外的其他值，则查看合宙官方的《Luat 4G模块AT命令手册V4.1.6》，对应AT指令“AT+HTTPACTION=1”介绍有相关的状态码取值说明<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528231323.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528231353.png" alt=""></p></li><li><p>发送AT指令“AT+HTTPREAD”查询 HTTP 服务响应，即可得到经阿里云认证的用户名和密码（此处用户名和密码与上面截图中的不一样，因为nan feng第一次只截图，没保存账号密码，下面这是重新HTTP鉴权得到的用户名和密码）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：ENkAiuMXiIS0nySaKnl6000100</span><br><span class="line">密码：^<span class="number">1</span>^<span class="number">1590679060769</span>^<span class="number">3</span>cebfceab74dfae</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>本文参考合宙官方手册，作为自己备忘所用，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，扫码关注微信公众号，后台回复 合宙Cat.1 获取Air724UG 4G LTE开发板相关资料包</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;使用AT指令，快速连接上云服务器进行数据收发，达到给设备联网的效果&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【合宙4gCat.1入门教程】--初识Cat.1</title>
    <link href="https://nanfeng-iot.cn/2020/05/24/Cat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-%E5%88%9D%E8%AF%86Cat-1/"/>
    <id>https://nanfeng-iot.cn/2020/05/24/Cat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-%E5%88%9D%E8%AF%86Cat-1/</id>
    <published>2020-05-24T14:26:10.000Z</published>
    <updated>2020-05-24T14:30:03.998Z</updated>
    
    <content type="html"><![CDATA[<p>  合宙Cat.1系列模组搭载紫光展锐LTE Cat.1 bis物联网芯片平台——UIS8910DM，该Cat.1系列模组可支持：蓝牙、Wi-Fi定位、VoLTE、模拟语音、TTS、MIPI Camera等多样化功能，满足各类低速率场景需求。</p>  <a id="more"></a><h2 id="1、开箱测评"><a href="#1、开箱测评" class="headerlink" title="1、开箱测评"></a>1、开箱测评</h2><h3 id="1-1-外壳包装"><a href="#1-1-外壳包装" class="headerlink" title="1.1 外壳包装"></a>1.1 外壳包装</h3><p>  <img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523161432.png" alt=""></p><h3 id="1-2-开发板照片"><a href="#1-2-开发板照片" class="headerlink" title="1.2 开发板照片"></a>1.2 开发板照片</h3><ul><li><p>开发板配套一根天线，还需要准备MicroUSB数据线及4G物联网卡才可使用<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523161516.png" alt="开发板套件"></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523161611.png" alt="开发板正面"></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523161652.png" alt="开发板反面"></p></li></ul><h3 id="1-3-资料获取途径"><a href="#1-3-资料获取途径" class="headerlink" title="1.3 资料获取途径"></a>1.3 资料获取途径</h3>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">合宙官网：http:<span class="comment">//www.openluat.com</span></span><br></pre></td></tr></table></figure><p>  <img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523145011.png" alt="合宙官网"></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">合宙论坛：https:<span class="comment">//ask.openluat.com</span></span><br></pre></td></tr></table></figure><p>  <img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523145159.png" alt="合宙论坛"></p><h2 id="2、开发板概览"><a href="#2、开发板概览" class="headerlink" title="2、开发板概览"></a>2、开发板概览</h2><h3 id="2-1-电源"><a href="#2-1-电源" class="headerlink" title="2.1 电源"></a>2.1 电源</h3><ul><li>Air724UG 4G LTE开发板可选择用MicroUSB供电，以及用4V电源供电，4V电源排针没有焊上，需要的话自己焊上即可</li><li>4V–电源正极，与Air724UG模块VBAT_MODULE供电相连；GND–电源负极，与USB GND 相连</li><li>两个MicroUSB接口可同时供电，提高对开发板的供电能力</li><li>接上电源，长按开机按键3秒，可看到PER LED灯常亮，即表示开发板已经正常启动，</li><li>若把开发板开机按键边上的两个半泪滴pad（R49）短接，则开发板即可上电启动，不需要再按开机键</li></ul><h3 id="2-2-USB接口"><a href="#2-2-USB接口" class="headerlink" title="2.2 USB接口"></a>2.2 USB接口</h3><ul><li>Air724UG 4G LTE开发板提供了两个MicroUSB接口，，分别标号USB、UART</li><li>标号USB的MicroUSB接口和Air724UG的USB_DM、USB_DP相连，安装驱动后，可以被映射成三个虚拟串口和一个NDiS标准网卡（注意：）</li><li>标号UART的MicroUSB接口通过CH330N和Air724UG的 UART1/UART2相连，并通过一个拨动开关来选择</li><li>如果采用Lua开发，USB应该插到标号USB的插口；如果采用AT开发，USB应该插到标号UART的接口<h3 id="2-3-SIM卡接口"><a href="#2-3-SIM卡接口" class="headerlink" title="2.3 SIM卡接口"></a>2.3 SIM卡接口</h3></li><li>Air724UG 4G LTE开发板提供了两个SIM接口，需接入物联网卡方可正常使用<h3 id="2-4-其余接口"><a href="#2-4-其余接口" class="headerlink" title="2.4 其余接口"></a>2.4 其余接口</h3></li><li>Air724共有GPIO接口31个，最大输出电流约2mA；通用串口3个，SPI显示屏接口1个，IIC接口1个，相机接口1个，具体接口可查看开发板原理图或开发板，开发板上引出的接口均有详细标注</li></ul><h2 id="3、安装驱动"><a href="#3、安装驱动" class="headerlink" title="3、安装驱动"></a>3、安装驱动</h2><ul><li><p>从官网下载Air724UG 驱动文件，解压，得到如下文件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523152627.png" alt=""></p></li><li><p>根据自己电脑，选择合适的驱动进行安装，我自己的电脑操作系统是Win 10 64位的，故选择DriversForWin10文件夹底下的64位驱动文件，双击改该文件即可开始安装</p></li><li><p>点击下一步，默认安装即可<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523152931.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523153119.png" alt=""></p></li><li><p>安装完成后，将开发板标号USB的MicroUSB接口与电脑连接，启动开发板，即能在电脑的设备管理器界面看到开发板的三个虚拟串口</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523153314.png" alt=""></p></li><li><p>安装驱动后如果不使用开发板网卡上网，为了节省流量，应该禁用开发板自带的Rndis网卡</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523154424.png" alt=""></p></li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/d3c1cb63-1e3c-4df6-9244-26a40dbbd94d.png" alt=""></p><h2 id="4、安装软件开发环境"><a href="#4、安装软件开发环境" class="headerlink" title="4、安装软件开发环境"></a>4、安装软件开发环境</h2><ul><li><p>官网下载固件烧写工具Luatools_v2，双击该文件即可使用<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523154835.png" alt="Luatools_v2"></p></li><li><p>Luatools_v2界面如下所示<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200523160343.png" alt=""></p></li></ul><blockquote><p>本文参考合宙官方开发板使用手册，做为自己备忘所用，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，后台回复 合宙Cat.1 获取Air724UG 4G LTE开发板相关资料包</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  合宙Cat.1系列模组搭载紫光展锐LTE Cat.1 bis物联网芯片平台——UIS8910DM，该Cat.1系列模组可支持：蓝牙、Wi-Fi定位、VoLTE、模拟语音、TTS、MIPI Camera等多样化功能，满足各类低速率场景需求。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>STM32笔记--使用ST-Link下载hex文件</title>
    <link href="https://nanfeng-iot.cn/2020/05/09/STM32%E7%AC%94%E8%AE%B0-%E4%BD%BF%E7%94%A8ST-Link%E4%B8%8B%E8%BD%BDhex%E6%96%87%E4%BB%B6/"/>
    <id>https://nanfeng-iot.cn/2020/05/09/STM32%E7%AC%94%E8%AE%B0-%E4%BD%BF%E7%94%A8ST-Link%E4%B8%8B%E8%BD%BDhex%E6%96%87%E4%BB%B6/</id>
    <published>2020-05-09T13:47:31.000Z</published>
    <updated>2020-05-09T13:50:01.339Z</updated>
    
    <content type="html"><![CDATA[<p><strong>嵌入式产品开发过程中，日常使用ST-Link下载程序时都是在MDK编译器中下载源代码，但ST-Link其实也可以直接下载hex文件，STM32官方就有提供一个ST-Link下载程序的工具STM32 ST-LINK Utility，只需三步，就能将hex文件下载到单片机中，相比使用串口下载hex文件繁琐的步骤操作，真香</strong></p><a id="more"></a><h2 id="1-ST-LINK-Utility下载安装"><a href="#1-ST-LINK-Utility下载安装" class="headerlink" title="1 ST-LINK Utility下载安装"></a>1 ST-LINK Utility下载安装</h2><h3 id="1-1-下载ST-LINK-Utility"><a href="#1-1-下载ST-LINK-Utility" class="headerlink" title="1.1 下载ST-LINK Utility"></a>1.1 下载ST-LINK Utility</h3><ul><li>ST-LINK Utility是意法半导体提供的开源工具，直接在意法半导体官网即可下载 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载链接：https:<span class="comment">//www.st.com/en/development-tools/stsw-link004.html</span></span><br></pre></td></tr></table></figure></li><li>下载界面如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509174219.png" alt=""></li><li>账号密码登录，点击Get Software即可下载ST-LINK Utility安装包</li></ul><h3 id="1-2-ST-LINK-Utility安装"><a href="#1-2-ST-LINK-Utility安装" class="headerlink" title="1.2 ST-LINK Utility安装"></a>1.2 ST-LINK Utility安装</h3><ul><li><p>解压安装包，双击STM32 ST-LINK Utility v4.5.0，打开界面如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509175622.png" alt=""></p></li><li><p>注意软件安装位置，一直next即可</p></li><li><p>安装完成界面<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509175713.png" alt=""></p></li><li><p>安装完成后，桌面会出现 STM32 ST-LINK Utility 的软件图标<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509175736.png" alt=""></p></li></ul><h2 id="2-ST-LINK-Utility的使用"><a href="#2-ST-LINK-Utility的使用" class="headerlink" title="2 ST-LINK Utility的使用"></a>2 ST-LINK Utility的使用</h2><h3 id="2-1-Connect-to-the-target"><a href="#2-1-Connect-to-the-target" class="headerlink" title="2.1 Connect to the target"></a>2.1 Connect to the target</h3><ul><li><p>打开ST-LINK Utility，界面如下所示：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509180727.png" alt=""></p></li><li><p>将ST-Link连接单片机，并将USB口接到电脑的串口，点击Connect to the target按钮图标（注意：电脑需安装有ST-Link驱动，若电脑没安装驱动可阅读下文 3.2 ST-LINK驱动安装进行驱动安装）<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509213023.png" alt=""></p></li><li><p>如果ST-Link连接正确并通电的情况下，就会读出器件的ID号，以及其它一些信息，如下图所示<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509181924.png" alt=""></p></li></ul><h3 id="2-2-Open-file"><a href="#2-2-Open-file" class="headerlink" title="2.2 Open file"></a>2.2 Open file</h3><ul><li><p>点击Open file按钮图标，选择所要下载的hex文件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200509212957.png" alt=""></p></li><li><p>正确的选择hex文件后，会出现以下界面<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509192541.png" alt=""></p></li></ul><h3 id="2-3-Program-Verify"><a href="#2-3-Program-Verify" class="headerlink" title="2.3 Program Verify"></a>2.3 Program Verify</h3><ul><li><p>点击Program Verify按钮图标<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509193429.png" alt=""></p></li><li><p>会弹出一个窗口，这个窗口的配置都不用修改，默认的即可，点击Start即可开始下载程序<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509193634.png" alt=""></p></li><li><p>当日志区域出现 Verification…OK 时即代表hex文件已下载到单片机<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509194135.png" alt=""></p></li></ul><h2 id="3-ST-LINK-Utility资料及ST-LINK驱动"><a href="#3-ST-LINK-Utility资料及ST-LINK驱动" class="headerlink" title="3 ST-LINK Utility资料及ST-LINK驱动"></a>3 ST-LINK Utility资料及ST-LINK驱动</h2><h3 id="3-1-ST-LINK-Utility资料"><a href="#3-1-ST-LINK-Utility资料" class="headerlink" title="3.1 ST-LINK Utility资料"></a>3.1 ST-LINK Utility资料</h3><ul><li><p>在ST-LINK Utility安装路径文件夹底下的Docs文件夹即存放着ST-LINK Utility的用户手册等相关资料<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509195200.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509195352.png" alt=""></p></li><li><p>也可以在ST-LINK Utility界面点击Help按钮，选择相应的文件名，即能直接打开Docs文件夹底下存放的ST-LINK Utility用户手册等相关资料<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509195547.png" alt=""></p></li></ul><h3 id="3-2-ST-LINK驱动安装"><a href="#3-2-ST-LINK驱动安装" class="headerlink" title="3.2 ST-LINK驱动安装"></a>3.2 ST-LINK驱动安装</h3><ul><li><p>在ST-LINK Utility安装路径文件夹底下的ST-LINK_USB_V2_1_Driver文件夹存放ST-LINK驱动<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509195903.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509200019.png" alt=""></p></li><li><p>若电脑没有安装ST-LINK驱动，选择相应的驱动.exe文件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509200221.png" alt=""></p></li><li><p>一直点击下一步即可<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509200246.png" alt=""></p></li><li><p>驱动安装完成<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200509200312.png" alt=""></p></li></ul><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，关注微信公众号：南风过境蜻蜓飞，后台回复 ST-LINK 获取ST-LINK Utility安装包</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109220511.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之旅"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;嵌入式产品开发过程中，日常使用ST-Link下载程序时都是在MDK编译器中下载源代码，但ST-Link其实也可以直接下载hex文件，STM32官方就有提供一个ST-Link下载程序的工具STM32 ST-LINK Utility，只需三步，就能将hex文件下载到单片机中，相比使用串口下载hex文件繁琐的步骤操作，真香&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>物联网--MQTT协议第八讲：构建UNSUBSCRIBE、UNSUBACK报文</title>
    <link href="https://nanfeng-iot.cn/2020/05/09/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E5%85%AB%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAUNSUBSCRIBE%E3%80%81UNSUBACK%E6%8A%A5%E6%96%87/"/>
    <id>https://nanfeng-iot.cn/2020/05/09/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E5%85%AB%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAUNSUBSCRIBE%E3%80%81UNSUBACK%E6%8A%A5%E6%96%87/</id>
    <published>2020-05-09T09:22:10.000Z</published>
    <updated>2020-05-09T09:24:30.866Z</updated>
    
    <content type="html"><![CDATA[<p>MQTT协议共14个报文，前面给大家讲解了怎么构建CONNECT、CONNACK、DISCONNECT、PINGREQ、PINGRESP、SUBSCRIBE、SUBACK报文，今天继续给大家讲解构建 UNSUBSCRIBE（取消订阅）及 UNSUBACK（取消订阅确认）报文</p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-阿里云创建设备"><a href="#1-阿里云创建设备" class="headerlink" title="1.阿里云创建设备"></a>1.阿里云创建设备</h3><p>已在阿里云上创建了一个设备，设备三元组为：<br>  {<br>     “ProductKey”: “a1GOQO9ZBek”,<br>     “DeviceName”: “191106”,<br>     “DeviceSecret”: “wWo0xItypjQzrJQFlLpiITBjOGJhSLWE”<br>  }</p><h3 id="2-网络调试助手的使用"><a href="#2-网络调试助手的使用" class="headerlink" title="2.网络调试助手的使用"></a>2.网络调试助手的使用</h3><p>MQTT协议的所有报文均是16进制表示，故需要进制转换，进制转换工具可以直接使用网络调试助手，即可转换为16进制，并得到转换数据的大小，操作如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221708.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221925.png" alt=""></p><ul><li><p>输入需要转换的数据时，结束的地方不能多有空格，否则转换过后的数据也会包含空格，导致出错</p></li><li><p>发送完成一次数据之后记得复位计数（右下角），且把按十六进制发送的√取消掉再进行下一次数据转换，否则会数据累加，导致出错</p></li></ul><h2 id="二、UNSUBSCRIBE（取消订阅）报文"><a href="#二、UNSUBSCRIBE（取消订阅）报文" class="headerlink" title="二、UNSUBSCRIBE（取消订阅）报文"></a>二、UNSUBSCRIBE（取消订阅）报文</h2><p>UNSUBSCRIBE（取消订阅）报文如其名字所示，就是取消已订阅的Topic，客户端发送 UNSUBSCRIBE 报文给服务端， 取消订阅主题。UNSUBSCRIBE 报文由固定报头、可变报头、有限负载组成</p><h3 id="1-固定报头"><a href="#1-固定报头" class="headerlink" title="1.固定报头"></a>1.固定报头</h3><p>MQTT协议的 UNSUBSCRIBE 报文的固定报头数据如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121193716.png" alt=""></p><p>由于UNSUBSCRIBE 报文固定报头的第 3,2,1,0 位是保留位， 必须分别设置为 0,0,1,0。 服务端必须将其它的任<br>何值都当做是不合法的并关闭网络连接，剩余长度的值暂定为：XX</p><p>故可看出<strong>MQTT协议的UNSUBSCRIBE 报文固定报头为：A2 XX</strong></p><h3 id="2-可变报头"><a href="#2-可变报头" class="headerlink" title="2.可变报头"></a>2.可变报头</h3><p>MQTT协议的 UNSUBSCRIBE 报文的可变报头数据如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121194019.png" alt=""></p><p>UNSUBSCRIBE 报文的可变报头即为我们要取消的订阅主题的客户端标识符，在上一节中我们设定的SUBSCRIBE报文标识符为11，故此处UNSUBSCRIBE 的可变报头也为11，即<strong>MQTT协议的UNSUBSCRIBE 报文固定报头为：00 0B</strong></p><h3 id="3-有效负载"><a href="#3-有效负载" class="headerlink" title="3.有效负载"></a>3.有效负载</h3><p>MQTT协议的 UNSUBSCRIBE 报文的有效负载数据如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121195050.png" alt=""></p><p>byte 1、byte 2为有限负载长度，可先假定为：XX XX</p><p>后面的byte 则为我们要取消订阅的Topic, 我们需要取消订阅的Topic为：/sys/a1GOQO9ZBek/191106/thing/service/property/set ，转换成16进制，为：2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 ，故可得出有限负载长度为：50，转换为16进制: 32</p><p>故，*<em>MQTT协议的 UNSUBSCRIBE 报文有效负载为：00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 *</em></p><h3 id="4-UNSUBSCRIBE-报文"><a href="#4-UNSUBSCRIBE-报文" class="headerlink" title="4.UNSUBSCRIBE 报文"></a>4.UNSUBSCRIBE 报文</h3><p>得到可变报头和有效负载即可计算出剩余长度（ 等于可变报头长度 + 有效负载长度 ）的值，为54，转为16进制为：36，则综上所述，可得到构造的*<em>MQTT协议的SUBSCRIBE报文，为：A2 36 00 0B 00 32 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 *</em></p><h2 id="三、UNSUBACK（取消订阅确认）报文"><a href="#三、UNSUBACK（取消订阅确认）报文" class="headerlink" title="三、UNSUBACK（取消订阅确认）报文"></a>三、UNSUBACK（取消订阅确认）报文</h2><p>服务端发送 UNSUBACK 报文给客户端，用于确认收到 UNSUBSCRIBE 报文，UNSUBACK 报文由固定报头、可变报头组成</p><h3 id="1-固定报头-1"><a href="#1-固定报头-1" class="headerlink" title="1.固定报头"></a>1.固定报头</h3><p>MQTT协议的 UNSUBACK 报文的固定报头格式如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121201113.png" alt=""></p><p>故可看出<strong>MQTT协议的UNSUBACK 报文固定报头为：E0 02</strong> </p><h3 id="2-可变报头-1"><a href="#2-可变报头-1" class="headerlink" title="2.可变报头"></a>2.可变报头</h3><p>MQTT协议的 UNSUBACK 报文的可变报头格式如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191114205435.png" alt=""></p><p>UNSUBACK 报文的可变报头即是等待确认取消的 UNSUBACK 报文的报文标识符，也就是我们在 UNSUBSCRIBE 报文可变报头篇章的报文标识符（ 等于 11 的客户端标识符 ），即<strong>MQTT协议的SUBACK 报文可变报头为：00 0B</strong></p><h3 id="4-UNSUBACK-报文"><a href="#4-UNSUBACK-报文" class="headerlink" title="4.UNSUBACK 报文"></a>4.UNSUBACK 报文</h3><p>得到可变报头和有效负载即可计算出剩余长度（ 等于可变报头长度 + 有效负载长度 ）的值等于3，转为16进制为：3，则综上所述，可得到构造的<strong>MQTT协议的UNSUBACK 报文为：B0 02 00 0B</strong></p><h2 id="四、测试报文"><a href="#四、测试报文" class="headerlink" title="四、测试报文"></a>四、测试报文</h2><ul><li><p>网络调试助手中发送 物联网–MQTT协议(四)：构建CONNECT报文构建 中构建好的CONECT报文，可以看到返回：20 02 00 00，说明CONNECT连接被服务端接受，连接上云端设备<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191115124712.png" alt=""></p></li><li><p>网络调试助手中发送 物联网–MQTT协议(七)：构建SUBSCRIBE、SUBACK报文 我们构造的SUBSCRIBE报文，返回的订阅确认报文为 90 03 00 0B 01，订阅Topic成功<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191115133854.png" alt=""></p></li><li><p>网络调试助手中发送我们构造的 UNSUBSCRIBE 报文，成功收到取消订阅确认 UNSUBACK 报文，故可验证报文构造是正确的<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020191121204740.png" alt=""></p></li><li><p>其实，UNSUBSCRIBE（取消订阅）报文和SUBSCRIBE（订阅主题）报文基本一致，只有固定报头有区别，且SUBSCRIBE 报文有服务等级区分，而 UNSUBSCRIBE 报文，构造报文的时候可以联系起来记忆，把 SUBSCRIBE 报文的固定报头换为UNSUBSCRIBE 报文的固定报头，去掉末尾的 00 ，相对应的可变负载长度减 1，即可得到 UNSUBSCRIBE 报文</p></li></ul><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MQTT协议共14个报文，前面给大家讲解了怎么构建CONNECT、CONNACK、DISCONNECT、PINGREQ、PINGRESP、SUBSCRIBE、SUBACK报文，今天继续给大家讲解构建 UNSUBSCRIBE（取消订阅）及 UNSUBACK（取消订阅确认）报文&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hex文件解析</title>
    <link href="https://nanfeng-iot.cn/2020/05/09/hex%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>https://nanfeng-iot.cn/2020/05/09/hex%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</id>
    <published>2020-05-09T08:57:43.000Z</published>
    <updated>2020-05-09T09:17:38.242Z</updated>
    
    <content type="html"><![CDATA[<p>hex(hexadecimal),十六进制的英文缩写，*.hex为后缀的文件为称之为hex文件，主要用于保存单片机固件，可直接下载到单片机中，故又称为可执行文件</p><a id="more"></a><h2 id="1、-hex文件内容"><a href="#1、-hex文件内容" class="headerlink" title="1、    hex文件内容"></a>1、    hex文件内容</h2><ul><li><p>打开任意一个hex文件，内容如下（为了内容展示方便，已删除中奖部分内容）：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200328154124.png" alt=""></p></li><li><p>整个文件以行为单位，每行以冒号开头，内容全部为16进制码（以ASCII码形式显示）， 2个ASCII码字符表示1个Hex字节。</p></li></ul><h2 id="2、-hex文件解析"><a href="#2、-hex文件解析" class="headerlink" title="2、    hex文件解析"></a>2、    hex文件解析</h2><p> hex文件的内容都是有规律的编码，我们可以对它进行解析，以第一行 :020000040800F2 为例：</p><p>1） 每一行都以 ：（0x3A）开头</p><p>2） 第1个字节0x02 ，表示数据区的字节个数，用ASCII表示就是4个ASCII字符</p><p>3） 第2、3字节0x00, 0x00 ，表示偏移地址或无用填0</p><p>4） 第4个字节0x04， 表示本行记录的数据类型</p><ul><li>‘00’ Data Record                  ：用来记录数据， HEX文件的大部分记录都是数据记录</li><li>‘01’ End of File Record               ：用来标识文件结束，放在文件的最后，标识HEX文件的结尾</li><li>‘02’ Extended Segment Address Record  ：用来标识扩展段地址的记录</li><li>‘03’ Start Segment Address Record     ：段地址 STM32不用</li><li>‘04’ Extended Linear Address Record  ：用来标识扩展线性地址</li><li>‘05’ Start Linear Address Record     ：程序启动运行的地址</li></ul><p>5） 第5、6个字节0x08， 0x00即是数据</p><p>6） 第7个字节0xF2是校验字节，校验和的算法为：计算从0x3A 以后（不包括0x3A）的所有各字节的和模256的余。即各字节二进制算术和，不计超过256的溢出值，然后用0x100减去这个算数累加和，得出得值就是此行得校验和。</p><p>7） 每条数据最后还有&lt;0x0d&gt; （回车键）、 &lt;0x0a&gt;（换行键）</p><p>总结：hex文件的数据行可按如下方式解析：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200328152223.png" alt=""></p><ul><li>注意：由于每行标识数据地址的只有2Byte，所以最大只能到64K，为了可以保存高地址的数据，就有了Extended Linear Address Record。如果这行的数据类型是0x04，那么，这行的数据就是随后数据的基地址。例如：</li></ul><pre><code class="c">:<span class="number">020000040004F</span>6:<span class="number">1000000018F</span>09FE518F09FE518F09FE518F09FE5C0:<span class="number">1000100018F</span>09FE5805F20B9F0FF1FE518F09FE51D</code></pre><ul><li>第一行，是Extended Linear Address Record，里面的数据，也就是基地址是0x0004，</li><li>第二行是Data Record，里面的地址值是0x0000。那么数据18F09FE518F09FE518F09FE518F09FE5要写入FLASH中的地址为 (0x0004 &lt;&lt; 16) | 0x0000，也就是写入FLASH的0x40000这个地址。</li><li>第三行的数据的写入地址为0x40010。当一个HEX文件的数据超过7k的时候，文件中就会出现多个Extended Linear Address Record。</li></ul><h2 id="3、-分析示例："><a href="#3、-分析示例：" class="headerlink" title="3、 分析示例："></a>3、 分析示例：</h2><ul><li><p>:020000040800F2    —–首行给出烧录的目标地址的高16位 : 0x0800</p></li><li><p>:100000003807002029020008B90300086F03000820   —-烧写到0x0800 0000 处的数据</p></li><li><p>:10001000B5030008D10200084706000800000000F0   —-烧写到0x0800 0010 处的数据</p></li><li><p>:040000050800018965    —-05类型的行对于烧写程序无用</p></li><li><p>:00000001FF            —-HEX文件结束行</p></li></ul><blockquote><p>本文参考安富莱STM32开发板软件参考手册，笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hex(hexadecimal),十六进制的英文缩写，*.hex为后缀的文件为称之为hex文件，主要用于保存单片机固件，可直接下载到单片机中，故又称为可执行文件&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>无限扩展定时器MultiTimer移植</title>
    <link href="https://nanfeng-iot.cn/2020/05/05/%E6%97%A0%E9%99%90%E6%89%A9%E5%B1%95%E5%AE%9A%E6%97%B6%E5%99%A8MultiTimer%E7%A7%BB%E6%A4%8D/"/>
    <id>https://nanfeng-iot.cn/2020/05/05/%E6%97%A0%E9%99%90%E6%89%A9%E5%B1%95%E5%AE%9A%E6%97%B6%E5%99%A8MultiTimer%E7%A7%BB%E6%A4%8D/</id>
    <published>2020-05-05T13:43:59.000Z</published>
    <updated>2020-05-09T09:12:55.556Z</updated>
    
    <content type="html"><![CDATA[<p>之前看过几个大佬做的MultiTimer定时器移植到STM32上，可无限扩展定时器任务，简单实用。站在巨人的肩膀上，今天将MultiTimer的移植操作一遍，在此记录记录</p><p>项目移植目的：采用正点原子STM32精英开发板，使用STM32 TIM4定时器扩展出两个定时器，配置两个定时器timer1、timer2，timer1循环1s定时，timer2定时一次2s</p><a id="more"></a><h2 id="1-MultiTimer-简介"><a href="#1-MultiTimer-简介" class="headerlink" title="1 MultiTimer 简介"></a>1 MultiTimer 简介</h2><p>MultiTimer 是一个软件定时器扩展模块，可无限扩展你所需的定时器任务，取代传统的标志位判断方式， 更优雅更便捷地管理程序的时间触发时序。</p><p>MultiTimer是Github一位大佬0xabin的杰作，附上其项目连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/0x1abin/MultiTimer</span></span><br></pre></td></tr></table></figure><h2 id="2-MultiTimer-移植"><a href="#2-MultiTimer-移植" class="headerlink" title="2 MultiTimer 移植"></a>2 MultiTimer 移植</h2><h3 id="2-1-新建工程，并配置TIM3定时器"><a href="#2-1-新建工程，并配置TIM3定时器" class="headerlink" title="2.1 新建工程，并配置TIM3定时器"></a>2.1 新建工程，并配置TIM3定时器</h3><ul><li>用正点原子 STM32精英开发板的第8个例程–定时器中断实验 工程做移植，更改TIM3初始化函数参数，自动重装值arr设置为9，时钟预分频数psc设置为7199，即可得到TM3定时器1ms中断</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM3_Int_Init(<span class="number">9</span>,<span class="number">7199</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2-添加MultiTimer源代码"><a href="#2-2-添加MultiTimer源代码" class="headerlink" title="2.2 添加MultiTimer源代码"></a>2.2 添加MultiTimer源代码</h3><ul><li><p>将下载好的multi_timer文件放入工程的HARDWARE文件夹底下</p></li><li><p>添加multi_timer源文件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504230928.png" alt=""></p></li><li><p>添加multi_timer头文件路径<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504231116.png" alt=""></p></li><li><p>注意：如果在添加MultiTimer源代码后编译，会有如下错误：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504231443.png" alt=""></p><p>这是因为MultiTimer的源文件中没有NULL的宏定义，故会报错，添加头文件 #include &lt;stddef.h&gt;即可消除错误，stddef .h 头文件定义了各种变量类型和宏，其中包含有NULL的宏定义<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504232314.png" alt=""></p></li></ul><h3 id="2-3-配置MultiTimer定时器"><a href="#2-3-配置MultiTimer定时器" class="headerlink" title="2.3 配置MultiTimer定时器"></a>2.3 配置MultiTimer定时器</h3><ul><li>先申请一个定时器管理handle</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Timer</span> <span class="title">timer1</span>;</span></span><br></pre></td></tr></table></figure><ul><li><p>初始化定时器对象，注册定时器回调处理函数，设置定时时间（ms），循环定时触发时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer_init(struct Timer* handle, <span class="keyword">void</span>(*timeout_cb)(), <span class="keyword">uint32_t</span> timeout, <span class="keyword">uint32_t</span> repeat);</span><br></pre></td></tr></table></figure><p>参数说明：</p><p> Timer* handle：确定是操作哪一个定时器</p><p> void(*timeout_cb)()：该定时器的定时回调处理函数</p><p> timeout：定时时间</p><p> repeat：循环定时时间</p></li></ul><ul><li>启动定时器</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer_start(&amp;timer1);</span><br></pre></td></tr></table></figure><ul><li>设置1ms的硬件定时器循环调用 timer_ticks() 以提供时间基准，在定时器3中断服务程序void TIM3_IRQHandler(void)中添加timer_ticks()</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定时器3中断服务程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                                 <span class="comment">//TIM3中断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)    <span class="comment">//检查TIM3更新中断发生与否</span></span><br><span class="line">&#123;</span><br><span class="line">   TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  <span class="comment">//清除TIMx更新中断标志 </span></span><br><span class="line">   timer_ticks();     </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在主循环调用定时器后台处理函数，将主函数中没用到的程序删除，只保留串口和MultiTimer定时器相关，配置两个定时器timer1、timer2，timer1循环1s定时，timer2定时一次2s,修改主函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">115200</span>);                            <span class="comment">//串口初始化为115200</span></span><br><span class="line">TIM3_Int_Init(<span class="number">9</span>,<span class="number">7199</span>);                          <span class="comment">//定时为1ms  </span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"multi timer test...\r\n"</span>);</span><br><span class="line">  </span><br><span class="line">    timer_init(&amp;timer1, timer1_callback, <span class="number">1000</span>, <span class="number">1000</span>); <span class="comment">//1s loop</span></span><br><span class="line">    timer_start(&amp;timer1); </span><br><span class="line"> </span><br><span class="line">    timer_init(&amp;timer2, timer2_callback, <span class="number">2000</span>, <span class="number">0</span>);   <span class="comment">//2s  delay</span></span><br><span class="line">    timer_start(&amp;timer2);</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">timer_loop();   </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置完成MultiTimer定时器</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504235531.png" alt=""></p><h2 id="3-验证MultiTimer定时器"><a href="#3-验证MultiTimer定时器" class="headerlink" title="3 验证MultiTimer定时器"></a>3 验证MultiTimer定时器</h2><ul><li>将配置完成的代码烧写进开发板，在串口调试助手查看串口打印信息</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200504235801.png" alt=""></p><p>  由串口打印信息可知，代码运行结果与咱们项目移植的目标一致，timer1循环1s定时，timer2定时一次2s</p><blockquote><p>笔者水平有限，若有错误地方欢迎批评指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力；关注微信公众号，后台回复 MultiTimer 获取MultiTimer源码及移植工程</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109220511.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之旅"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前看过几个大佬做的MultiTimer定时器移植到STM32上，可无限扩展定时器任务，简单实用。站在巨人的肩膀上，今天将MultiTimer的移植操作一遍，在此记录记录&lt;/p&gt;
&lt;p&gt;项目移植目的：采用正点原子STM32精英开发板，使用STM32 TIM4定时器扩展出两个定时器，配置两个定时器timer1、timer2，timer1循环1s定时，timer2定时一次2s&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>搭建博客第一天</title>
    <link href="https://nanfeng-iot.cn/2020/04/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://nanfeng-iot.cn/2020/04/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2020-04-25T04:57:02.000Z</published>
    <updated>2020-07-04T02:14:42.328Z</updated>
    
    <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; color: black; padding: 0 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; margin-top: -10px;"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><strong style="font-weight: bold; color: black;">STM32不仅有产品唯一身份标识寄存器可以读取身份证信息，还可以读取闪存容量寄存器获得芯片的存储容量</strong></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">STM32芯片容量分类</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><a id="more"></a><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">以F103系列为列，共区分为小容量、中容量、大容量三类产品</section></li></ul><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200423214842.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">小容量产品是指闪存存储器容量在16K至32K字节之间的STM32F101xx、 STM32F102xx和STM32F103xx微控制器。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">中容量产品是指闪存存储器容量在64K至128K字节之间的STM32F101xx、 STM32F102xx和STM32F103xx微控制器。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">大容量产品是指闪存存储器容量在256K至512K字节之间的STM32F101xx和STM32F103xx微控制器。</section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">根据名字识别Flash大小</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">在芯片选型的时候，依据STM32官方的芯片命名来确定其Flash容量，已STM32F103C8T6为例，8 即代表芯片的Flash容量为64K,STM32官方的芯片命名通常以第11位做为Flash容量的标识符</section></li></ul><section class="code-snippet__fix code-snippet__js" data-tool="mdnice编辑器" style="font-size: 14px; margin: 10px 0; display: block; color: #333; position: relative; background-color: rgba(0,0,0,0.03); border: 1px solid #f0f0f0; border-radius: 2px; display: flex; line-height: 20px; word-wrap: break-word !important;"><ul class="code-snippet__line-index code-snippet__js" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; counter-reset: line; flex-shrink: 0; height: 100%; padding: 1em; list-style-type: none; padding: 16px; margin: 0;"><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li></ul><pre class="code-snippet__js" data-lang="c" style="margin-bottom: 10px; margin-top: 0px; overflow-x: auto; padding: 16px; padding-left: 0; white-space: normal; flex: 1; -webkit-overflow-scrolling: touch;"><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">4-----------表示flash为16K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">6-----------表示flash为32K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">8-----------表示flash为64K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">B-----------表示flash为128K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">C-----------表示flash为256K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">D-----------表示flash为384K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">E-----------表示flash为512K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">F-----------表示flash为768K</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">G-----------表示flash为1M</span></code></pre></section><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">读取闪存容量寄存器</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">在STM32参考手册可查到芯片闪存容量寄存器基地址，通过读取该寄存器，即能得到芯片的Flash容量<img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200421220805.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></section></li></ul><section class="code-snippet__fix code-snippet__js" data-tool="mdnice编辑器" style="font-size: 14px; margin: 10px 0; display: block; color: #333; position: relative; background-color: rgba(0,0,0,0.03); border: 1px solid #f0f0f0; border-radius: 2px; display: flex; line-height: 20px; word-wrap: break-word !important;"><ul class="code-snippet__line-index code-snippet__js" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; counter-reset: line; flex-shrink: 0; height: 100%; padding: 1em; list-style-type: none; padding: 16px; margin: 0;"><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li><li style="list-style-type: none; text-align: right; line-height: 26px; color: black; margin: 0;"><span style="min-width: 1.5em; text-align: right; left: -2.5em; counter-increment: line; display: inline; color: rgba(0,0,0,0.3);">ounter(line</span></li></ul><pre class="code-snippet__js" data-lang="c" style="margin-bottom: 10px; margin-top: 0px; overflow-x: auto; padding: 16px; padding-left: 0; white-space: normal; flex: 1; -webkit-overflow-scrolling: touch;"><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">//STM32各个系列芯片Flash容量的基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F0_FlashAddr   0x1FFFF7CC   //STM32F0 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F1_FlashAddr   0x1FFFF7E0   //STM32F1 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F2_FlashAddr   0x1FFF7A22   //STM32F2 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F3_FlashAddr   0x1FFFF7CC   //STM32F3 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F4_FlashAddr   0x1FFF7A22   //STM32F4 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32F7_FlashAddr   0x1FF0F442   //STM32F7 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32L0_FlashAddr   0x1FF8007C   //STM32L0 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32L1_FlashAddr   0x1FF8004C   //STM32L1 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32L4_FlashAddr   0x1FFF75E0   //STM32L4 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> #include STM32H7_FlashAddr   0x1FF0F442   //STM32H7 Flash容量基地址</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">  </span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> //获取MCU的Flash容量</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> void GetSTM32_FlashSize(uint32_t STM32XX_FlashAddr)</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> {</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">   uint16_t STM32_FlashSize;</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">   </span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">   STM32_FlashSize=*(uint16_t*)(STM32XX_FlashAddr);    //读取对应芯片闪存容量寄存器，得到Flash大小</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;">   printf("芯片的Flash容量为：%d\r\n",STM32_FlashSize);</span></code><code style="border-radius: 0px; -webkit-overflow-scrolling: touch; text-align: left; font-size: 14px; display: block; white-space: pre; display: flex; position: relative; font-family: Consolas,'Liberation Mono',Menlo,Courier,monospace; padding: 0px;"><span class="code-snippet_outer" style="line-height: 26px;"> }</span></code></pre></section><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">验证</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">以原子的STM32开发板精英板做实验，精英板STM32芯片为 STM32F103ZET6，第11位为E，Flash大小则应为512K，我们通过读取芯片闪存容量寄存器做验证</section></li></ul><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200423224758.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">读取芯片闪存容量寄存器得到的值为0x0200，转换为10进制即为512，即该芯片的Flash容量为512K</section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">好文分享：</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">物联网--MQTT协议(八)：构建UNSUBSCRIBE、UNSUBACK报文</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">C语言程序设计--实现管理版本信息</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">C语言程序设计--hex文件解析</p><pre style="margin-top: 10px; margin-bottom: 10px;"><code style="display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">                           --完--</code></pre></section></li></ul><blockquote data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">本文参考STM32中文参考手册，若有错误地方欢迎批评指针，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109220511.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之旅" style="display: block; margin: 0 auto; max-width: 100%;"><figcaption style="margin-top: 5px; text-align: center; color: #888; font-size: 14px;">关注南风过境蜻蜓飞，开启物联网、嵌入式学习之旅</figcaption></figure></section>]]></content>
    
    <summary type="html">
    
      &lt;section id=&quot;nice&quot; data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; style=&quot;font-size: 16px; color: black; padding: 0 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &#39;PingFang SC&#39;, Cambria, Cochin, Georgia, Times, &#39;Times New Roman&#39;, serif; margin-top: -10px;&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; style=&quot;font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;&quot;&gt;&lt;strong style=&quot;font-weight: bold; color: black;&quot;&gt;STM32不仅有产品唯一身份标识寄存器可以读取身份证信息，还可以读取闪存容量寄存器获得芯片的存储容量&lt;/strong&gt;&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot; style=&quot;margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;&quot;&gt;&lt;span class=&quot;prefix&quot; style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;content&quot; style=&quot;display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;&quot;&gt;STM32芯片容量分类&lt;/span&gt;&lt;span class=&quot;suffix&quot;&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;&quot;&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot; style=&quot;margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;&quot;&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://nanfeng-iot.cn/2020/04/25/hello-world/"/>
    <id>https://nanfeng-iot.cn/2020/04/25/hello-world/</id>
    <published>2020-04-25T04:26:52.158Z</published>
    <updated>2020-05-03T05:20:28.540Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
