<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nanfeng-IOT</title>
  
  <subtitle>嵌入式领域小码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nanfeng-iot.cn/"/>
  <updated>2021-02-01T14:51:02.413Z</updated>
  <id>https://nanfeng-iot.cn/</id>
  
  <author>
    <name>nan feng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【玩转STM32】：低功耗定时器LPTIM应用</title>
    <link href="https://nanfeng-iot.cn/2021/02/01/%E3%80%90%E7%8E%A9%E8%BD%ACSTM32%E3%80%91%EF%BC%9A%E4%BD%8E%E5%8A%9F%E8%80%97%E5%AE%9A%E6%97%B6%E5%99%A8LPTIM%E5%BA%94%E7%94%A8/"/>
    <id>https://nanfeng-iot.cn/2021/02/01/%E3%80%90%E7%8E%A9%E8%BD%ACSTM32%E3%80%91%EF%BC%9A%E4%BD%8E%E5%8A%9F%E8%80%97%E5%AE%9A%E6%97%B6%E5%99%A8LPTIM%E5%BA%94%E7%94%A8/</id>
    <published>2021-02-01T14:50:34.130Z</published>
    <updated>2021-02-01T14:51:02.413Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%20%E5%BC%95%E5%AF%BC%E5%85%B3%E6%B3%A8.gif" alt=""></p><p>目标实现：使用LPTIM1，在低功耗stop模式下定时1s，1s后将STM32从stop模式唤醒，并且点亮LED灯</p><a id="more"></a><h2 id="1-LPTIM-介绍"><a href="#1-LPTIM-介绍" class="headerlink" title="1 LPTIM 介绍"></a>1 LPTIM 介绍</h2><p>LPTIM，顾名思义，即低功耗定时器的意思，与普通定时器的差别是LPTIM在睡眠或者停机模式下依然可以工作（待机模式除外），支持低速时钟 LSI、 LSE 或者外部输入时钟。LPTIM是低功耗产品在低功耗功耗模式下定时的不二之选</p><ul><li><p>支持芯片：并不是STM32的所有芯片都有LPTIM这个外设，，从官方资料可知，支持LPTIM的芯片有：STM32F410、STM32F413/423、STM32F7系列, STM32G0系列, STM32H7系列, STM32L0系列, STM32L4系列, STM32L4+系列, STM32L5系列, STM32WB系列<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/%E6%94%AF%E6%8C%81%E8%8A%AF%E7%89%87.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/%E6%A0%BC%E5%BC%8F.png" alt=""></p></li><li><p>STM32L431芯片手册对LPTIM的介绍</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/11.png" alt=""></p></li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></p><h2 id="2-LPTIM-功能"><a href="#2-LPTIM-功能" class="headerlink" title="2 LPTIM 功能"></a>2 LPTIM 功能</h2><p>LPTIM 低功耗定时器有以下 6 种模式：</p><ul><li>单脉冲模式</li><li>PWM 模式</li><li>单次模式：在此模式下，当满足匹配条件时，输出可以切换高低电平（如果输出极性配置为高，则为低电平至高电平变化，反之亦然）</li><li>编码器模式</li><li>超时模式：有效的边沿触发输入可复位定时器。第一个触发事件将启动计时器，任何连续触发事件将重置计<br>数器并重新开始。</li><li>计数器模式：计数器可用于计算来自 Input1 的外部事件或用于计算内部时钟周期</li></ul><p>主要有以下三个使用场景，本文将介绍LPTIM超时唤醒的应用：</p><ul><li><p>Asynchronous pulse counter in Stop mode（异步脉冲计数）</p></li><li><p>PWM generator in Stop mode（PWM输出）</p></li><li><p>Timeout wakeup mode（超时唤醒）</p></li></ul><h2 id="3-LPTIM初始化结构体"><a href="#3-LPTIM初始化结构体" class="headerlink" title="3 LPTIM初始化结构体"></a>3 LPTIM初始化结构体</h2><p>介绍下LPTIM初始化结构体各个参数的含义及配置</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt=""></p><h3 id="3-1-Clock"><a href="#3-1-Clock" class="headerlink" title="3.1 Clock"></a>3.1 Clock</h3><ul><li><p>Clock用于设置时钟源和时钟分频<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/123.png" alt=""></p></li><li><p>其中，时钟源参数 Source 可以选择如下两种：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/12345.png" alt=""></p><ul><li><p>#define LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC ((uint32_t)0x00U)<br>表示 LPTIM 由内部时钟源（APB 时钟或 APB 或 LSE、 LSI 和 HSI 等）提供时钟</p></li><li><p>#define LPTIM_CLOCKSOURCE_ULPTIM LPTIM_CFGR_CKSEL<br>表示 LPTIM 由外部时钟源通过 LPTIM 外部 Input1 提供时钟</p></li></ul></li><li><p>Prescaler 时钟分频参数则可以选择八种，有1、2、4、8、16、32、64、128分频：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/1234.png" alt=""></p></li></ul><h3 id="3-2-UltraLowPowerClock"><a href="#3-2-UltraLowPowerClock" class="headerlink" title="3.2 UltraLowPowerClock"></a>3.2 UltraLowPowerClock</h3><ul><li><p>UltraLowPowerClock参数仅在使用超低功耗时钟源时使用，用于设置所选择的外部时钟<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/3.png" alt=""></p></li><li><p>其中，时钟极性参数 Polarity 用于选择有效的时钟极性，如果使能了双边沿，Auxiliary Clock（一种低功耗振荡器）必须处于激活状态<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/5.png" alt=""></p></li><li><p>SampleTime 参数用于配置时钟干扰滤波器<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/6.png" alt=""></p></li></ul><h3 id="3-3-Trigger"><a href="#3-3-Trigger" class="headerlink" title="3.3 Trigger"></a>3.3 Trigger</h3><ul><li><p>Trigger 用于配置触发参数<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.147.png" alt=""></p></li><li><p>其中，Source 参数配置触发源，可选配置如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.141.png" alt=""></p></li><li><p>ActiveEdge 参数用于设置有效的触发边沿，可以选择上升沿，下降沿或者双边沿触发<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.142.png" alt=""></p></li><li><p>SampleTime参数配置采样时间<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.143.png" alt=""></p></li></ul><h3 id="3-4-OutputPolarity"><a href="#3-4-OutputPolarity" class="headerlink" title="3.4 OutputPolarity"></a>3.4 OutputPolarity</h3><ul><li>OutputPolarity 用于配置输出极性，可选择高电平或者低电平输出<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.144.png" alt=""></li></ul><h3 id="3-5-UpdateMode"><a href="#3-5-UpdateMode" class="headerlink" title="3.5 UpdateMode"></a>3.5 UpdateMode</h3><ul><li>UpdateMode用于配置是否立即更新自动重装寄存器和比较寄存器，可以选择立即更新，或者当前周期结束后更新<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.145.png" alt=""></li></ul><h3 id="3-5-CounterSource"><a href="#3-5-CounterSource" class="headerlink" title="3.5 CounterSource"></a>3.5 CounterSource</h3><ul><li>CounterSource用于配置定时器计数器在每个内部事件或者外部事件后递增计数，可以选择内部或者外部<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.148.png" alt=""></li></ul><h3 id="3-6-Input1Source"><a href="#3-6-Input1Source" class="headerlink" title="3.6 Input1Source"></a>3.6 Input1Source</h3><ul><li>Input1Source用于配置 Input1 的输入源，可以选择 GPIO，比较器输出或者 SAI FSA/FSB<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.149.png" alt=""></li></ul><h3 id="3-7-Input2ource"><a href="#3-7-Input2ource" class="headerlink" title="3.7 Input2ource"></a>3.7 Input2ource</h3><ul><li>Input2ource用于配置 Input2 的输入源，可以选择 GPIO 和比较器（注意：此参数仅用于编码器模式）<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14333.png" alt=""></li></ul><h2 id="3-LPTIM-超时唤醒应用"><a href="#3-LPTIM-超时唤醒应用" class="headerlink" title="3 LPTIM 超时唤醒应用"></a>3 LPTIM 超时唤醒应用</h2><p>需求：使用LPTIM1，在低功耗stop模式下定时1s，1s后将STM32从stop模式唤醒，并且点亮LED灯</p><h3 id="3-1-LPTIM1时钟初始化"><a href="#3-1-LPTIM1时钟初始化" class="headerlink" title="3.1 LPTIM1时钟初始化"></a>3.1 LPTIM1时钟初始化</h3><ul><li>配置LPTIM1时钟为LSE，即外部低速时钟32768Hz，也可配置为内部低速时钟LSI，修改对应配置即可<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;</span><br><span class="line">RCC_OscInitStruct.LSEState = RCC_LSE_ON;</span><br><span class="line">RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;</span><br><span class="line"><span class="keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct)!= HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">Error_Handler(__FILE__, __LINE__);</span><br><span class="line">&#125;</span><br><span class="line">RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;</span><br><span class="line">RCC_PeriphCLKInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;</span><br><span class="line">HAL_RCCEx_PeriphCLKConfig(&amp;RCC_PeriphCLKInitStruct);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-LPTIM1初始化"><a href="#3-2-LPTIM1初始化" class="headerlink" title="3.2 LPTIM1初始化"></a>3.2 LPTIM1初始化</h3><ul><li><p>按上面概述的参数配置，对LPTIM1进行配置如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">LPTIM_HandleTypeDef hlptim1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MX_LPTIM1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  hlptim1.Instance = LPTIM1;</span><br><span class="line">  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;  <span class="comment">//选择内部时钟源</span></span><br><span class="line">  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV64;           <span class="comment">//设置LPTIM时钟分频</span></span><br><span class="line">  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;                        <span class="comment">//设置软件触发</span></span><br><span class="line">  hlptim1.Init.Trigger.ActiveEdge = LPTIM_ACTIVEEDGE_RISING;                      <span class="comment">//设置上升沿触发</span></span><br><span class="line">  hlptim1.Init.Trigger.SampleTime = LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION;        <span class="comment">//设置时钟干扰滤波器</span></span><br><span class="line">  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;     <span class="comment">//设置输出高电平</span></span><br><span class="line">  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;            <span class="comment">//比较寄存器和ARR自动重载寄存器选择更改后立即更新</span></span><br><span class="line">  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;   <span class="comment">//LPTIM计数器对内部时钟源计数</span></span><br><span class="line">  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;         <span class="comment">//外部输入1，本配置未使用</span></span><br><span class="line">  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;         <span class="comment">//外部输入2，本配置未使用</span></span><br><span class="line">  <span class="keyword">if</span> (HAL_LPTIM_Init(&amp;hlptim1) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      Error_Handler(__FILE__, __LINE__);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当 HAL_LPTIM_Init（）运行时会调用 HAL_LPTIM_MspInit（）函数，这是一个虚函数，还需要我们重新定义，开启LPTIM时钟及 LPTIM1_IRQn 初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HAL_LPTIM_MspInit</span><span class="params">(LPTIM_HandleTypeDef* hlptim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(hlptim-&gt;Instance==LPTIM1)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Peripheral clock enable */</span></span><br><span class="line">    __HAL_RCC_LPTIM1_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Peripheral interrupt init */</span></span><br><span class="line">    HAL_NVIC_SetPriority(LPTIM1_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-中断函数"><a href="#3-3-中断函数" class="headerlink" title="3.3 中断函数"></a>3.3 中断函数</h3><ul><li>编写中断回调函数，当定时时间到，点亮LED灯</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LPTIM1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HAL_LPTIM_IRQHandler(&amp;hlptim1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HAL_LPTIM_CompareMatchCallback</span><span class="params">(LPTIM_HandleTypeDef *hlptim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Timeout was reached, turn on LED */</span></span><br><span class="line">  BSP_LED_On();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-开启定时器"><a href="#3-4-开启定时器" class="headerlink" title="3.4 开启定时器"></a>3.4 开启定时器</h3><ul><li>开启定时器及进入stop模式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERIOD  65535</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PULSE  32767 </span></span><br><span class="line">HAL_LPTIM_TimeOut_Start_IT(&amp;hlptim1, PERIOD, PULSE);</span><br><span class="line"></span><br><span class="line">HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);</span><br></pre></td></tr></table></figure><ul><li>第1个参数是 LPTIM_HandleTypeDef 类型结构体指针变量</li><li>第2个参数是低功耗定时器的周期配置，范围 0 – 0xFFFF。</li><li>第3个参数是低功耗定时器的超时时间配置，范围 0 -0xFFFF。</li><li>返回值，返回 HAL_ERROR 表示配置失败，HAL_OK 表示配置成功，HAL_BUSY 表示忙（操作中），HAL_TIMEOUT 表示时间溢出</li><li>超时时间由 Compare 寄存器决定，即第3个参数，超时配置用不到第2个参数</li><li>超时时间计算方式：timeout = (Compare + 1) / LSE_Frequency，如配置Compare = 32767，LSE = 32768Hz，则超时时间为1s</li></ul><h2 id="4-踩坑记录"><a href="#4-踩坑记录" class="headerlink" title="4 踩坑记录"></a>4 踩坑记录</h2><ul><li><p>在使用官方例程的时候，不能触发定时中断，将触发源由 LPTIM_TRIGSOURCE_0 改为 LPTIM_TRIGSOURCE_SOFTWARE</p></li><li><p>移植官方例程时，未在 stm32l4xx_hal_conf.h 文件内打开LPTIM 外设的宏定义，导致一直报错<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.142.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.31/23132.png" alt=""></p></li><li><p>配置定时时间时候，未注意到参数范围是 0 -0xFFFF ，导致达不到自己想要的定时时间,最大可配置为65535,在Prescaler参数配置为 LPTIM_PRESCALER_DIV1 1分频的时候，超时时间最大为（65535+1）/32768 = 2s</p></li></ul><blockquote><p>若有需要完整代码及其他AsynchPulseCounter_STOP2、PWMGenerator_STOP两种应用的例程，关注微信公众号：南风过程蜻蜓飞 ，回复LPTIM获取低功耗定时器相关资料及代码</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%20%E5%BC%95%E5%AF%BC%E5%85%B3%E6%B3%A8.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;目标实现：使用LPTIM1，在低功耗stop模式下定时1s，1s后将STM32从stop模式唤醒，并且点亮LED灯&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【玩转MDK】MDK编译过程解析</title>
    <link href="https://nanfeng-iot.cn/2021/01/24/%E3%80%90%E7%8E%A9%E8%BD%ACMDK%E3%80%91MDK%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90/"/>
    <id>https://nanfeng-iot.cn/2021/01/24/%E3%80%90%E7%8E%A9%E8%BD%ACMDK%E3%80%91MDK%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90/</id>
    <published>2021-01-24T14:08:29.376Z</published>
    <updated>2021-01-24T14:09:19.123Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%20%E5%BC%95%E5%AF%BC%E5%85%B3%E6%B3%A8.gif" alt=""></p><p>【玩转MDK】MDK编译过程解析</p><a id="more"></a><h2 id="1、MDK编译过程"><a href="#1、MDK编译过程" class="headerlink" title="1、MDK编译过程"></a>1、MDK编译过程</h2><ul><li><p>在MDK工程下，点击编译按钮，MDK将会完成整个编译过程，如下图所示</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.24/%E7%BC%96%E8%AF%91.png" alt=""></p></li></ul><ul><li><p>编译，MDK 软件使用的编译器是 armcc 和 armasm，它们根据每个c/c++和汇编源文件编译成对应的以“.o”为后缀名的对象文件(Object Code，也称目标文件)，其内容主要是从源文件编译得到的机器码，包含了代码、数据以及调试使用的信息；</p></li><li><p>链接，链接器 armlink 把各个.o 文件及库文件链接成一个映像文件“.axf”或“.elf”；</p></li><li><p>格式转换，一般来说 Windows 或 Linux 系统使用链接器直接生成可执行映像文件 elf后，内核根据该文件的信息加载后，就可以运行程序了，但在单片机平台上，需要把该文件的内容加载到芯片上，所以还需要对链接器生成的 elf 映像文件利用格式转换器fromelf 转换成“.bin”或“.hex”文件，交给下载器下载到芯片的 FLASH 或 ROM 中。</p></li></ul><h2 id="2、编译过程实例解析"><a href="#2、编译过程实例解析" class="headerlink" title="2、编译过程实例解析"></a>2、编译过程实例解析</h2><ul><li><p>MDK工程下点击编译按钮，在MDK的“Build Output”窗口会看到编译过程信息<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.24/%E6%AF%94.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.24/333.png" alt=""></p></li></ul><ul><li><p>1、提示信息的第一部分说明构建过程调用的编译器。图中的编译器名字是“V5.06(build20)”，后面附带了该编译器所在的文件夹。在电脑上打开该路径，即\ARM\ARMCC\bin，可看到该编译器包含 armar、 armasm、 armcc、 armlink 及 fromelf，后面四个工具上面内容已有讲解，而 armar 是用于把.o 文件打包成 lib 文件的<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.24/%E5%B7%A5%E5%85%B7.png" alt=""></p></li><li><p>2、使用 armasm 编译汇编文件。图中列出了编译 startup 启动文件时的提示，编译后每个汇编源文件都对应有一个独立的.o 文件</p></li><li><p>3、使用 armcc 编译 c/c++文件。图中列出了工程中所有的 c/c++文件的提示，同样地，编译后每个 c/c++源文件都对应有一个独立的.o 文件。</p></li><li><p>4、使用 armlink 链接对象文件，根据程序的调用把各个.o 文件的内容链接起来，最后生成程序的 axf 映像文件，并附带程序各个域大小的说明，包括 Code、 RO-data、 RW-data及 ZI-data 的大小。</p></li><li><p>5、使用 fromelf 生成下载格式文件，它根据 axf 映像文件转化成 hex 文件，并列出编译过程出现的错误(Error)和警告(Warning)数量。</p></li><li><p>6、最后一段提示给出了整个构建过程消耗的时间</p></li><li><p>编译完成后，可在工程的“Output”及“Listing”目录下找到由以上过程生成的各种文件，每个 C 源文件都对应生成了.o、 .d 及.crf 后缀的文件，还有一些额外的.dep、 .hex、 .axf、 .htm、 .lnp、 .sct、 .lst 及.map 文件</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/01.24/2323.png" alt=""></p></li></ul><blockquote><p>nan-feng知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt="扫码关注，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%20%E5%BC%95%E5%AF%BC%E5%85%B3%E6%B3%A8.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;【玩转MDK】MDK编译过程解析&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>TortoiseGit 汉化时无法查找到中文语言包问题</title>
    <link href="https://nanfeng-iot.cn/2021/01/24/TortoiseGit%20%E6%B1%89%E5%8C%96%E6%97%B6%E6%97%A0%E6%B3%95%E6%9F%A5%E6%89%BE%E5%88%B0%E4%B8%AD%E6%96%87%E8%AF%AD%E8%A8%80%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://nanfeng-iot.cn/2021/01/24/TortoiseGit%20%E6%B1%89%E5%8C%96%E6%97%B6%E6%97%A0%E6%B3%95%E6%9F%A5%E6%89%BE%E5%88%B0%E4%B8%AD%E6%96%87%E8%AF%AD%E8%A8%80%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2021-01-24T12:46:05.203Z</published>
    <updated>2021-01-24T12:46:23.288Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%20%E5%BC%95%E5%AF%BC%E5%85%B3%E6%B3%A8.gif" alt=""></p><p><strong>��� TortoiseGit ����ʱ�޷����ҵ��������԰�����</strong></p><a id="more"></a><h2 id="1��TortoiseGit����"><a href="#1��TortoiseGit����" class="headerlink" title="1��TortoiseGit����"></a>1��TortoiseGit����</h2><ul><li>TortoiseGit��ʵ��һ�Դ��git�İ汾����ϵͳ��Ҳ�к���git��TortoiseGit�ṩ�����Ի���ͼ�λ����棬������Gitһ������������䣬��git init��git add��git commit��Щ����ͨͨ���ü��ˡ�����ʹ����꣬�Ϳ�����ɴ�����ύ���ϴ�������ʹ�ñ���Git��������˵��TortoiseGit���Ӽ�㣬�����������֡�<ul><li>TortoiseGit ������<a href="https://tortoisegit.org/" target="_blank" rel="noopener">https://tortoisegit.org/</a> �����ڹٷ����ذ�װ����������</li></ul></li></ul><h2 id="2����������"><a href="#2����������" class="headerlink" title="2����������"></a>2����������</h2><ul><li><p>��װ��TortoiseGit��������������TortoiseGit����Settingsҳ�������԰�ѡ�����޷��鿴�����İ�</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/111.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/112.png" alt=""></p></li></ul><h2 id="3������취"><a href="#3������취" class="headerlink" title="3������취"></a>3������취</h2><ul><li><p>�ڳ��ָ������Ҳ�ٶ��˸������һЩ����취�������˺ö࣬����û���</p></li><li><p>������ʶ�������Ǻ������İ汾̫�ɣ���Ϊ�Ұ�װ��TortoiseGit��2.11�汾������������2.10�汾���ڸ߰汾��TortoiseGit���޷���⵽�����´ӹ����������µ�2.11������������˺��������ܼ�⵽������</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/113.png" alt=""></p><p><strong>�ܽ�һ�£�TortoiseGit ����ʱ�޷����ҵ��������԰�������TortoiseGit��װ���뺺�����汾��һ�µ��£��������غ������汾�����������</strong></p><blockquote><p>nan-feng֪ʶ���ޣ�������ֱ����д���ĵط���ӭ������ָ���������Ķ�������������ת��������Ҳ�Ǳ��߼�ֵĶ�����ɨ���ע����̨�ظ�С�ڹ��ȡTortoiseGit��װ��</p></blockquote></li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt="ɨ���ע��������������Ƕ��ʽѧϰ֮·"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%20%E5%BC%95%E5%AF%BC%E5%85%B3%E6%B3%A8.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;��� TortoiseGit ����ʱ�޷����ҵ��������԰�����&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用Keil精确测试代码运行时间</title>
    <link href="https://nanfeng-iot.cn/2021/01/15/%E4%BD%BF%E7%94%A8Keil%E7%B2%BE%E7%A1%AE%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
    <id>https://nanfeng-iot.cn/2021/01/15/%E4%BD%BF%E7%94%A8Keil%E7%B2%BE%E7%A1%AE%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</id>
    <published>2021-01-15T13:46:01.134Z</published>
    <updated>2021-01-15T14:09:49.415Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%20%E5%BC%95%E5%AF%BC%E5%85%B3%E6%B3%A8.gif" alt=""></p><p><strong>发掘Keil实用功能，使用Keil精准测试代码运行时间</strong></p><a id="more"></a><h2 id="1-Keil设置"><a href="#1-Keil设置" class="headerlink" title="1 Keil设置"></a>1 Keil设置</h2><p>在使用该功能前，需要对MDK进行设置，设置很简单，如下图所示：</p><p>  <img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/1.png" alt=""></p><p>  <img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/2.png" alt=""></p><h2 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2 使用步骤"></a>2 使用步骤</h2><p>使用Keil的硬件仿真，通过简单的几个步骤，即能测试到代码运行的时间</p><ul><li><p>打开Keil仿真界面，在右下角会有一个t0:xxxxxsec的字样，把鼠标放在该图标上面，会看到如下图所示的三个时间显示，t0,t1,t2,</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/3.png" alt=""></p></li><li><p>其中，t0是系统上电运行的时间，与Registers窗口的时间一致，t1与t2是我们可以做测试的运行时间</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/4.png" alt=""></p></li><li><p>右键单击t0图标，可以设置显示t0/t1/t2,或复位t1/t2</p></li><li><p>在待测试的代码起始位置打一个断点，设置显示t1，且复位t1的时间</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/5.png" alt=""></p></li><li><p>在待测试的代码末尾位置打一个断点，全速运行代码到该断点处，当运行到该断点时，t1的时间即是该段代码运行的时间</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/6.png" alt=""></p></li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%20%E5%BC%95%E5%AF%BC%E5%85%B3%E6%B3%A8.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发掘Keil实用功能，使用Keil精准测试代码运行时间&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>一个简单而强大的截图工具</title>
    <link href="https://nanfeng-iot.cn/2021/01/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%80%8C%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7/"/>
    <id>https://nanfeng-iot.cn/2021/01/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%80%8C%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7/</id>
    <published>2021-01-03T12:28:26.943Z</published>
    <updated>2021-01-13T12:37:35.291Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Get一个简单但强大的截图工具Snipaste，Snip 是截屏，Paste 是贴图，小巧而功能丰富，不仅可以快速截图，还集成了标注和贴图等功能</strong></p><a id="more"></a><h2 id="1-Snipaste简介"><a href="#1-Snipaste简介" class="headerlink" title="1 Snipaste简介"></a>1 Snipaste简介</h2><p><img src="https://imgkr2.cn-bj.ufileos.com/a602bb12-7e59-44a5-a118-1d10a0a85c80.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=3IMQCpPo6TVLmJ1VXUMeALLRmNs%253D&Expires=1609685484" alt=""></p><ul><li>Snipaste 是一个简单但强大的贴图工具，同时也可以执行截屏、标注等功能</li><li>Snipaste 有win 版、mac 版，下载解压即可使用</li><li>Snipaste 是免费软件，它也很安全，没有广告、不会扫描你的硬盘、更不会上传用户数据</li></ul><h2 id="2-功能介绍"><a href="#2-功能介绍" class="headerlink" title="2 功能介绍"></a>2 功能介绍</h2><h3 id="2-1-强大的截图"><a href="#2-1-强大的截图" class="headerlink" title="2.1 强大的截图"></a>2.1 强大的截图</h3><ul><li>自动检测界面元素区域</li><li>像素级的鼠标移动控制、截图范围控制</li><li>取色器 </li><li>历史记录回放 </li><li>支持多屏</li><li>支持高分屏</li></ul><h3 id="2-2-把图片作为窗口置顶显示"><a href="#2-2-把图片作为窗口置顶显示" class="headerlink" title="2.2 把图片作为窗口置顶显示"></a>2.2 把图片作为窗口置顶显示</h3><ul><li>支持将剪贴板中的以下内容转为图片：图像、纯文本、HTML 文本、颜色信息、图像文件（PNG, JPG, BMP, ICO, GIF 等）</li><li>图片窗口支持的操作：缩放、旋转、镜像翻转、设置透明度、鼠标穿透、缩略图、图像标注、隐藏</li><li>取色 (Alt)</li><li>文件拖放</li><li>贴图分组</li><li>自动备份、恢复</li></ul><h3 id="2-3-方便地标注图像"><a href="#2-3-方便地标注图像" class="headerlink" title="2.3 方便地标注图像"></a>2.3 方便地标注图像</h3><ul><li>丰富的画图工具：矩形、椭圆、线条、箭头、铅笔、马克笔、文字</li><li>高级标注工具：马赛克、高斯模糊、橡皮擦、撤销、重做</li></ul><h3 id="2-4-自定义设置"><a href="#2-4-自定义设置" class="headerlink" title="2.4 自定义设置"></a>2.4 自定义设置</h3><ul><li>主题色、界面字体、通知栏图标等</li><li>快捷键</li><li>丰富的功能性选项</li></ul><h2 id="3、软件获取"><a href="#3、软件获取" class="headerlink" title="3、软件获取"></a>3、软件获取</h2><ul><li>公众号后台回复“截图”，获取软件包，软件包解压即可使用</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Get一个简单但强大的截图工具Snipaste，Snip 是截屏，Paste 是贴图，小巧而功能丰富，不仅可以快速截图，还集成了标注和贴图等功能&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>配置局域网内电脑快速传输数据</title>
    <link href="https://nanfeng-iot.cn/2020/10/18/%E9%85%8D%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%94%B5%E8%84%91%E5%BF%AB%E9%80%9F%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/"/>
    <id>https://nanfeng-iot.cn/2020/10/18/%E9%85%8D%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%94%B5%E8%84%91%E5%BF%AB%E9%80%9F%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/</id>
    <published>2020-10-18T03:38:40.682Z</published>
    <updated>2021-01-13T12:37:35.279Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Get一种工作、生活中实用技能，局域网内电脑之间传输数据，实现在两台电脑之间快速拷贝文件</strong></p><a id="more"></a><h2 id="1-使用条件"><a href="#1-使用条件" class="headerlink" title="1 使用条件"></a>1 使用条件</h2><ul><li>两台电脑在一个网段内，即处于一个局域网，比如在家或是在公司同一个路由底下的就可以</li></ul><h2 id="2-电脑设置"><a href="#2-电脑设置" class="headerlink" title="2 电脑设置"></a>2 电脑设置</h2><ul><li>新建一个文件夹，命名随意，右键单击选择属性-&gt;共享<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></li></ul><ul><li><p>选择共享界面下的共享，进入文件共享界面，添加共享用户<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/1.png" alt=""></p></li><li><p>选择设置权限，这里我设置为可读可写，确定共享<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/222.png" alt=""></p></li><li><p>共享完成<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/2211.png" alt=""></p></li><li><p>取消密码保护，共享文件夹默认有密码保护，只能具备此计算机的账户和密码的用户才可以访问共享文件夹，为了访问共享文件夹的方便，我们取消密码保护，访问时候不用账号密码就能访问共享文件夹<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/3.png" alt=""></p></li></ul><h2 id="3-访问方法"><a href="#3-访问方法" class="headerlink" title="3 访问方法"></a>3 访问方法</h2><ul><li><p>通过电脑命令行输入ipconfig查询本机ip地址，查询到本机IP地址为：192.168.31.76<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/3.png2.png" alt=""></p></li><li><p>在该局域网下的另一台电脑输入：</p><blockquote><pre><code>\\192.168.31.76</code></pre><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/Q1.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/10%E6%9C%88/311.png" alt=""></p></blockquote></li><li><p>必须两台电脑处于同一个网段,这里笔者所用的两台电脑都是在31网段下</p></li><li><p>访问到共享文件夹进行文件拷贝，复制粘贴文件的速度相比用U盘拷贝文件就快太多太多了，大家赶紧去试一试吧<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote></li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Get一种工作、生活中实用技能，局域网内电脑之间传输数据，实现在两台电脑之间快速拷贝文件&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用EMQ搭建MQTT服务器</title>
    <link href="https://nanfeng-iot.cn/2020/09/08/%E4%BD%BF%E7%94%A8EMQ%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://nanfeng-iot.cn/2020/09/08/%E4%BD%BF%E7%94%A8EMQ%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-09-08T06:05:33.366Z</published>
    <updated>2020-09-08T06:47:35.196Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网基础：使用EMQ搭建MQTT服务器****</strong></p><a id="more"></a><h2 id="1-EMQ介绍"><a href="#1-EMQ介绍" class="headerlink" title="1 EMQ介绍"></a>1 EMQ介绍</h2><p>EMQ (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。Erlang/OTP 是出色的软实时(Soft-Realtime)、低延时(Low-Latency)、分布式(Distributed) 的语言平台。MQTT 是轻量的(Lightweight)、发布订阅模式(PubSub) 的物联网消息协议</p><p>EMQ 项目设计目标是承载移动终端或物联网终端海量 MQTT 连接，并实现在海量物联网设备间快速低延时消息路由:</p><ul><li>稳定承载大规模的 MQTT 客户端连接，单服务器节点支持50万到100万连接。</li><li>分布式节点集群，快速低延时的消息路由，单集群支持1000万规模的路由。</li><li>消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。</li><li>完整物联网协议支持，MQTT、MQTT-SN、CoAP、WebSocket 或私有协议支持。</li></ul><p>EMQ官网：<a href="https://www.emqx.io/cn" target="_blank" rel="noopener">https://www.emqx.io/cn</a></p><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h2><p>搭建MQTT服务器之前，需要先下载EMQ软件包，个人使用选择EMQ X Broker，EMQ X Broker 是基于高并发的 Erlang/OTP 语言平台开发，支持百万级连接和分布式集群架构，发布订阅模式的开源 MQTT 消息服务器</p><p>进入官网下载：<a href="https://www.emqx.io/cn/downloads#broker" target="_blank" rel="noopener">https://www.emqx.io/cn/downloads#broker</a></p><p>选择版本，软件包，笔者下载的是V2.3.11，软件包选择Window,Window10的压缩包</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831111303.png" alt=""></p><p>下载完成解压，打开emqttd文件夹，软件包里即包含如下文件（注意：EMQ的下载存放路径别有中文）：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831111410.png" alt=""></p><p>EMQ 2.0用户手册：<a href="https://docs.emqx.net/broker/v2/cn/" target="_blank" rel="noopener">https://docs.emqx.net/broker/v2/cn/</a></p><h2 id="3-安装EMQ"><a href="#3-安装EMQ" class="headerlink" title="3 安装EMQ"></a>3 安装EMQ</h2><p>使用管理员身份运行cmd命令窗口，跳转到emqttd的存放路径下/bin文件夹路径</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831100736.png" alt=""></p><p>输入命令 emqttd install ,安装emq</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831100942.png" alt=""></p><p>输入命令 emqttd start ,启动emq，第一次安装启动emq时可能会卡住，没关系，关闭命令窗口，再次启动emq,当出现以下界面时候即表示已成功启动emq</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831112001.png" alt=""></p><p>EMQ 消息服务器启动后，会默认加载 Dashboard 插件，启动 Web 管理控制台。可通过 Web 控制台，查看服务器运行状态、统计数据、客户端(Client)、会话(Session)、主题(Topic)、订阅(Subscription)、插件(Plugin)。</p><p>控制台地址: <a href="http://127.0.0.1:18083，默认用户">http://127.0.0.1:18083，默认用户</a>: admin，密码：public</p><p>尝试登录控制台，验证 EMQ 是否成功启动</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831112326.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831112426.png" alt=""></p><p>能进入控制台，即表示EMQ安装成功</p><h2 id="4-添加用户"><a href="#4-添加用户" class="headerlink" title="4 添加用户"></a>4 添加用户</h2><p>EMQ 2.0 支持丰富的扩展插件，包括控制台、扩展模块、多种认证方式、多种接入协议等:<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831113530.png" alt=""></p><p>可以在 Web 控制台查看各个插件的运行情况：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831113637.png" alt=""></p><p>用户名、密码认证插件（emq_auth_username）默认是停止运行的，我们需要将其更改为启动<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831114154.png" alt=""></p><p>在命令行窗口使用 emqttd_ctl users add <Username> <Password> 命令添加用户，添加一个用户名和密码均为test的用户做MQTT测试，可使用命令 emqttd_ctl users list 查看用户列表验证是否成功添加用户</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831114929.png" alt=""></p><h2 id="4-数据交互测试"><a href="#4-数据交互测试" class="headerlink" title="4 数据交互测试"></a>4 数据交互测试</h2><h3 id="4-1-MQTTBox连接"><a href="#4-1-MQTTBox连接" class="headerlink" title="4.1 MQTTBox连接"></a>4.1 MQTTBox连接</h3><p>使用MQTTBox工具测试 EMQ MQTT服务器是否能正常通信，自定义发布主题和订阅主题，得到MQTTBox连接信息如下：<br>| 连接信息   |  参数  |<br>| — | — |<br>|  地址   |  127.0.0.1  |<br>|  端口   |   1883  |<br>|  用户名 |   test  |<br>|  密码   |   test  |<br>|  发布主题 |   publish_test  |<br>|  订阅主题 | subscribe_test  |</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831140246.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831140515.png" alt=""></p><p>MQTTBox连接上EMQ MQTT服务器，且订阅subscribe_test主题</p><h3 id="4-2-Websocket-连接"><a href="#4-2-Websocket-连接" class="headerlink" title="4.2  Websocket 连接"></a>4.2  Websocket 连接</h3><p>EMQ 2.0 消息服务器默认占用的 TCP 端口包括:</p><table><thead><tr><th>端口</th><th>用途</th></tr></thead><tbody><tr><td>1883</td><td>MQTT 协议端口</td></tr><tr><td>8883</td><td>MQTT/SSL 端口</td></tr><tr><td>8083</td><td>MQTT/WebSocket 端口</td></tr><tr><td>8080</td><td>HTTP API 端口</td></tr><tr><td>18083</td><td>Dashboard 管理控制台端口</td></tr></tbody></table><p>故我们用WebSocket做MQTT连接时端口应该为8083，而不是1883，故得到WebSocket连接信息如下：</p><table><thead><tr><th>连接信息</th><th>参数</th></tr></thead><tbody><tr><td>地址</td><td>127.0.0.1</td></tr><tr><td>端口</td><td>8083</td></tr><tr><td>用户名</td><td>test</td></tr><tr><td>密码</td><td>test</td></tr><tr><td>发布主题</td><td>subscribe_test</td></tr><tr><td>订阅主题</td><td>publish_test</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831141649.png" alt=""></p><p>WebSocket连接上EMQ MQTT服务器，且订阅publish_test主题</p><h3 id="4-3-信息交互测试"><a href="#4-3-信息交互测试" class="headerlink" title="4.3 信息交互测试"></a>4.3 信息交互测试</h3><ul><li><p>MQTTBox发布一条主题为publish_test的消息，可以在EMQ WebSocket上看到发布的消息</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831142553.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831142715.png" alt=""></p></li><li><p>WebSocket发布一条主题为subscribe_test的消息，可以在MQTTBox上看到发布的消息</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831142940.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200831143026.png" alt=""></p><p>EMQ MQTT服务器能正常接收、发送数据，正常通信,使用EMQ搭建MQTT服务器成功</p></li></ul><p><strong>注意：此处搭建的MQTT服务器只能使用局域网通信进行数据传输</strong></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网基础：使用EMQ搭建MQTT服务器****&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言面试每日一题：位运算符的运用（1）</title>
    <link href="https://nanfeng-iot.cn/2020/08/28/C%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E8%BF%90%E7%94%A8%EF%BC%881%EF%BC%89/"/>
    <id>https://nanfeng-iot.cn/2020/08/28/C%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E8%BF%90%E7%94%A8%EF%BC%881%EF%BC%89/</id>
    <published>2020-08-28T14:53:29.170Z</published>
    <updated>2020-08-28T15:00:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><strong>C语言面试每日一题：位运算符的运用（1）</strong></p><p>记录、总结C语言经典面试题，备忘！</p><a id="more"></a><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>计算一个字节里有多少位被置1</p><h2 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2.示例代码"></a>2.示例代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 公众号：南风过境蜻蜓飞  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIT (0x1&lt;&lt;7)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_num</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_num</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> comp = BIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;<span class="keyword">sizeof</span>(x) * <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((x &amp; comp) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        comp = comp &gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入一个字节:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">    num = get_num(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入的一个字节里有%d位被置1\r\n"</span>,num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-代码分析、验证"><a href="#3-代码分析、验证" class="headerlink" title="3.代码分析、验证"></a>3.代码分析、验证</h2><p>题目主要考察位运算符的运用。解题方法：将一个字节里的8位分别判断是否被置为1</p><p>一个字节（byte）有8位，计算一个字节里有多少位被置1，首先在宏定义中将最高位置1，然后循环比较每个位是否被置成1，若是，则count++，循环结束返回返回count的值</p><p>测试：在VS Code 里编写以上代码，编译运行，输入值66（二进制：1000010），按照理论，代码运行结束后，返回的count值应该为2</p><p>测试如下，输入66，返回的count值为2，与理论值吻合</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></p><h2 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4.扩展"></a>4.扩展</h2><p>上面的代码我们是将宏定义最高位置1，然后循环比较每一位，对原代码做简单改动，将宏定义最低位置1，然后循环比较每一位，也可达到一样的效果，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 公众号：南风过境蜻蜓飞  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIT (0x80&gt;&gt;7)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_num</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_num</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> comp = BIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;<span class="keyword">sizeof</span>(x) * <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((x &amp; comp) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        comp = comp &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入一个字节:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">    num = get_num(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入的%d有%d位被置1\r\n"</span>, a, num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试如下，输入66，返回的count值为2，与理论值吻合</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>内容主要来自《C和C++程序员面试秘笈》,笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力；若有需要，扫码关注公众号，后台回复 C面试 获取《C和C++程序员面试秘笈》PDF版</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;C语言面试每日一题：位运算符的运用（1）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录、总结C语言经典面试题，备忘！&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言面试每日一题：static关键字</title>
    <link href="https://nanfeng-iot.cn/2020/08/28/C%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9Astatic%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://nanfeng-iot.cn/2020/08/28/C%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9Astatic%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2020-08-28T14:17:40.611Z</published>
    <updated>2020-08-28T15:00:09.542Z</updated>
    
    <content type="html"><![CDATA[<p><strong>C语言面试每日一题：static 关键字</strong></p><p>记录、总结C语言经典面试题，备忘！</p><a id="more"></a><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1 题目"></a>1 题目</h2><p>写出下面程序的输出结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公众号：南风过境蜻蜓飞</span></span><br><span class="line"><span class="comment">//static关键字的使用</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    c += <span class="number">1</span>;</span><br><span class="line">    b += <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>(a + b + c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"sum :%d\r\n"</span>, sum(a));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-答案"><a href="#2-答案" class="headerlink" title="2 答案"></a>2 答案</h2><p>在VC编译器里运行代码，结果如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200828162935.png" alt=""></p><p>运行三次int sum(int)函数，结果分别为8， 10， 12，大家都得到正确答案了吗</p><h2 id="3-考点解析"><a href="#3-考点解析" class="headerlink" title="3 考点解析"></a>3 考点解析</h2><p>本题主要考察C语言关键字static 的知识及应用</p><p>在C语言中，关键字static有3个作用：</p><ul><li><p>在函数体内，一个被声明为静态的变量在这一函数被调用的过程中维持其值不变。</p></li><li><p>在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所有函数访问，但不能被模块外其他函数访问，它是一个本地的全局变量。</p></li><li><p>在模块内，一个被声明为静态的函数只可被这一模块内的其他函数调用，即这个函数被限制在声明她的模块的本地范围内使用。</p></li></ul><p>变量和函数是加sttic的区别：</p><ul><li><p>static局部变量和普通局部变量的区别：static局部变量只初始化一次，下一次依据上一次结果值。把普通局部变量更改为静态变量之后是改变了它的存储方式，即改变了它的生存期。</p></li><li><p>static全局变量和普通全局变量的区别：static全局变量只初始化一次，防止在其他文件单元中被引用。把普通全局变量更改为静态变量之后是改变了它的作用域，限制了它的使用范围。</p></li><li><p>static函数和普通函数的区别：static函数在内存中只有一份，普通函数在每个被调用中维持一份复制品。把普通函数更改为静态函数之后是改变了它的作用域，限制了它的使用范围。</p></li></ul><p>auto 自动变量是所有局部变量默认的存储类；auto 只能用在函数内，即 auto 只能修饰局部变量；auto自动变量会随着函数被调用和退出而存在和消失</p><h2 id="3-题目解析"><a href="#3-题目解析" class="headerlink" title="3 题目解析"></a>3 题目解析</h2><p>第一次运行int sum(int)函数：i = 0；a = 2;运行b += 2之后b的值为4；运行c += 1之后c的值为2；故a + b + c的值为8；</p><p>第一次运行int sum(int)函数：i = 1；a = 2;由于b被声明为static局部变量，故b的初始值为上一次的结果值4，运行b += 2之后b的值变为6；c 是auto自动变量，此时c的初始值为1，运行c += 1之后c的值为2；故a + b + c的值为10；</p><p>第一次运行int sum(int)函数：i = 2；a = 2;同理，此时b的初始值为6，运行b += 2之后b的值变为8；同理，此时c的初始值为1，运行c += 1之后c的值为2；故a + b + c的值为12；</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>内容来自《C和C++程序员面试秘笈》,笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力；若有需要，扫码关注微信公众号，后台回复 C面试 获取《C和C++程序员面试秘笈》PDF版</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;C语言面试每日一题：static 关键字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录、总结C语言经典面试题，备忘！&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>物联网基础：物联网卡介绍及卡号解码</title>
    <link href="https://nanfeng-iot.cn/2020/07/30/%E7%89%A9%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%89%A9%E8%81%94%E7%BD%91%E5%8D%A1%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%8D%A1%E5%8F%B7%E8%A7%A3%E7%A0%81/"/>
    <id>https://nanfeng-iot.cn/2020/07/30/%E7%89%A9%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%89%A9%E8%81%94%E7%BD%91%E5%8D%A1%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%8D%A1%E5%8F%B7%E8%A7%A3%E7%A0%81/</id>
    <published>2020-07-30T14:14:24.892Z</published>
    <updated>2020-07-30T14:15:42.064Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网卡是由移动通信（移动、电信、联通）运营商提供的针对物联网、特别是M2M领域的SIM卡，满足智能硬件和物联网行业对设备联网的需求</strong></p><a id="more"></a><h2 id="物联网卡介绍"><a href="#物联网卡介绍" class="headerlink" title="物联网卡介绍"></a>物联网卡介绍</h2><h3 id="1-种类"><a href="#1-种类" class="headerlink" title="1. 种类"></a>1. 种类</h3><p>按物理形态分类可分为插拔式MP卡和贴片式MS卡</p><p>MP卡(M2M Plug-In卡)包括普通级MP1卡和工业级MP2卡，根据不同等级采用普通芯片和普通卡基材料，或是采用能够适应特殊环境要求的特殊芯片、特殊卡基材料。外观和管脚定义与普通SIM卡相同。</p><p>MS卡(M2M SMD卡)则直接焊接在M2M模组上，以实现紧密牢固的物理连接和可靠的接口通信，物理特性、电气特性和传输协议方面与普通SIM卡相同，该种卡片在某些物理性能如附着力、抗振等方面更有优越表现。也分为普通级MS0卡和工业级MS1卡。</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720200729220012.jpg" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/0851DC62C1D79E3643E4693980B5C39B.png" alt=""></p><h3 id="2-与普通SIM区别"><a href="#2-与普通SIM区别" class="headerlink" title="2. 与普通SIM区别"></a>2. 与普通SIM区别</h3><ul><li><p>功能区别：常用的插拔式MP物联网卡与普通SIM卡外形完全一样，但他们在功能上有一定的区别，手机SIM卡相比物联网卡多了短信、语音的功能，据说前期物联网卡也能支持短信、语音，且价格便宜，被不法分子用到C端市场，故运营商后来取消了语音功能，短信功能受限</p></li><li><p>购买方式的区别：普通的手机SIM卡可以直接从三大运营商的营业厅可以购买。物联网卡运营商不直接销售，而是有代理商负责销售推广，主要面向企业用户，一般不对普通消费者开放。</p></li><li><p>申请和使用方式的区别：物联网卡一般不针对普通消费者开放，而是以实名方式批量销售给企业用户。同时，物联网卡有专用的APN（服务接入点）区别于普通手机卡。</p></li><li><p>管理方式的区别：普通手机卡充值方便，通过支付宝，微信或者营业厅都可以缴费，叠加流量包，通过客服可以咨询手机资费使用情况。物联网卡则是通过代理商提供的管理平台进行充值，叠加，查看流量使用情况。</p></li><li><p>服务和运营的区别：物联卡相比于普通手机卡的最大区别是国内三大运营商均提供了物联网卡管理平台，给企业用户分配专用帐号或开放API，提供如空中写卡、位置定位、流量管理等服务。</p></li><li><p>物联网卡计费方式灵活，相对手机SIM卡资费也比较便宜，具体资费可上三大运营商官网查看或咨询代理商</p></li><li><p>手机SIM卡可代替物联网卡使用，但物联网卡不能代替手机SIM使用</p></li></ul><h2 id="物联网卡卡号"><a href="#物联网卡卡号" class="headerlink" title="物联网卡卡号"></a>物联网卡卡号</h2><p>物联网卡卡号，即集成电路卡识别码ICID：Integrate circuit card identity ，相当于手机号码的身份证，丝印在物联网卡正面。 ICID为 IC卡的唯一识别号码，共有 20位数字组成，其编码格式为：XXXXX XXXXX XXXXX XXXXX，前六位为运营商代码：中国移动的为：898600，898602，898604，898607 ；中国联通的为：898601、898606、898609，中国电信 898603，898611。三大运营商的具体编码规则不一样，下面将逐一介绍。</p><h3 id="1-中国移动"><a href="#1-中国移动" class="headerlink" title="1. 中国移动"></a>1. 中国移动</h3><p>中国移动编码格式：898600MFSSYYGXXXXXXP</p><ul><li><p>89： 国际编号</p></li><li><p>86： 国家编号，86：中国</p></li><li><p>00： 运营商编号，00：中国移动</p></li><li><p>M： 号段，对应用户号码前3位</p><ul><li><p>0：159 1：158 2：150</p></li><li><p>3：151 4－9：134－139 A：157</p></li><li><p>B：188 C：152 D：147 E：187</p></li></ul></li><li><p>F： 用户号码第 4位</p></li><li><p>SS： 省编号</p><ul><li><p>北京：01 天津：02 河北：03 山西：04 内蒙古：05 辽宁：06 吉林：07</p></li><li><p>黑龙江：08 上海：09 江苏：10 浙江：11 安徽：12 福建：13 江西：14</p></li><li><p>山东：15 河南：16 湖北：17 湖南：18 广东：19 广西：20 海南：21</p></li><li><p>四川：22 贵州：23 云南：24 西藏：25 陕西：26 甘肃：27 青海：28</p></li><li><p>宁夏：29 新疆：30 重庆：31</p></li></ul></li><li><p>YY： 编制 ICID时年号的后两位，如‘09’代表 2009年</p></li><li><p>G： SIM卡供应商代码</p><ul><li><p>0：雅斯拓 1：GEMPLUS 2：武汉天喻 3：江西捷德 4：珠海东信和平</p></li><li><p>5：大唐微电子通 6：航天九州通 7：北京握奇 8：东方英卡</p></li><li><p>9：北京华虹 A ：上海柯斯</p></li></ul></li><li><p>X…X： 用户识别码</p></li><li><p>P： 校验位</p></li></ul><h3 id="2-中国联通"><a href="#2-中国联通" class="headerlink" title="2. 中国联通"></a>2. 中国联通</h3><p>中国联通编码格式：898601YY8SSXXXXXXXXP</p><ul><li><p>89： 国际编号</p></li><li><p>86： 国家编号，86：中国</p></li><li><p>01： 运营商编号，01：中国联通</p></li><li><p>YY： 编制 ICID时年号的后两位</p></li><li><p>8： 中国联通 ICID默认此为为 8</p></li><li><p>SS：2位省份编码</p><ul><li><p>10：内蒙古 11：北京 13：天津 17：山东 18：河北 19：山西 30：安徽 31：上海 34：江苏</p></li><li><p>36：浙江 38：福建 50：海南 51：广东 59：广西 70：青海 71：湖北 74：湖南 75：江西</p></li><li><p>76：河南 79：西藏 81：四川 83：重庆 84：陕西 85：贵州 86：云南 87：甘肃 88：宁夏</p></li><li><p>89：新疆 90：吉林 91：辽宁 97：黑龙江</p></li></ul></li><li><p>X…X： 卡商生产的顺序编码</p></li><li><p>P： 校验位</p></li></ul><h3 id="3-中国电信"><a href="#3-中国电信" class="headerlink" title="3. 中国电信"></a>3. 中国电信</h3><p>中国电信编码格式：898603YYXMHHHXXXXXXP</p><ul><li><p>89：国际编号</p></li><li><p>86：国家编号，86：中国</p></li><li><p>03：运营商编号，03：中国电信</p></li><li><p>YY：编制 ICID时的年号（取后两位），如‘09’代表 2009年</p></li><li><p>M ：保留位，固定为 0</p></li><li><p>HHH：本地网地区代码，位数不够前补零。如上海区号为 021，则 HHH为＇021’；长沙区号为 0731，则 HHH为‘731’，测试卡代码为 001</p></li><li><p>XXXXXXP：7位流水号，建议前 2位作为批次号</p></li></ul><h2 id="机卡分离问题"><a href="#机卡分离问题" class="headerlink" title="机卡分离问题"></a>机卡分离问题</h2><p>根据工业和信息化部的要求，使用物联网卡的硬件设备必需对物联网卡进行绑定处理。当物联网卡第一次接入设备时，设备与物联网卡即进行绑定操作</p><p>物联网卡被绑定之后，若更换硬件设备，则物联网卡就会处于机卡分离状态，相当于被锁定，不能正常使用</p><p>若物联网卡处于机卡分离状态，但想给其他硬件设备使用，则可联系物联网卡代理商给物联网卡重新绑定所要使用的硬件设备（一般使用硬件设备的IMEI跟物联网卡的ICID进行绑定）</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>本文系网络收集整理，笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网卡是由移动通信（移动、电信、联通）运营商提供的针对物联网、特别是M2M领域的SIM卡，满足智能硬件和物联网行业对设备联网的需求&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>物联网-MQTT协议第十讲：构建PUBACK报文</title>
    <link href="https://nanfeng-iot.cn/2020/07/23/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E5%8D%81%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAPUBACK%E6%8A%A5%E6%96%87/"/>
    <id>https://nanfeng-iot.cn/2020/07/23/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E5%8D%81%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAPUBACK%E6%8A%A5%E6%96%87/</id>
    <published>2020-07-23T14:49:15.138Z</published>
    <updated>2020-07-30T14:15:42.064Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网–MQTT协议（十）讲：构建PUBACK报文</strong></p><p>了解MQTT协议底层报文构成，手把手带你构建PUBACK报文</p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-阿里云创建设备"><a href="#1-阿里云创建设备" class="headerlink" title="1.阿里云创建设备"></a>1.阿里云创建设备</h3><p>已在阿里云上创建了一个设备，设备三元组为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"ProductKey"</span>: <span class="string">"a1GOQO9ZBek"</span>,</span><br><span class="line">   <span class="string">"DeviceName"</span>: <span class="string">"191106"</span>,</span><br><span class="line">   <span class="string">"DeviceSecret"</span>: <span class="string">"wWo0xItypjQzrJQFlLpiITBjOGJhSLWE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-网络调试助手的使用"><a href="#2-网络调试助手的使用" class="headerlink" title="2.网络调试助手的使用"></a>2.网络调试助手的使用</h3><p>MQTT协议的所有报文均是16进制表示，故需要进制转换，进制转换工具可以直接使用网络调试助手，即可转换为16进制，并得到转换数据的大小，操作如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221708.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221925.png" alt=""></p><ul><li><p>输入需要转换的数据时，结束的地方不能多有空格，否则转换过后的数据也会包含空格，导致出错</p></li><li><p>发送完成一次数据之后记得复位计数（右下角），且把按十六进制发送的√取消掉再进行下一次数据转换，否则会数据累加，导致出错</p></li></ul><h2 id="二、PUBACK-（发布收到）报文"><a href="#二、PUBACK-（发布收到）报文" class="headerlink" title="二、PUBACK （发布收到）报文"></a>二、PUBACK （发布收到）报文</h2><p>PUBACK 报文是对 QoS 1 等级的 PUBLISH 报文的响应，即只有当PUBLISH发布QoS 1 等级的消息时，服务器才会发出对应的响应报文</p><h3 id="1-固定报头"><a href="#1-固定报头" class="headerlink" title="1.固定报头"></a>1.固定报头</h3><p>根据MQTT协议手册说明，MQTT协议的 PUBACK 报文的固定报头数据如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200723212811.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200723212841.png" alt=""></p><p>故<strong>MQTT协议的 PUBACK 报文的固定报头为：40 02</strong></p><h3 id="2-可变报头"><a href="#2-可变报头" class="headerlink" title="2.可变报头"></a>2.可变报头</h3><p>根据MQTT协议手册说明，MQTT协议的 PUBACK 报文的可变报头如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200723213944.png" alt=""></p><p>MQTT协议的 PUBACK 报文的可变报头为包含等待确认的 PUBLISH 报文的报文标识符，PUBLISH 报文的报文标识符即类似我们的身份证一样，如其名字一样，起到标识的作用，我们可以自定义PUBLISH 报文的报文标识符</p><h3 id="2-有效载荷"><a href="#2-有效载荷" class="headerlink" title="2.有效载荷"></a>2.有效载荷</h3><p>根据MQTT协议手册说明，PUBACK 报文没有有效载荷</p><h2 id="四、测试报文"><a href="#四、测试报文" class="headerlink" title="四、测试报文"></a>四、测试报文</h2><h3 id="1-构建QoS-1的PUBLISH-报文"><a href="#1-构建QoS-1的PUBLISH-报文" class="headerlink" title="1.构建QoS 1的PUBLISH 报文"></a>1.构建QoS 1的PUBLISH 报文</h3><p>PUBACK 报文是对 QoS 1 等级的 PUBLISH 报文的响应，故需要构造一个QoS 1 等级的 PUBLISH 报文，有构造QoS 0的PUBLISH 报文基础，在构建好的报文基础上，做简单修改即可得到QoS 1的PUBLISH 报文</p><p>在 物联网–MQTT协议（九）：构建PUBLISH报文 中构建的QoS 0的PUBLISH 报文为：30 8F 01 00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</p><p>根据MQTT协议手册，从QoS 0的PUBLISH 报文变更为QoS 1的PUBLISH 报文只需更改三个地方</p><ul><li><p>QoS 1的PUBLISH 报文固定报头为 32，将QoS 0的PUBLISH 报文中的首字节30改为32</p></li><li><p>QoS 1的PUBLISH 报文相比QoS 0的PUBLISH 报文在主题名之后增加了报文标识符，报文标识符占2个字节，假定该条报文的报文标识符为 00 01（注意：虽然可变报头添加了2个字节的报文标识符，但可变报头的长度不用更改，即此处报文标识符不计算入可变报头的字段大小）</p></li><li><p>重新计算剩余长度，由于添加了2个字节的报文标识符，故QoS 1的PUBLISH 报文相比QoS 0的PUBLISH 报文剩余长度多了2个字节，所以剩余长度由由8F 01变为91 01</p></li></ul><p>通过上面三步，得到<strong>QoS 1的PUBLISH 报文：32 91 01 00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 00 01 7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</strong></p><h3 id="2-测试PUBACK报文"><a href="#2-测试PUBACK报文" class="headerlink" title="2.测试PUBACK报文"></a>2.测试PUBACK报文</h3><p>使用网络调试助手，发送CONNECT报文，再发送构建的QoS 1的PUBLISH 报文</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200723222420.png" alt=""></p><p>网络调试助手接收到的服务器响应报文：40 02 00 01 ，其中40 02为PUBACK 报文的固定报头，00 01为QoS 1的PUBLISH 报文的报文标识符</p><p>到本节为止，分别介绍了构造CONNECT、CONNACK、DISCONNECT、PINGREQ、PINGRESP、SUBSCRIBE、SUBACK、UNSUBSCRIBE、UNSUBACK、PUBLISH、 PUBACK共11个报文</p><p>剩下的PUBREC（发布收到，QoS 2支持）、PUBREL（发布释放，QoS 2支持）、PUBCOMP（发布完成，QoS 2支持）共3个报文由于阿里云不支持，故不再做介绍，有兴趣可以用其他支持的服务器做测试，相信看完这11个报文的构建过程，对MQTT报文构建的步骤操作也是行云流水了</p><p>本系列MQTT协议解析、报文构造到这就结束了，由于知识量有限，若有错误的地方恳请大家指正，共同进步</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网–MQTT协议（十）讲：构建PUBACK报文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解MQTT协议底层报文构成，手把手带你构建PUBACK报文&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>物联网-MQTT协议第九讲：构建PUBLISH报文</title>
    <link href="https://nanfeng-iot.cn/2020/07/23/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E4%B9%9D%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAPUBLISH%E6%8A%A5%E6%96%87/"/>
    <id>https://nanfeng-iot.cn/2020/07/23/%E7%89%A9%E8%81%94%E7%BD%91-MQTT%E5%8D%8F%E8%AE%AE%E7%AC%AC%E4%B9%9D%E8%AE%B2%EF%BC%9A%E6%9E%84%E5%BB%BAPUBLISH%E6%8A%A5%E6%96%87/</id>
    <published>2020-07-23T13:18:50.409Z</published>
    <updated>2020-07-30T14:15:42.063Z</updated>
    
    <content type="html"><![CDATA[<p>了解MQTT协议底层报文构成，手把手带你构建PUBLISH报文</p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-阿里云创建设备"><a href="#1-阿里云创建设备" class="headerlink" title="1.阿里云创建设备"></a>1.阿里云创建设备</h3><p>已在阿里云上创建了一个设备，设备三元组为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"ProductKey"</span>: <span class="string">"a1GOQO9ZBek"</span>,</span><br><span class="line">   <span class="string">"DeviceName"</span>: <span class="string">"191106"</span>,</span><br><span class="line">   <span class="string">"DeviceSecret"</span>: <span class="string">"wWo0xItypjQzrJQFlLpiITBjOGJhSLWE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-网络调试助手的使用"><a href="#2-网络调试助手的使用" class="headerlink" title="2.网络调试助手的使用"></a>2.网络调试助手的使用</h3><p>MQTT协议的所有报文均是16进制表示，故需要进制转换，进制转换工具可以直接使用网络调试助手，即可转换为16进制，并得到转换数据的大小，操作如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221708.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20191109221925.png" alt=""></p><ul><li><p>输入需要转换的数据时，结束的地方不能多有空格，否则转换过后的数据也会包含空格，导致出错</p></li><li><p>发送完成一次数据之后记得复位计数（右下角），且把按十六进制发送的√取消掉再进行下一次数据转换，否则会数据累加，导致出错</p><h3 id="3-阿里云产品添加功能定义"><a href="#3-阿里云产品添加功能定义" class="headerlink" title="3.阿里云产品添加功能定义"></a>3.阿里云产品添加功能定义</h3></li></ul><p>登录阿里云物联网平台，找到本项目创建的产品，进入产品详情界面</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721222702.png" alt=""></p><p>根据自己需求添加产品功能（此处若我们选择上传当前的室内人数，可自己定义）</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721223025.png" alt=""></p><p>完成之后确认，点击发布上线，即可在页面上看到我们刚添加的产品功能</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721223252.png" alt=""></p><h3 id="4-获取设备的发布主题"><a href="#4-获取设备的发布主题" class="headerlink" title="4.获取设备的发布主题"></a>4.获取设备的发布主题</h3><p>登录阿里云物联网平台，找到本项目创建的产品，进入产品详情界面</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721224018.png" alt=""></p><p>将 /sys/a1GOQO9ZBek/${deviceName}/thing/event/property/post 中的 ${deviceName} 修改为我们本次项目创建的设备，即得到设备的发布主题：/sys/a1GOQO9ZBek/191106/thing/event/property/post</p><h2 id="二、PUBLISH（发布消息）报文"><a href="#二、PUBLISH（发布消息）报文" class="headerlink" title="二、PUBLISH（发布消息）报文"></a>二、PUBLISH（发布消息）报文</h2><p>PUBLISH（发布消息）报文就是指从客户端向服务端或者服务端向客户端传输一个应用消息，PUBLISH 报文由固定报头、可变报头、有限负载组成。本节将在已连接上阿里云的基础上通过PUBLISH发送数据到阿里云。</p><h3 id="1-固定报头"><a href="#1-固定报头" class="headerlink" title="1.固定报头"></a>1.固定报头</h3><p>MQTT协议的 PUBLISH 报文的固定报头数据如下：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721215210.png" alt=""></p><p>MQTT协议规定，对于 QoS0 的消息， DUP 标志必须设置为 0，此处我们发送的数据为 QoS 0的服务器消息，故QoS及DUP均为0，设置RETAIN（保留标志位）为0，服务端不存储这个消息也不移除或替换任何现存的保留消息，剩余长度的值暂定为：XX</p><p>故<strong>MQTT协议的 PUBLISH 报文固定报头为：30 XX</strong></p><h3 id="2-可变报头"><a href="#2-可变报头" class="headerlink" title="2.可变报头"></a>2.可变报头</h3><p>MQTT协议的 PUBLISH 报文的可变报头按顺序包含主题名和报文标识符</p><p>MQTT协议手册给的一个案例（示例中的主题名为 “a/b”， 长度等于 3， 报文标识符为 “10”）：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200721221510.png" alt=""></p><p>主题名（Topic Name） 用于识别有效载荷数据应该被发布到哪一个信息通道，即云端的设备发布主题，根据</p><p>而对于报文标识符，MQTT协议规定，只有当 QoS 等级是 1 或 2 时，报文标识符（Packet Identifier） 字段才能出现在 PUBLISH 报文中，故我们的可变报头中只包含主题名</p><p>设备的发布主题为：/sys/a1GOQO9ZBek/191106/thing/event/property/post，转换为16进制为：2F 73 79 73<br>2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74，长度为49个字节，将49转换为16进制为31</p><p>得到<strong>MQTT协议的 PUBLISH 报文可变报头为：00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74</strong></p><h2 id="3-解析云端下发数据"><a href="#3-解析云端下发数据" class="headerlink" title="3.解析云端下发数据"></a>3.解析云端下发数据</h2><p>MQTT协议的 PUBLISH 报文的有效载荷包含将被发布的应用消息，数据的内容和格式是应用特定的。由于我们不知道阿里云发送数据的具体格式，故我们可以通过参考阿里云下发的数据格式，从而得到发送数据到阿里云的有效载荷格式</p><p>使用网络调试助手，在通过CONNECT报文连接上阿里云之后，用SUBSCRIBE报文订阅服务器的主题topic,就能收到从服务器下发的数据</p><ul><li>CONNECT报文连接上阿里云</li><li>SUBSCRIBE报文订阅服务器主题</li><li>阿里云下发数据</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722222956.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722222459.png" alt=""></p><p>从网络调试助手看到，接收到的服务器下发的数据为：30 90 01 00 32 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 7B 22 6D 65 74 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 36 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</p><ul><li>根据MQTT协议，对这一长串的16进制数进行解析，计算得到长度为147，除去固定报头之后长度大于127，根据MQTT协议的 剩余长度字段大小的表示方法，知道大于长度127的字段用两个字节表示</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722231103.png" alt=""></p><ul><li><p>故该数据的固定报头为：30 90 01</p></li><li><p>00 32 为可变报头的长度，32转换为10进制为50，说明可变报头有50个字节，从00 32开始，取50个字节数据，得到该数据可变报头：2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 7B 22 6D 65 74，通过网络调试助手转换为字符：/sys/a1GOQO9ZBek/191106/thing/service/property/set，即是使用SUBSCRIBE报文订阅的主题</p></li><li><p>除去固定报头，可变报头，剩下部分即为有效载荷：7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 36 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D，通过网络调试助手转换为字符格式：{“mehod”:”thing.service.property.set”,”id”:”85157687”,”params”:{“num”:6},”version”:”1.0.0”}，该字符串即为发送数据到阿里云的有效载荷格式，我们只需要将{“num”:6}里面的标识符和值更换为我们所需要传输的数据</p></li></ul><h3 id="3-有效负载"><a href="#3-有效负载" class="headerlink" title="3.有效负载"></a>3.有效负载</h3><p>MQTT协议的 PUBLISH 报文的有效载荷包含将被发布的应用消息，根据上文，有效载荷的格式为：{“mehod”:”thing.service.property.set”,”id”:”85157687”,”params”:{“num”:6},”version”:”1.0.0”}</p><p>假设我们需要传输的数据标识符为num，值为99，则有效载荷为：{“mehod”:”thing.service.property.set”,”id”:”85157687”,”params”:{“num”:99},”version”:”1.0.0”}</p><p>将有效载荷转换为16进制，即可得到<strong>MQTT协议的 PUBLISH 报文的有效载荷：7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</strong></p><h3 id="4-计算剩余长度"><a href="#4-计算剩余长度" class="headerlink" title="4.计算剩余长度"></a>4.计算剩余长度</h3><p>根据上文，得到构造的PUBLISH 报文：30 XX 00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D （XX表示剩余长度）</p><p>计算XX后面数据的字节大小，共占143个字节，大于128个字节，根据MQTT协议的 剩余长度字段大小的表示方法，应该用两个字节表示剩余长度字段大小，143减128为15，将15转换为16进制为0F（0000 1111）,根据协议规定的剩余长度字段大小表示法，剩余长度的大小为8F 01（1000 1111 0000 0001）</p><p>故完整的<strong>PUBLISH 报文为：30 8F 01 00 31 2F 73 79 73 2F 61 31 47 4F 51 4F 39 5A 42 65 6B 2F 31 39 31 31 30 36 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 68 6F 64 22 3A 22 74 68 69 6E 67 2E 73 65 72 76 69 63 65 2E 70 72 6F 70 65 72 74 79 2E 73 65 74 22 2C 22 69 64 22 3A 22 38 35 31 35 37 36 38 37 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 6E 75 6D 22 3A 39 39 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D</strong></p><h2 id="四、测试报文"><a href="#四、测试报文" class="headerlink" title="四、测试报文"></a>四、测试报文</h2><p>网络调试助手中发送 物联网–MQTT协议(四)：构建CONNECT报文构建 中构建好的CONECT报文，可以看到返回：20 02 00 00，说明CONNECT连接被服务端接受，连接上云端设备，再发送构建好的PUBLISH报文，若TCP Client没有断开连接，则证明构建的报文没有错误</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722233607.png" alt=""></p><p>在阿里云物联网平台设备详情界面能看到网络调试助手发送的数据<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200722233924.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解MQTT协议底层报文构成，手把手带你构建PUBLISH报文&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VS-Code终端无法输入问题</title>
    <link href="https://nanfeng-iot.cn/2020/07/08/VS-Code%E7%BB%88%E7%AB%AF%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://nanfeng-iot.cn/2020/07/08/VS-Code%E7%BB%88%E7%AB%AF%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-08T13:50:18.788Z</published>
    <updated>2020-07-08T14:59:57.793Z</updated>
    
    <content type="html"><![CDATA[<p><strong>小技巧解决VS Code终端无法输入的问题</strong></p><a id="more"></a><h2 id="1-问题表述"><a href="#1-问题表述" class="headerlink" title="1 问题表述"></a>1 问题表述</h2><p>刚开始使用VS Code，敲完helloword程序，打开终端，准备输入gcc编译命令，确发现终端不能输入，也为显示路径，如下图所示：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708220914.png" alt=""></p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h2><ul><li>关闭VS Code ,右键单击VS Code 图标，选择属性-&gt;兼容性，取消勾选 已兼容模式运行这个程序</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708221240.png" alt=""></p><ul><li>选择属性-&gt;快捷方式，在目标的框 “ 后面加 –disable-gpu；注意：”与–disable-gpu应该加一个空格，否则会报错</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708221458.png" alt="报错信息"></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708221625.png" alt=""></p><ul><li>再次打开 VS Code ,终端正常，常显示路径且能正常输入</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200708221840.png" alt=""></p><h2 id="3-不懂就问"><a href="#3-不懂就问" class="headerlink" title="3 不懂就问"></a>3 不懂就问</h2><p>刚开始遇到问题的时候百度了下，尝试了一些网友的办法，最终使用这个方法最有效，查询了下–disable-gpu是禁用 GPU 硬件加速（禁用 GPU 加速，可以节约显存空间）的意思</p><p>为什么在属性的目标中加入这个指令即可解决vs Code终端无法输入的问题，原理是什么呢，两者之间什么联系，这我也没弄懂，大家有知道的希望留言给我解答解答疑惑</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;小技巧解决VS Code终端无法输入的问题&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EC20连接私有云进行数据收发</title>
    <link href="https://nanfeng-iot.cn/2020/07/04/EC20%E8%BF%9E%E6%8E%A5%E7%A7%81%E6%9C%89%E4%BA%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91/"/>
    <id>https://nanfeng-iot.cn/2020/07/04/EC20%E8%BF%9E%E6%8E%A5%E7%A7%81%E6%9C%89%E4%BA%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91/</id>
    <published>2020-07-04T00:58:21.417Z</published>
    <updated>2020-07-04T02:14:42.292Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网产品框架:传统设备使用通信模组连接云服务器(即上云)做数据收发</strong></p><p>在之前的文章 物联网基础：EC20 连接阿里云进行数据收发 已经介绍过EC20模块并用AT指令测试EC20连接阿里云进行数据收发，本文将使用EC20 封装好的AT指令通过 MQTT 协议连接私有云服务器进行数据</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><p>要连接私有云服务器，需有一个私有云服务器的mqtt客户端账号，笔者就用公司服务器的MQTT测试账号做演示，后续涉及到账号密码相关部分打码，望理解</p><p>服务器地址及mqtt相关信息：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630104047.png" alt=""></p><h3 id="2-MQTT工具连接服务器"><a href="#2-MQTT工具连接服务器" class="headerlink" title="2 MQTT工具连接服务器"></a>2 MQTT工具连接服务器</h3><p>使用MQTT工具 MQTTBox模拟务器，订阅设备的发布主题，即能接收到设备发送到服务器的数据，也能模拟向设备下发数据</p><p>安装MQTTBox，填写服务器及设备MQTT的相关信息即能连接上服务器</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630105538.png" alt=""></p><p>再订阅设备的发布主题，即可接收到设备往服务器发送的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630105920.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630110234.png" alt=""></p><h2 id="3-连接测试"><a href="#3-连接测试" class="headerlink" title="3 连接测试"></a>3 连接测试</h2><p>使用串口调试助手，选择 USB AT Port端口，并对串口调试助手做简单设置</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629144357.png" alt=""></p><h3 id="3-1-AT指令连接云服务器："><a href="#3-1-AT指令连接云服务器：" class="headerlink" title="3.1 AT指令连接云服务器："></a>3.1 AT指令连接云服务器：</h3><p>AT指令连接私有云服务器过程：</p><p>1)AT指令入网、模块测试</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT</td><td align="left">测试指令，若返回OK，则模块可正常通信</td></tr><tr><td align="left">2</td><td align="left">AT+CPIN?</td><td align="left">检查SIM卡是否在位</td></tr><tr><td align="left">3</td><td align="left">AT+CSQ</td><td align="left">查询信号质量</td></tr><tr><td align="left">4</td><td align="left">AT+CREG?</td><td align="left">查询入网状态</td></tr><tr><td align="left">5</td><td align="left">AT+CGATT=1</td><td align="left">激活网络</td></tr><tr><td align="left">6</td><td align="left">AT+CGATT?</td><td align="left">查询激活状态</td></tr><tr><td align="left">7</td><td align="left">AT+CGPADDR</td><td align="left">获取PDP地址</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629165856.png" alt=""></p><p>2）AT指令连接服务器</p><p>注意：测试时需将服务器地址信息及MQTT账号信息替换成自己的账户信息</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTCFG=”recv/mode”,0,0,1</td><td align="left">配置为接收模式</td></tr><tr><td align="left">2</td><td align="left">AT+QMTOPEN=0,”IP”,Port</td><td align="left">连接服务器</td></tr><tr><td align="left">3</td><td align="left">AT+QMTCONN=0,”Clientid”,”Username”,”Password”</td><td align="left">配置MQTT连接</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630111342.png" alt=""></p><h3 id="3-2-发送数据"><a href="#3-2-发送数据" class="headerlink" title="3.2 发送数据"></a>3.2 发送数据</h3><p>AT指令发送数据的过程如下：</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTPUB=0,0,0,0,”PubTopic”</td><td align="left">发布主题消息</td></tr><tr><td align="left">2</td><td align="left">{params:{IndoorTemperature:55,mhumi:55}}</td><td align="left">发送的JSON数据</td></tr><tr><td align="left">3</td><td align="left">0x1a</td><td align="left">数据结束符</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630111646.png" alt=""></p><p>此时，可在MQTTBox数据接收区查看EC20往服务器发送的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630111825.png" alt=""></p><h3 id="3-3-接收数据"><a href="#3-3-接收数据" class="headerlink" title="3.3 接收数据"></a>3.3 接收数据</h3><p>AT指令接收服务器数据指令如下：</p><p>EC20接收服务器下发的数据只需要订阅服务器的发布主题，即设备订阅主题：gt/test/gt_1 即能接收到服务器下发的数据</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTSUB=0,1,”gt/test/gt_1”,0</td><td align="left">订阅服务器发布主题</td></tr></tbody></table><p>使用MQTTBox工具模拟服务器下发数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630112229.png" alt=""></p><p>在本地串口调试助手数据接收区就能收到对应的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630112521.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，点赞、在看也是笔者坚持的动力；扫码关注公众号，后台回复 EC20模块获取EC20全套资料</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网产品框架:传统设备使用通信模组连接云服务器(即上云)做数据收发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在之前的文章 物联网基础：EC20 连接阿里云进行数据收发 已经介绍过EC20模块并用AT指令测试EC20连接阿里云进行数据收发，本文将使用EC20 封装好的AT指令通过 MQTT 协议连接私有云服务器进行数据&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EC20固件升级</title>
    <link href="https://nanfeng-iot.cn/2020/07/04/EC20%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7/"/>
    <id>https://nanfeng-iot.cn/2020/07/04/EC20%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7/</id>
    <published>2020-07-04T00:58:21.401Z</published>
    <updated>2020-07-04T02:14:42.319Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用移远 QFlash_V4.14 工具升级移远 EC20 4G模块固件</strong></p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><h3 id="1-1-EC20-USB驱动安装"><a href="#1-1-EC20-USB驱动安装" class="headerlink" title="1.1 EC20 USB驱动安装"></a>1.1 EC20 USB驱动安装</h3><p>安装过程参考移远官方手册：《Quectel_LTE&amp;5G_Windows_USB_Driver_安装指导_V1.0.pdf》，有详细USB安装指导，该手册及驱动文件可以去移远官方下载或后续在公众号下载</p><p>驱动安装成功后，在电脑的设备管理器界面可以看到三个虚拟串口，如下所示：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200623113903.png" alt=""></p><h3 id="1-2-QFlash-V4-14工具及固件包"><a href="#1-2-QFlash-V4-14工具及固件包" class="headerlink" title="1.2 QFlash_V4.14工具及固件包"></a>1.2 QFlash_V4.14工具及固件包</h3><p>QFlash_V4.14可在移远官网下载，也可后续在公众号下载</p><p>相关版本固件包向移远FAE技术支持工程师咨询索要，这里提供A08、A15版本做测试，后续在公众号下载</p><p>注意：QFlash_V4.14和固件包的路径最好别包含中文</p><h2 id="2-固件升级"><a href="#2-固件升级" class="headerlink" title="2 固件升级"></a>2 固件升级</h2><h3 id="2-1-QFlash-V4-14介绍"><a href="#2-1-QFlash-V4-14介绍" class="headerlink" title="2.1 QFlash_V4.14介绍"></a>2.1 QFlash_V4.14介绍</h3><p>QFlash_V4.14不需要安装，解压即可使用，解压后，有两个文件，一个是QFlash_V4.14，一个是QFlash_V4.14用户手册</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630114621.png" alt=""></p><p>QFlash_V4.14图标</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630114819.png" alt=""></p><p>QFlash_V4.14界面</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630114911.png" alt=""></p><h3 id="2-2-选择固件升级串口"><a href="#2-2-选择固件升级串口" class="headerlink" title="2.2 选择固件升级串口"></a>2.2 选择固件升级串口</h3><p>在EC20 USB驱动安装成功后，会有三个串口，固件升级应选择 USB DM port 这一个串口，我的设备USB DM port为COM9</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630115403.png" alt=""></p><p>使用串口调试助手，发送AT指令：AT+ATI 查看固件版本，固件版本为A08</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630145038.png" alt=""></p><h3 id="2-3-加载固件文件"><a href="#2-3-加载固件文件" class="headerlink" title="2.3 加载固件文件"></a>2.3 加载固件文件</h3><p>以A15固件包为例，将固件包解压，需要升级的固件为固件包的 EC20CEFAGR06A15M4G\update\firehose 目录下 prog_nand_firehose_9x07.mbn 文件</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630115930.png" alt=""></p><h3 id="2-4-升级固件"><a href="#2-4-升级固件" class="headerlink" title="2.4 升级固件"></a>2.4 升级固件</h3><p>波特率选择460800，点击Start开始升级固件</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630134444.png" alt=""></p><p>固件升级过程（随机截取）</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630134540.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630134547.png" alt=""></p><p>固件升级完成</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630134728.png" alt=""></p><p>使用串口调试助手，发送AT指令：AT+ATI 查看固件版本，固件版本已更新为A15</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630135033.png" alt=""></p><h2 id="3-异常问题总结"><a href="#3-异常问题总结" class="headerlink" title="3 异常问题总结"></a>3 异常问题总结</h2><h3 id="3-1-串口选择错误"><a href="#3-1-串口选择错误" class="headerlink" title="3.1 串口选择错误"></a>3.1 串口选择错误</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为串口选择错误，重新选择 USB DM port 做固件升级 </p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630135828.png" alt=""></p><h3 id="3-2-串口被占用"><a href="#3-2-串口被占用" class="headerlink" title="3.2 串口被占用"></a>3.2 串口被占用</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为所选串口被占用，检查将占用该串口的软件关闭</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630140251.png" alt=""></p><h3 id="3-3-波特率不支持"><a href="#3-3-波特率不支持" class="headerlink" title="3.3 波特率不支持"></a>3.3 波特率不支持</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为选择的波特率不支持，重新选择波特率460800</p><p>![](<a href="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14" target="_blank" rel="noopener">https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14</a> 20200630143041.png)</p><h3 id="3-3-固件文件无效"><a href="#3-3-固件文件无效" class="headerlink" title="3.3 固件文件无效"></a>3.3 固件文件无效</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为固件文件无效，重新核对选择固件升级文件</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630141048.png" alt=""></p><h3 id="3-4-电源异常"><a href="#3-4-电源异常" class="headerlink" title="3.4 电源异常"></a>3.4 电源异常</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为电源异常，检查模块供电电源</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630141249.png" alt=""></p><h3 id="3-5-串口连接异常"><a href="#3-5-串口连接异常" class="headerlink" title="3.5 串口连接异常"></a>3.5 串口连接异常</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为串口连接异常，检查模块与电脑之间的串口连接</p><p><img src="https://static01.imgkr.com/temp/e886375f4bc745b7b862295b9073bf08.png" alt=""></p><h3 id="3-6-超时错误"><a href="#3-6-超时错误" class="headerlink" title="3.6 超时错误"></a>3.6 超时错误</h3><p>固件升级过程中若出现如下所示的错误提示，则产生错误的原因为超时，再次尝试更新固件步骤</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200630143354.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，点赞、在看也是笔者坚持的动力；扫码关注公众号，后台回复 EC20固件升级获取本文固件升级资料</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;使用移远 QFlash_V4.14 工具升级移远 EC20 4G模块固件&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EC20连接阿里云进行数据收发</title>
    <link href="https://nanfeng-iot.cn/2020/06/29/EC20%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91/"/>
    <id>https://nanfeng-iot.cn/2020/06/29/EC20%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91/</id>
    <published>2020-06-29T14:45:42.269Z</published>
    <updated>2020-06-29T14:49:08.291Z</updated>
    
    <content type="html"><![CDATA[<p><strong>物联网产品框架:传统设备使用通信模组连接云服务器(即上云)做数据收发。本文将使用EC20 封装好的AT指令通过 MQTT 协议连接阿里云，简单的介绍下移远4G通信模块 EC20 是如何连接服务器进行数据收发</strong></p><a id="more"></a><h2 id="1-关于EC20模块"><a href="#1-关于EC20模块" class="headerlink" title="1 关于EC20模块"></a>1 关于EC20模块</h2><h3 id="1-1-EC20概述"><a href="#1-1-EC20概述" class="headerlink" title="1.1 EC20概述"></a>1.1 EC20概述</h3><p>EC20 R2.1 是移远通信推出的 LTE Cat 4 无线通信模块，采用 LTE 3GPP Rel.11 技术，支持最大下行速率 150Mbps 和最大上行速率 50Mbps；同时在封装上兼容移远通信 UMTS/HSPA+ UC20 模块以及多网络制式 LTE EC20/EC21/EC25/EG25-G 模块，实现了3G网络与4G网络之间的无缝切换。</p><p>EC20 R2.1 内置多星座高精度定位 GNSS（GPS/GLONASS/BeiDou/Galileo/QZSS）接收机；在简化产品设计的同时，还大大提升了定位速度及精度。</p><p>EC20 R2.1 内置丰富的网络协议，集成多个工业标准接口，并支持多种驱动和软件功能（适用于 Windows 7/8/8.1/10，Linux，Android 等操作系统下的 USB 驱动、eCall* 等），极大地拓展了 EC20 R2.1 在 M2M 领域的应用范围，如 CPE、路由器、数据卡、平板电脑、车载、安防以及工业级 PDA 等。</p><h3 id="1-2-EC20优势"><a href="#1-2-EC20优势" class="headerlink" title="1.2 EC20优势"></a>1.2 EC20优势</h3><ul><li><p>专为 M2M 和 IoT 应用而设计的 LTE Cat 4 无线模块</p></li><li><p>各网络制式的全面覆盖</p></li><li><p>集成多星座 GNSS 接收机，满足不同环境下对快速、精准定位的需求</p></li><li><p>支持 DFOTA、eCall* 和 DTMF 功能</p></li><li><p>MIMO 技术满足无线通信系统对数据速率和连接可靠性的要求</p></li></ul><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h2><h3 id="2-1-EC20-USB驱动安装"><a href="#2-1-EC20-USB驱动安装" class="headerlink" title="2.1 EC20 USB驱动安装"></a>2.1 EC20 USB驱动安装</h3><p>安装过程参考移远官方手册：《Quectel_LTE&amp;5G_Windows_USB_Driver_安装指导_V1.0.pdf》，有详细USB安装指导，该手册及驱动文件可以去移远官方下载或后续在公众号下载</p><p>驱动安装成功后，在电脑的设备管理器界面可以看到三个虚拟串口，如下所示：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200623113903.png" alt=""></p><h3 id="2-2-阿里云创建设备"><a href="#2-2-阿里云创建设备" class="headerlink" title="2.2 阿里云创建设备"></a>2.2 阿里云创建设备</h3><p>登录阿里云物联网平台：<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fiot.console.aliyun.com%2Fquick_start" target="_blank" rel="noopener">https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fiot.console.aliyun.com%2Fquick_start</a></p><p>创建产品，填写产品相关信息:</p><p><img src="https://static01.imgkr.com/temp/b6757daa9e2049bf9e79fd9923929a07.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200623155724.png" alt=""></p><p>产品功能定义<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200628170023.png" alt=""></p><p>再自定义一个标识符用作数据下发，且发布上线：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629183824.png" alt=""></p><p>创建设备：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200628165251.png" alt=""></p><p>得到设备的三元组信息：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200628165607.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">三元组信息：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"ProductKey"</span>: <span class="string">"a1ciEJx0Tqx"</span>,</span><br><span class="line">  <span class="string">"DeviceName"</span>: <span class="string">"test01"</span>,</span><br><span class="line">  <span class="string">"DeviceSecret"</span>: <span class="string">"2a202572cf9ab480ee012ae103cca21d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看设备的Topic信息:<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629143703.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设备Topic：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"发布主题"</span>: <span class="string">"/sys/a1ciEJx0Tqx/test01/thing/event/property/post"</span></span><br><span class="line">  <span class="string">"订阅主题"</span>: <span class="string">"/sys/a1ciEJx0Tqx/test01/thing/service/property/set"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-连接阿里云"><a href="#2-连接阿里云" class="headerlink" title="2 连接阿里云"></a>2 连接阿里云</h2><p>使用串口调试助手，选择 USB AT Port端口，并对串口调试助手做简单设置</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629144357.png" alt=""></p><h3 id="2-1-AT指令连接阿里云："><a href="#2-1-AT指令连接阿里云：" class="headerlink" title="2.1 AT指令连接阿里云："></a>2.1 AT指令连接阿里云：</h3><p>AT指令连接阿里云过程：</p><p>1)AT指令入网、模块测试</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT</td><td align="left">测试指令，若返回OK，则模块可正常通信</td></tr><tr><td align="left">2</td><td align="left">AT+CPIN?</td><td align="left">检查SIM卡是否在位</td></tr><tr><td align="left">3</td><td align="left">AT+CSQ</td><td align="left">查询信号质量</td></tr><tr><td align="left">4</td><td align="left">AT+CREG?</td><td align="left">查询入网状态</td></tr><tr><td align="left">5</td><td align="left">AT+CGATT=1</td><td align="left">激活网络</td></tr><tr><td align="left">6</td><td align="left">AT+CGATT?</td><td align="left">查询激活状态</td></tr><tr><td align="left">7</td><td align="left">AT+CGPADDR</td><td align="left">获取PDP地址</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629165856.png" alt=""></p><p>2）AT指令连接阿里云服务器<br>| 序号   | AT指令 | 指令解析  |<br>| :—– | :– | :—— |<br>| 1 |  AT+QMTCFG=”recv/mode”,0,0,1  | 配置为接收模式 |<br>| 2 |  AT+QMTCFG=”aliauth”,0,”ProductKey”,”DeviceName”,”DeviceSecret”  | 配置阿里云上的设备信息 |<br>| 3|  AT+QMTOPEN=0,”iot-as-mqtt.cn-shanghai.aliyuncs.com”,1883  | 打开一个MQTT客户端网络 |<br>| 4|  AT+QMTCONN=0,”DeviceName”  | 连接MQTT服务器 |</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629170333.png" alt=""></p><p>此时可在阿里云物联网平台看到设备 test01 的状态已由未激活转为在线状态</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629170523.png" alt=""></p><p>注意将AT指令里面的三元组信息替换给自己设备的三元组，AT指令详细的参数解析可参考移远的AT指令手册：《Quectel_EC20_R2.1_AT_Commands_Manual_V1.0.pdf》、《Quectel_EC2x&amp;EG9x&amp;EM05_TCP(IP)_AT_Commands_Manual_V1.0.pdf》、《Quectel_EC20_R2.1_AT_Commands_Manual_V1.0.pdf》，AT指令手册可在移远官方下载，也可在公众号后台回复 EC20模块获取EC20模块全套资料</p><h3 id="2-2-发送数据"><a href="#2-2-发送数据" class="headerlink" title="2.2 发送数据"></a>2.2 发送数据</h3><p>AT指令发送数据的过程如下：</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTPUB=0,0,0,0,”/sys/ProductKey/DeviceName/thing/event/property/post”</td><td align="left">发布主题消息</td></tr><tr><td align="left">2</td><td align="left">{params:{IndoorTemperature:27.5}}</td><td align="left">发送的JSON数据</td></tr><tr><td align="left">3</td><td align="left">1a</td><td align="left">数据结束符，需采用HEX形式发送</td></tr></tbody></table><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629171306.png" alt=""></p><p>此时，可在阿里云设备详情界面看到我们用EC20发送到阿里云的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629171709.png" alt=""></p><h3 id="2-3-接收数据"><a href="#2-3-接收数据" class="headerlink" title="2.3 接收数据"></a>2.3 接收数据</h3><p>AT指令接收服务器数据指令如下：</p><p>EC20接收服务器下发的数据只需要订阅服务器的发布主题，及设备订阅主题：/sys/a1ciEJx0Tqx/test01/thing/service/property/set 即能接收到服务器下发的数据</p><table><thead><tr><th align="left">序号</th><th align="left">AT指令</th><th align="left">指令解析</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AT+QMTSUB=0,1,”/sys/ProductKey/DeviceName/thing/service/property/set”,0</td><td align="left">订阅服务器发布主题</td></tr></tbody></table><p>当阿里云在线调试界面下发数据时，在本地串口调试助手数据接收区就能收到服务器下发的数据</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629184243.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/11.14%2020200629184412.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，点赞、在看也是笔者坚持的动力；扫码关注微信公众号，后台回复 EC20模块获取EC20全套资料</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;物联网产品框架:传统设备使用通信模组连接云服务器(即上云)做数据收发。本文将使用EC20 封装好的AT指令通过 MQTT 协议连接阿里云，简单的介绍下移远4G通信模块 EC20 是如何连接服务器进行数据收发&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Window系统命令行下cd不能切换盘符问题</title>
    <link href="https://nanfeng-iot.cn/2020/06/28/Window%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Bcd%E4%B8%8D%E8%83%BD%E5%88%87%E6%8D%A2%E7%9B%98%E7%AC%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://nanfeng-iot.cn/2020/06/28/Window%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Bcd%E4%B8%8D%E8%83%BD%E5%88%87%E6%8D%A2%E7%9B%98%E7%AC%A6%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-28T14:40:16.000Z</published>
    <updated>2020-06-28T14:42:04.707Z</updated>
    
    <content type="html"><![CDATA[<p><strong>小技巧解决Window系统命令行下 cd 不能切换盘符问题</strong></p><a id="more"></a><h2 id="1-问题表述"><a href="#1-问题表述" class="headerlink" title="1 问题表述"></a>1 问题表述</h2><p>最近在搭建EMQ服务器的时候，发现个问题，就是使用 cd 无法切换盘符，比如我在目录 E:\software 文件下打开命令行窗口，想使用 cd 命令跳到 G:\RT-Thread\at_device-master 目录，输入指令 cd G:\RT-Thread\at_device-master,发现命令行无反应，光标仍旧在原来的位置</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200628211128.png" alt=""></p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h2><p>解决方法：在 cd 和盘符之间加上 /d</p><p>输入指令 cd /d G:\RT-Thread\at_device-master，问题解决</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200628211612.png" alt=""></p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3 注意事项"></a>3 注意事项</h2><p>注意：跳转到不同盘符之间时需要加参数 /d ，但跳转到在当前盘符的子目录则可以不加参数 /d 也能跳转</p><p>比如，从G:\RT-Thread\at_device-master跳转到G:\EMQTTD\emqttd-windows7-v2.3.4：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200628212521.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;小技巧解决Window系统命令行下 cd 不能切换盘符问题&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>DIY济南大学纪念名片</title>
    <link href="https://nanfeng-iot.cn/2020/06/14/DIY%E6%B5%8E%E5%8D%97%E5%A4%A7%E5%AD%A6%E7%BA%AA%E5%BF%B5%E5%90%8D%E7%89%87/"/>
    <id>https://nanfeng-iot.cn/2020/06/14/DIY%E6%B5%8E%E5%8D%97%E5%A4%A7%E5%AD%A6%E7%BA%AA%E5%BF%B5%E5%90%8D%E7%89%87/</id>
    <published>2020-06-14T12:27:46.000Z</published>
    <updated>2020-06-14T13:20:51.779Z</updated>
    
    <content type="html"><![CDATA[<p><strong>济南大学毕业即将两周年，DIY一片NFC济南大学纪念名片，可自动添加联系人、自动连接WIFI等功能，好玩不贵，一片的成本不到5块钱，O(∩_∩)O哈哈~</strong></p><a id="more"></a><h2 id="1-样品展示"><a href="#1-样品展示" class="headerlink" title="1 样品展示"></a>1 样品展示</h2><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/B612Kaji_20200614_094307_467.jpg" alt="正面"></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/B612Kaji_20200614_094338_699.jpg" alt="背面"></p><p>正面主要就是放置济南大学校徽和校训，背面放置一个微积分公式（意思为生活就是不断的学习、进取）及程序员标配的 “hello word” 代码</p><p>也没想到什么更好的素材，就先暂时放这些，有好的素材可以考虑做第二版，大家也可以给我留言提提意见</p><h2 id="2-绘制电路PCB板"><a href="#2-绘制电路PCB板" class="headerlink" title="2 绘制电路PCB板"></a>2 绘制电路PCB板</h2><p>   绘制电路板我用的是国产 立创EDA 绘图软件，立创EDA我认为最好的一点就是不需要自己画封装，省了很多麻烦，而且在立创可以绘图，打板，买元件一条龙服务</p><p>   SchDoc如下：<br>  <img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200614100533.png" alt=""></p><p>   PcbDoc如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614100612.png" alt=""></p><p> 电路板很简单，就一个电阻、一个电容、一个LED灯，再加一个NFC射频卡芯片，五个元件就组成了这块纪念名片</p><p> 绘制完电路板后生成光绘文件，然后在嘉立创投板生产即可，嘉立创打板每个月有两次5元打板且包邮的活动，非常适合个人DIY打板</p><h2 id="3-购买元件及焊接"><a href="#3-购买元件及焊接" class="headerlink" title="3 购买元件及焊接"></a>3 购买元件及焊接</h2><p>板卡上面元件很少，我们所使用的电阻、电容、LED灯均选用0603封装，购买时需留意，本次制作样品我们只需购买47R电阻、220uF电容、贴片06.3 LED灯及NT3H1101W0FHKH射频卡芯片</p><p>这是采购5套的价格，共32.01元，主要是射频卡芯片贵了点：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614101925.png" alt=""></p><p>焊接过程挺考验焊接技术的，我焊接7片，成功了四片（其中还弄坏了一片射频卡芯片，4块多钱就没了，心疼），射频卡芯片封装小，焊接时候得用风枪吹才可以，注意风枪温度和风量</p><h2 id="4-写入标签"><a href="#4-写入标签" class="headerlink" title="4 写入标签"></a>4 写入标签</h2><p>该电子名片不需要编程，只需要用NXP 的管方软件 TagWriter 往射频卡芯片里写入你需要存储的信息即可，该芯片的容量为868个字节，所以最多只能写入868个字节的内容</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200614103138.png" alt="TagWriter"></p><p>TagWriter主页：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614103537.png" alt=""></p><p>可写入射频卡芯片的信息如下所示，可只写入一条，也可写入多条，只要不超过最大容量868字节即可</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614103428.png" alt=""></p><h3 id="4-1-写入个人名片"><a href="#4-1-写入个人名片" class="headerlink" title="4.1 写入个人名片"></a>4.1 写入个人名片</h3><p>具体写入方法可关注我公众号查看推送的视频：电子名片写入信息视频演示，视频相比文字更方便，直观</p><h3 id="4-2-写入WIFI密码"><a href="#4-2-写入WIFI密码" class="headerlink" title="4.2 写入WIFI密码"></a>4.2 写入WIFI密码</h3><p>具体写入方法可关注我公众号查看推送的视频：WIFI连接神器演示，视频相比文字更方便，直观</p><ul><li>要想实现WIFI自动连接，需修改下 TagWriter 里WIFI的默认设置，修改步骤如下：</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614185248.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614185423.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614185512.png" alt=""></p><ul><li>写入WIFI信息时有两个注意点，如下所示：</li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614190127.png" alt=""></p><h2 id="5-使用方法"><a href="#5-使用方法" class="headerlink" title="5 使用方法"></a>5 使用方法</h2><p>使用时，只需将带NFC的手机贴着名片，既能自动读取射频卡芯片里的信息，比如添加联系人、连接WIFI、连接Bluetooth等</p><h2 id="6-原理探索"><a href="#6-原理探索" class="headerlink" title="6 原理探索"></a>6 原理探索</h2><h3 id="6-1-NFC技术原理"><a href="#6-1-NFC技术原理" class="headerlink" title="6.1 NFC技术原理"></a>6.1 NFC技术原理</h3><p>支持NFC的设备可以在主动或被动模式下交换数据。在被动模式下，启动NFC通信的设备，也称为NFC发起设备(主设备)，在整个通信过程中提供射频场(RF-field)，。它可以选择106kbps、212kbps或424kbps其中一种传输速度，将数据发送到另一台设备。另一台设备称为NFC目标设备(从设备)，不必产生射频场，而使用负载调制(load modulation)技术，即可以相同的速度将数据传回发起设备。此通信机制与基于ISO14443A、MIFARE和FeliCa的非接触式智能卡兼容，因此，NFC发起设备在被动模式下，可以用相同的连接和初始化过程检测非接触式智能卡或NFC目标设备，并与之建立联系。</p><h3 id="6-2-NFC与蓝牙、红外对比"><a href="#6-2-NFC与蓝牙、红外对比" class="headerlink" title="6.2 NFC与蓝牙、红外对比"></a>6.2 NFC与蓝牙、红外对比</h3><p>和传统的近距通讯相比，近场通讯（NFC）就有天然的安全性，以及连接建立的快速性，具体对比如下表：</p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87_20200614195223.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/END%E7%AC%A6.gif" alt=""></p><blockquote><p>笔者知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，关注微信公众号：南风过境蜻蜓飞，后台回复 济南大学纪念名片 获取 电路PCB板源文件及TagWriter安装包</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E9%A1%B5%E5%B0%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;济南大学毕业即将两周年，DIY一片NFC济南大学纪念名片，可自动添加联系人、自动连接WIFI等功能，好玩不贵，一片的成本不到5块钱，O(∩_∩)O哈哈~&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【合宙4GCat.1入门教程】--AT指令连接阿里云收发数据&lt;下&gt;</title>
    <link href="https://nanfeng-iot.cn/2020/05/30/%E3%80%90%E5%90%88%E5%AE%994GCat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-AT%E6%8C%87%E4%BB%A4%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE-%E4%B8%8B/"/>
    <id>https://nanfeng-iot.cn/2020/05/30/%E3%80%90%E5%90%88%E5%AE%994GCat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-AT%E6%8C%87%E4%BB%A4%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE-%E4%B8%8B/</id>
    <published>2020-05-30T06:33:25.000Z</published>
    <updated>2020-07-04T02:14:42.327Z</updated>
    
    <content type="html"><![CDATA[<p><strong>通过使用AT指令，快速连接上云服务器进行数据收发，达到给设备联网的效果</strong></p><a id="more"></a><h2 id="1、连接阿里云"><a href="#1、连接阿里云" class="headerlink" title="1、连接阿里云"></a>1、连接阿里云</h2><p>  以下AT指令若有疑问可参考合宙的Luat 4G模块AT命令手册V4.1.6，这里对AT指令不做细致描述</p><ul><li>根据【合宙4G Cat.1入门教程】–Cat.1 AT指令连接阿里云收发数据&lt; 上 &gt; 得到的用户名和密码，分别发送以下AT指令，即可连接到阿里云<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProductKey：a1odIqpc7I7</span><br><span class="line">DeviceName：Air724UG</span><br><span class="line">DeviceSecret：wpnqLvOgVHOdEhqJ4koeVUUXbf6TEH59</span><br><span class="line">用户名（iotId）：ENkAiuMXiIS0nySaKnl6000100</span><br><span class="line">密码（iotToken）：^<span class="number">1</span>^<span class="number">1590679060769</span>^<span class="number">3</span>cebfceab74dfae</span><br></pre></td></tr></table></figure><ul><li>（1）AT+MCONFIG=”DeviceName”,”iotId”,”iotToken”，配置MQTT连接参数</li><li>（2）AT+SSLMIPSTART=”ProductKey.iot-as-mqtt.cn-shanghai.aliyuncs.com”,1883，建立连接</li><li>（3）AT+MCONNECT=1,300，建立会话，当发送（2）的AT指令返回CONNECT OK应立即发送指令建立会话，不然会被服务器踢下线</li><li>以上三个指令（注意：三个指令里面对应的参数需根据自己的项目设备做对应修改）发送完成后，在阿里云平台可以看到我们建立的设备的状态为在线，表示我们已成功使用AT指令将模块连接上阿里云<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530120418.png" alt=""></li><li>发送指令过程<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530121002.png" alt=""></li></ul></li></ul><h2 id="2、订阅主题"><a href="#2、订阅主题" class="headerlink" title="2、订阅主题"></a>2、订阅主题</h2><ul><li><p>在阿里云找到需要订阅的主题，只需订阅云端下发数据的主题即可<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530122801.png" alt=""></p></li><li><p>发送AT指令：AT+MSUB=”/sys/a1odIqpc7I7/Air724UG/thing/service/property/set”,0 ，订阅云端下发数据的主题，订阅成功则返回 SUBACK，注意主题需根据设备情况做修改</p></li><li><p>发送AT指令：AT+MQTTMSGSET=0，设置收到数据时的打印方式<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530123335.png" alt=""></p></li></ul><h2 id="3、收发数据"><a href="#3、收发数据" class="headerlink" title="3、收发数据"></a>3、收发数据</h2><h3 id="3-1-发送数据到阿里云"><a href="#3-1-发送数据到阿里云" class="headerlink" title="3.1 发送数据到阿里云"></a>3.1 发送数据到阿里云</h3><ul><li><p>在 【合宙4G Cat.1入门教程】–Cat.1 AT指令连接阿里云收发数据&lt; 上 &gt;  1.3 产品功能定义中定义了一个标识符为num，下面将会用到<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530123921.png" alt=""></p><ul><li>发送AT指令：AT+MPUB=”/sys/a1odIqpc7I7/Air724UG/thing/event/property/post”,0,0,”{“params”:{“num”:4}}”，注意主题需根据设备情况做修改<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530124914.png" alt=""></li><li>返回OK，即发送数据成功，可在阿里云看到发送的数据信息<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530125505.png" alt=""></li></ul><h3 id="3-2-阿里云下发数据"><a href="#3-2-阿里云下发数据" class="headerlink" title="3.2 阿里云下发数据"></a>3.2 阿里云下发数据</h3><ul><li>在阿里云进入，在线调试，往模块发送数据<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530125505.png" alt=""></li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530130516.png" alt=""></p><ul><li>在串口调试助手里可看到阿里云下发的数据<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200530130251.png" alt=""></li></ul></li></ul><h2 id="应用分析"><a href="#应用分析" class="headerlink" title="应用分析"></a>应用分析</h2><ul><li><p>基于模块和云端的上下行数据，即是一个简单的物联网产品框架，给设备联网，能上报数据，能接收数据，这也就是目前火爆的物联网产品的基本定义</p></li><li><p>举个简单例子：将一个温湿度传感器连接到模块，传感器采集到的温湿度数据通过Cat.1模块发送到云端，云端再做数据推送到移动端APP，即可在手机上远程查看温湿度信息</p><blockquote><p>nan-feng知识有限，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，扫码关注微信公众号，后台回复 合宙Cat.1 获取Air724UG 4G LTE开发板相关资料包</p></blockquote></li></ul><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;通过使用AT指令，快速连接上云服务器进行数据收发，达到给设备联网的效果&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【合宙4GCat.1入门教程】--AT指令连接阿里云收发数据&lt;上&gt;</title>
    <link href="https://nanfeng-iot.cn/2020/05/30/%E3%80%90%E5%90%88%E5%AE%994GCat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-AT%E6%8C%87%E4%BB%A4%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE-%E4%B8%8A/"/>
    <id>https://nanfeng-iot.cn/2020/05/30/%E3%80%90%E5%90%88%E5%AE%994GCat-1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%91-AT%E6%8C%87%E4%BB%A4%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE-%E4%B8%8A/</id>
    <published>2020-05-30T06:32:55.000Z</published>
    <updated>2020-05-30T06:38:22.141Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用AT指令，快速连接上云服务器进行数据收发，达到给设备联网的效果</strong></p><a id="more"></a><h2 id="1、阿里云创建设备"><a href="#1、阿里云创建设备" class="headerlink" title="1、阿里云创建设备"></a>1、阿里云创建设备</h2><h3 id="1-1-阿里云创建产品"><a href="#1-1-阿里云创建产品" class="headerlink" title="1.1 阿里云创建产品"></a>1.1 阿里云创建产品</h3><ul><li><p>登录阿里云，支付宝账号或淘宝账号即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阿里云物联网平台地址：https:<span class="comment">//account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fiot.console.aliyun.com%2Fquick_start</span></span><br></pre></td></tr></table></figure></li><li><p>选择设备管理-&gt;产品-&gt;创建产品<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523201149.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523201925.png" alt=""></p></li><li><p>填写相关参数：产品名称自定义，所属品类选择自定义品类，节点类型选择直连设备，联网方式为蜂窝（2G / 3G / 4G / 5G），数据方式为ICA 标准数据格式（Alink JSON），认证方式为设备密钥<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523202609.png" alt=""></p></li><li><p>成功创建设备<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523202735.png" alt=""></p><h3 id="1-2-创建设备"><a href="#1-2-创建设备" class="headerlink" title="1.2 创建设备"></a>1.2 创建设备</h3></li><li><p>在创建好的产品地下添加设备<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523202926.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523203100.png" alt=""></p></li><li><p>DeviceName自定义，不过需要注意的是同一个产品底下不能有相同的DeviceName<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523203433.png" alt=""></p></li><li><p>创建完设备之后，阿里云会自动生成设备三元组，在后续连接阿里云时会使用到<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200524072348.png" alt=""></p></li></ul><h3 id="1-3-产品功能定义"><a href="#1-3-产品功能定义" class="headerlink" title="1.3 产品功能定义"></a>1.3 产品功能定义</h3><ul><li><p>查看创建的产品<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523204133.png" alt=""></p></li><li><p>选择功能定义-&gt;编辑草稿，选择添加标注功能或添加自定义功能皆可，这里我选择添加自定义功能<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523204313.png" alt=""></p></li><li><p>填写相关参数，假如我们想通过4G Cat.1模块往阿里云上发送人数统计的数据<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523205139.png" alt=""></p></li><li><p>发布上线即可<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523205309.png" alt=""></p><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523205406.png" alt=""></p></li></ul><h2 id="2、开发板上云"><a href="#2、开发板上云" class="headerlink" title="2、开发板上云"></a>2、开发板上云</h2><h3 id="2-1-AT指令测试（自适应波特率）"><a href="#2-1-AT指令测试（自适应波特率）" class="headerlink" title="2.1 AT指令测试（自适应波特率）"></a>2.1 AT指令测试（自适应波特率）</h3><ul><li>将配套天线正常连接，且插入4G物联网卡，使用MicroUSB数据线将开发板标号UART的MicroUSB口与电脑连接，开发板开机</li><li>AT指令操作流程参考官方手册：连接阿里云AT流程说明（一机一密认证方案）</li><li>使用串口调试助手，选择开发板所的串口，波特率可为115200（模块自适应波特率），选择加回车换行，往开发板发送字符串“AT”，若返回“OK”,则可继续往下进行，否则检查错误产生原因并解决<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523210941.png" alt=""></li></ul><h3 id="2-2-查看AT固件版本"><a href="#2-2-查看AT固件版本" class="headerlink" title="2.2 查看AT固件版本"></a>2.2 查看AT固件版本</h3><ul><li>串口调试助手发送AT指令“AT+CGMR”，查询AT固件版本，根据官方手册，若版本字符串中小于409，,则该版本不支持阿里云，需要升级固件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523211534.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523211452.png" alt=""></li><li>此处开发板版本字符串为243，小于409，不支持阿里云，故需要我们升级固件</li></ul><h3 id="2-3-固件升级"><a href="#2-3-固件升级" class="headerlink" title="2.3 固件升级"></a>2.3 固件升级</h3><ul><li>使用MicroUSB数据线将开发板标号USB的MicroUSB口与电脑连接，开发板开机</li><li>打开固件下载工具，点击设备操作-&gt;720UX系列Cat1模块固件切换为AT版本</li><li>打开之后，选中USB BOOT下载，点击下载<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523233142.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523233237.png" alt=""><ul><li>按照提示进行操作，按住开发板的U_BOOT，再按下板卡上的重启按钮即开始更新固件<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523233512.png" alt=""></li><li>更新固件成功，开发板上蓝色LED灯会常亮<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523233600.png" alt=""></li><li>使用AT指令测试固件是否更新成功，串口调试助手发送AT指令“AT+CGMR”，返回的参数中版本字符串为409，表示固件已成功更新，该固件版本支持阿里云<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200523234403.png" alt=""></li></ul></li></ul><h3 id="2-4-激活数据网络"><a href="#2-4-激活数据网络" class="headerlink" title="2.4 激活数据网络"></a>2.4 激活数据网络</h3><ul><li>串口调试助手发送AT指令 AT+CGATT? ，查询是否附着基站网络， 返回+CGATT: 1 表示附着上了 GPRS 数据网络，可以继续往下操作</li><li>发送AT指令 AT+SAPBR=3,1,”CONTYPE”,”GPRS”，设置HTTP功能的承载类型，模块会返回”OK”</li><li>发送AT指令 AT+SAPBR=3,1,”APN”,”CMIOT”，设置pdp承载参数之APN，模块会返回”OK”</li><li>发送AT指令 AT+SAPBR=1,1，激活该承载的GPRS PDP上下文，模块会返回”OK”</li><li>发送AT指令 AT+SAPBR=2,1，查询下承载的状态，模块会返回一串字符串，包含三个参数，第一个参数1表示cid，第二个参数1表示已经连接，第三个参数表示模块获取的IP地址；SAPBR激活成功即第二个参数为1才可继续往下操作<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200527234903.png" alt=""></li></ul><h2 id="3、HTTP鉴权"><a href="#3、HTTP鉴权" class="headerlink" title="3、HTTP鉴权"></a>3、HTTP鉴权</h2><ul><li><p>Air724模块连接阿里云需要认证服务器， 获取到接入服务器的用户名和密码，认证方案采用一机一密</p></li><li><p>AT 交互过程如下：<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528001601.png" alt=""></p></li><li><p>截图第④部的指令“AT+HTTPDATA=98,20000”中98是出现DOWNLOAD之后所发送字符得长度，下面会有讲解怎么计算</p></li><li><p>此过程需要根据自己创建设备时的三元组构建DOWNLOAD之后需要发送的字符串（<strong>注意：发送构建的字符串的时候串口调试助手别加回车换行，即把串口调试助手右下角的加回车换行前的√取消</strong>），构建过程如下：</p></li><li><p>（1）获取设备三元组信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProductKey：a1odIqpc7I7</span><br><span class="line">DeviceName：Air724UG</span><br><span class="line">DeviceSecret：wpnqLvOgVHOdEhqJ4koeVUUXbf6TEH59</span><br></pre></td></tr></table></figure><ul><li>(2)根据合宙官方给的构造字符串格式构造，<strong>建议直接将字符串复制到txt文件里用自己创建得到的设备三元组替换复制的字符串相关部分</strong>。黄色部分为设备ProductKey；绿色部分是设备经 HmacMD5 算法加密过后的哈希值，下面会讲解其如何加密得到；蓝色部分为设备的clientId，与设备DeviceName相同即可；棕色部分为设备的DeviceName<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">productKey=XXXX&amp;sign=XXXX&amp;clientId=XXXX&amp;deviceName=XXXX</span><br></pre></td></tr></table></figure><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528233416.png" alt=""></li></ul></li><li><p>（3）构建sign，即设备经 HmacMD5 算法加密过后的哈希值，HmacMD5算法是通过秘钥给明文加密，可通过加密网站进行加密，这里nan-feng用的加密网站：<a href="http://encode.chahuo.com/。明文构建：蓝色部分为设备的clientId，与设备DeviceName相同即可；棕色部分为设备的DeviceName；黄色部分为设备ProductKey；将自己设备的三元组信息替换相对应部分。秘钥即为设备的DeviceSecret，直接复制粘贴填入即可" target="_blank" rel="noopener">http://encode.chahuo.com/。明文构建：蓝色部分为设备的clientId，与设备DeviceName相同即可；棕色部分为设备的DeviceName；黄色部分为设备ProductKey；将自己设备的三元组信息替换相对应部分。秘钥即为设备的DeviceSecret，直接复制粘贴填入即可</a><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528224336.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">明文：clientIdXXXXdeviceNameXXXXproductKeyXXXX</span><br></pre></td></tr></table></figure><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528233601.png" alt=""></p></li></ul><ul><li><p>将加密得到的哈希值sign带入上面的字符串，得到完整的数据；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串数据：productKey=a1odIqpc7I7&amp;sign=<span class="number">8</span>d2519d724d914ec90c55a82b3de4e10&amp;clientId=Air724UG&amp;deviceName=Air724UG</span><br></pre></td></tr></table></figure></li><li><p>附上我在记事本上做的构建字符串数据（注意数据不要有换行）<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528233916.png" alt=""></p></li><li><p>计算上面构造的字符串数据的长度，将字符串复制到串口调试助手，发送该字符串，即可得到该字符串的长度<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528230159.png" alt=""></p></li><li><p>自此，HTTP鉴权部分完成，截图中第⑤步发送AT指令“AT+HTTPACTION=1”，请求连接，若返回的HTTP状态码为200，则表示鉴权成功，若状态码为200之外的其他值，则查看合宙官方的《Luat 4G模块AT命令手册V4.1.6》，对应AT指令“AT+HTTPACTION=1”介绍有相关的状态码取值说明<br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528231323.png" alt=""><br><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/20200528231353.png" alt=""></p></li><li><p>发送AT指令“AT+HTTPREAD”查询 HTTP 服务响应，即可得到经阿里云认证的用户名和密码（此处用户名和密码与上面截图中的不一样，因为nan feng第一次只截图，没保存账号密码，下面这是重新HTTP鉴权得到的用户名和密码）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：ENkAiuMXiIS0nySaKnl6000100</span><br><span class="line">密码：^<span class="number">1</span>^<span class="number">1590679060769</span>^<span class="number">3</span>cebfceab74dfae</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>本文参考合宙官方手册，作为自己备忘所用，如果发现本文有错误的地方欢迎批评、指正，若本文对您有所帮助，转发、分享也是笔者坚持的动力，扫码关注微信公众号，后台回复 合宙Cat.1 获取Air724UG 4G LTE开发板相关资料包</p></blockquote><p><img src="https://nan-feng.oss-cn-qingdao.aliyuncs.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="关注南风过境蜻蜓飞，开启物联网、嵌入式学习之路"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;使用AT指令，快速连接上云服务器进行数据收发，达到给设备联网的效果&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
